
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c00  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003d0c  08003d0c  00013d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d40  08003d40  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003d40  08003d40  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003d40  08003d40  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d40  08003d40  00013d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  20000068  08003db0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001e4  08003db0  000201e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba87  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a3  00000000  00000000  0002bb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  0002dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c40  00000000  00000000  0002e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001848d  00000000  00000000  0002f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebf5  00000000  00000000  00047ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a92c  00000000  00000000  000566ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0fe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003584  00000000  00000000  000e1038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cf4 	.word	0x08003cf4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003cf4 	.word	0x08003cf4

0800014c <buttonReading>:
int flagButtonPressed[NUMS_OF_BUTTON];
int flagButtonHold[NUMS_OF_BUTTON];

int counterButtonHold[NUMS_OF_BUTTON] = {0, 0, 0, 0};

void buttonReading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMS_OF_BUTTON; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e08e      	b.n	8000276 <buttonReading+0x12a>
		ButtonBuffer2[i] = ButtonBuffer1[i];
 8000158:	4a4b      	ldr	r2, [pc, #300]	; (8000288 <buttonReading+0x13c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a4a      	ldr	r2, [pc, #296]	; (800028c <buttonReading+0x140>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		ButtonBuffer1[i] = ButtonBuffer0[i];
 800016a:	4a49      	ldr	r2, [pc, #292]	; (8000290 <buttonReading+0x144>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a45      	ldr	r2, [pc, #276]	; (8000288 <buttonReading+0x13c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		ButtonBuffer0[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800017c:	4a45      	ldr	r2, [pc, #276]	; (8000294 <buttonReading+0x148>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4944      	ldr	r1, [pc, #272]	; (8000298 <buttonReading+0x14c>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800018c:	4619      	mov	r1, r3
 800018e:	4610      	mov	r0, r2
 8000190:	f001 fcac 	bl	8001aec <HAL_GPIO_ReadPin>
 8000194:	4603      	mov	r3, r0
 8000196:	4619      	mov	r1, r3
 8000198:	4a3d      	ldr	r2, [pc, #244]	; (8000290 <buttonReading+0x144>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4413      	add	r3, r2
 800019e:	460a      	mov	r2, r1
 80001a0:	701a      	strb	r2, [r3, #0]
		if((ButtonBuffer2[i] == ButtonBuffer1[i]) && (ButtonBuffer1[i] == ButtonBuffer0[i])) {
 80001a2:	4a3a      	ldr	r2, [pc, #232]	; (800028c <buttonReading+0x140>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	4413      	add	r3, r2
 80001a8:	781a      	ldrb	r2, [r3, #0]
 80001aa:	4937      	ldr	r1, [pc, #220]	; (8000288 <buttonReading+0x13c>)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	440b      	add	r3, r1
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d15c      	bne.n	8000270 <buttonReading+0x124>
 80001b6:	4a34      	ldr	r2, [pc, #208]	; (8000288 <buttonReading+0x13c>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	4413      	add	r3, r2
 80001bc:	781a      	ldrb	r2, [r3, #0]
 80001be:	4934      	ldr	r1, [pc, #208]	; (8000290 <buttonReading+0x144>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	440b      	add	r3, r1
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	d152      	bne.n	8000270 <buttonReading+0x124>
			if(buttonBuffer[i] != ButtonBuffer0[i]) {
 80001ca:	4a34      	ldr	r2, [pc, #208]	; (800029c <buttonReading+0x150>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	781a      	ldrb	r2, [r3, #0]
 80001d2:	492f      	ldr	r1, [pc, #188]	; (8000290 <buttonReading+0x144>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	440b      	add	r3, r1
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d02e      	beq.n	800023c <buttonReading+0xf0>
				buttonBuffer[i] = ButtonBuffer0[i];
 80001de:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <buttonReading+0x144>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4413      	add	r3, r2
 80001e4:	7819      	ldrb	r1, [r3, #0]
 80001e6:	4a2d      	ldr	r2, [pc, #180]	; (800029c <buttonReading+0x150>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	460a      	mov	r2, r1
 80001ee:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == PRESSED) {
 80001f0:	4a2a      	ldr	r2, [pc, #168]	; (800029c <buttonReading+0x150>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4413      	add	r3, r2
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d119      	bne.n	8000230 <buttonReading+0xe4>
					counterButtonHold[i] = BUTTON_HOLD;
 80001fc:	4a28      	ldr	r2, [pc, #160]	; (80002a0 <buttonReading+0x154>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(CYCLE > 0) counterButtonHold[i] /= CYCLE;
 8000208:	4a25      	ldr	r2, [pc, #148]	; (80002a0 <buttonReading+0x154>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	4a24      	ldr	r2, [pc, #144]	; (80002a4 <buttonReading+0x158>)
 8000212:	fb82 1203 	smull	r1, r2, r2, r3
 8000216:	1092      	asrs	r2, r2, #2
 8000218:	17db      	asrs	r3, r3, #31
 800021a:	1ad2      	subs	r2, r2, r3
 800021c:	4920      	ldr	r1, [pc, #128]	; (80002a0 <buttonReading+0x154>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					flagButtonPressed[i] = 1;
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <buttonReading+0x15c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2101      	movs	r1, #1
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800022e:	e01f      	b.n	8000270 <buttonReading+0x124>
				}
				else flagButtonHold[i] = 0;
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <buttonReading+0x160>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2100      	movs	r1, #0
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023a:	e019      	b.n	8000270 <buttonReading+0x124>
			}
			else {
				if(buttonBuffer[i] == PRESSED) {
 800023c:	4a17      	ldr	r2, [pc, #92]	; (800029c <buttonReading+0x150>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d113      	bne.n	8000270 <buttonReading+0x124>
					counterButtonHold[i]--;
 8000248:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <buttonReading+0x154>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000250:	1e5a      	subs	r2, r3, #1
 8000252:	4913      	ldr	r1, [pc, #76]	; (80002a0 <buttonReading+0x154>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(counterButtonHold[i] == 0) flagButtonHold[i] = 1;
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <buttonReading+0x154>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d104      	bne.n	8000270 <buttonReading+0x124>
 8000266:	4a11      	ldr	r2, [pc, #68]	; (80002ac <buttonReading+0x160>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2101      	movs	r1, #1
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUMS_OF_BUTTON; i++) {
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b03      	cmp	r3, #3
 800027a:	f77f af6d 	ble.w	8000158 <buttonReading+0xc>
				}
			}
		}
	}
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000020 	.word	0x20000020
 800028c:	20000024 	.word	0x20000024
 8000290:	2000001c 	.word	0x2000001c
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000018 	.word	0x20000018
 80002a0:	200000a4 	.word	0x200000a4
 80002a4:	66666667 	.word	0x66666667
 80002a8:	20000084 	.word	0x20000084
 80002ac:	20000094 	.word	0x20000094

080002b0 <isButtonPressed>:

int isButtonPressed(int index) {
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NUMS_OF_BUTTON) return 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	db02      	blt.n	80002c4 <isButtonPressed+0x14>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	dd01      	ble.n	80002c8 <isButtonPressed+0x18>
 80002c4:	2300      	movs	r3, #0
 80002c6:	e00d      	b.n	80002e4 <isButtonPressed+0x34>
	if(flagButtonPressed[index] == 1) {
 80002c8:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <isButtonPressed+0x40>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d106      	bne.n	80002e2 <isButtonPressed+0x32>
		flagButtonPressed[index] = 0;
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <isButtonPressed+0x40>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2100      	movs	r1, #0
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002de:	2301      	movs	r3, #1
 80002e0:	e000      	b.n	80002e4 <isButtonPressed+0x34>
	}
	return 0;
 80002e2:	2300      	movs	r3, #0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000084 	.word	0x20000084

080002f4 <isButtonHold>:

int isButtonHold(int index) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NUMS_OF_BUTTON) return 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db02      	blt.n	8000308 <isButtonHold+0x14>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b04      	cmp	r3, #4
 8000306:	dd01      	ble.n	800030c <isButtonHold+0x18>
 8000308:	2300      	movs	r3, #0
 800030a:	e008      	b.n	800031e <isButtonHold+0x2a>
	if(flagButtonHold[index] == 1) {
 800030c:	4a06      	ldr	r2, [pc, #24]	; (8000328 <isButtonHold+0x34>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d101      	bne.n	800031c <isButtonHold+0x28>
		return 1;
 8000318:	2301      	movs	r3, #1
 800031a:	e000      	b.n	800031e <isButtonHold+0x2a>
	}
	return 0;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	20000094 	.word	0x20000094

0800032c <buzzer_modify_volume>:
 *      Author: Mr.HUNG
 */

#include "buzzer.h"

void buzzer_modify_volume(int volumeLevel) {
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, volumeLevel);
 8000334:	4b04      	ldr	r3, [pc, #16]	; (8000348 <buzzer_modify_volume+0x1c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	687a      	ldr	r2, [r7, #4]
 800033a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	bc80      	pop	{r7}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	2000011c 	.word	0x2000011c

0800034c <buzzer_turn_on>:

void buzzer_turn_on() {
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
	buzzer_modify_volume(50);
 8000350:	2032      	movs	r0, #50	; 0x32
 8000352:	f7ff ffeb 	bl	800032c <buzzer_modify_volume>
}
 8000356:	bf00      	nop
 8000358:	bd80      	pop	{r7, pc}

0800035a <buzzer_turn_off>:

void buzzer_turn_off() {
 800035a:	b580      	push	{r7, lr}
 800035c:	af00      	add	r7, sp, #0
	buzzer_modify_volume(0);
 800035e:	2000      	movs	r0, #0
 8000360:	f7ff ffe4 	bl	800032c <buzzer_modify_volume>
}
 8000364:	bf00      	nop
 8000366:	bd80      	pop	{r7, pc}

08000368 <incTime>:
int trafficTime[3] = {9,3,6};
int trafficRealTime[3];
int indexOfLight = REDVERFLAG;
int flag = 0;

void incTime(int index){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	switch(index){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	2b02      	cmp	r3, #2
 8000374:	d015      	beq.n	80003a2 <incTime+0x3a>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	2b02      	cmp	r3, #2
 800037a:	dc18      	bgt.n	80003ae <incTime+0x46>
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d003      	beq.n	800038a <incTime+0x22>
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	2b01      	cmp	r3, #1
 8000386:	d006      	beq.n	8000396 <incTime+0x2e>
 8000388:	e011      	b.n	80003ae <incTime+0x46>
		case RED_CHANGE: trafficTime[GREEN_CHANGE]++; break;
 800038a:	4b10      	ldr	r3, [pc, #64]	; (80003cc <incTime+0x64>)
 800038c:	689b      	ldr	r3, [r3, #8]
 800038e:	3301      	adds	r3, #1
 8000390:	4a0e      	ldr	r2, [pc, #56]	; (80003cc <incTime+0x64>)
 8000392:	6093      	str	r3, [r2, #8]
 8000394:	e00b      	b.n	80003ae <incTime+0x46>
		case YELLOW_CHANGE: trafficTime[RED_CHANGE]++; break;
 8000396:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <incTime+0x64>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	3301      	adds	r3, #1
 800039c:	4a0b      	ldr	r2, [pc, #44]	; (80003cc <incTime+0x64>)
 800039e:	6013      	str	r3, [r2, #0]
 80003a0:	e005      	b.n	80003ae <incTime+0x46>
		case GREEN_CHANGE: trafficTime[RED_CHANGE]++; break;
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <incTime+0x64>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3301      	adds	r3, #1
 80003a8:	4a08      	ldr	r2, [pc, #32]	; (80003cc <incTime+0x64>)
 80003aa:	6013      	str	r3, [r2, #0]
 80003ac:	bf00      	nop
	}
	trafficTime[index]++;
 80003ae:	4a07      	ldr	r2, [pc, #28]	; (80003cc <incTime+0x64>)
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b6:	1c5a      	adds	r2, r3, #1
 80003b8:	4904      	ldr	r1, [pc, #16]	; (80003cc <incTime+0x64>)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bc80      	pop	{r7}
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	2000002c 	.word	0x2000002c

080003d0 <decTime>:
void decTime(int index){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	switch(index){
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	2b02      	cmp	r3, #2
 80003dc:	d015      	beq.n	800040a <decTime+0x3a>
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	2b02      	cmp	r3, #2
 80003e2:	dc18      	bgt.n	8000416 <decTime+0x46>
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d003      	beq.n	80003f2 <decTime+0x22>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d006      	beq.n	80003fe <decTime+0x2e>
 80003f0:	e011      	b.n	8000416 <decTime+0x46>
		case RED_CHANGE: trafficTime[GREEN_CHANGE]--; break;
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <decTime+0x64>)
 80003f4:	689b      	ldr	r3, [r3, #8]
 80003f6:	3b01      	subs	r3, #1
 80003f8:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <decTime+0x64>)
 80003fa:	6093      	str	r3, [r2, #8]
 80003fc:	e00b      	b.n	8000416 <decTime+0x46>
		case YELLOW_CHANGE: trafficTime[RED_CHANGE]--; break;
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <decTime+0x64>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3b01      	subs	r3, #1
 8000404:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <decTime+0x64>)
 8000406:	6013      	str	r3, [r2, #0]
 8000408:	e005      	b.n	8000416 <decTime+0x46>
		case GREEN_CHANGE: trafficTime[RED_CHANGE]--; break;
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <decTime+0x64>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	3b01      	subs	r3, #1
 8000410:	4a08      	ldr	r2, [pc, #32]	; (8000434 <decTime+0x64>)
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	bf00      	nop
	}
	trafficTime[index]--;
 8000416:	4a07      	ldr	r2, [pc, #28]	; (8000434 <decTime+0x64>)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800041e:	1e5a      	subs	r2, r3, #1
 8000420:	4904      	ldr	r1, [pc, #16]	; (8000434 <decTime+0x64>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	2000002c 	.word	0x2000002c

08000438 <translate>:

void translate(void){
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 800043e:	2300      	movs	r3, #0
 8000440:	607b      	str	r3, [r7, #4]
 8000442:	e00e      	b.n	8000462 <translate+0x2a>
		trafficRealTime[i] = trafficTime[i] * 1000;
 8000444:	4a0b      	ldr	r2, [pc, #44]	; (8000474 <translate+0x3c>)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800044c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000450:	fb03 f202 	mul.w	r2, r3, r2
 8000454:	4908      	ldr	r1, [pc, #32]	; (8000478 <translate+0x40>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3301      	adds	r3, #1
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	2b02      	cmp	r3, #2
 8000466:	dded      	ble.n	8000444 <translate+0xc>
	}
}
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	370c      	adds	r7, #12
 800046e:	46bd      	mov	sp, r7
 8000470:	bc80      	pop	{r7}
 8000472:	4770      	bx	lr
 8000474:	2000002c 	.word	0x2000002c
 8000478:	200000bc 	.word	0x200000bc

0800047c <fsm_button_displayTraffic>:

void fsm_button_displayTraffic(void){
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	switch(statusBTN){
 8000480:	4bb7      	ldr	r3, [pc, #732]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b06      	cmp	r3, #6
 8000486:	f200 8169 	bhi.w	800075c <fsm_button_displayTraffic+0x2e0>
 800048a:	a201      	add	r2, pc, #4	; (adr r2, 8000490 <fsm_button_displayTraffic+0x14>)
 800048c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000490:	080004ad 	.word	0x080004ad
 8000494:	080004c1 	.word	0x080004c1
 8000498:	08000505 	.word	0x08000505
 800049c:	08000613 	.word	0x08000613
 80004a0:	08000625 	.word	0x08000625
 80004a4:	08000637 	.word	0x08000637
 80004a8:	080006e3 	.word	0x080006e3
	case INITBTN:
		currentStateVER = INIT;
 80004ac:	4bad      	ldr	r3, [pc, #692]	; (8000764 <fsm_button_displayTraffic+0x2e8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
		currentStateHOR = INIT;
 80004b2:	4bad      	ldr	r3, [pc, #692]	; (8000768 <fsm_button_displayTraffic+0x2ec>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
		statusBTN = NORMAL;
 80004b8:	4ba9      	ldr	r3, [pc, #676]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	701a      	strb	r2, [r3, #0]
		break;
 80004be:	e14d      	b.n	800075c <fsm_button_displayTraffic+0x2e0>
	case NORMAL:
		translate();
 80004c0:	f7ff ffba 	bl	8000438 <translate>
		displayTraffic(trafficRealTime);
 80004c4:	48a9      	ldr	r0, [pc, #676]	; (800076c <fsm_button_displayTraffic+0x2f0>)
 80004c6:	f000 fbb3 	bl	8000c30 <displayTraffic>

		if(isButtonPressed(MODE_BTN)){
 80004ca:	2000      	movs	r0, #0
 80004cc:	f7ff fef0 	bl	80002b0 <isButtonPressed>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d002      	beq.n	80004dc <fsm_button_displayTraffic+0x60>
			statusBTN = MODE;
 80004d6:	4ba2      	ldr	r3, [pc, #648]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 80004d8:	2202      	movs	r2, #2
 80004da:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonHold(MODE_BTN)){
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff ff09 	bl	80002f4 <isButtonHold>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d002      	beq.n	80004ee <fsm_button_displayTraffic+0x72>
			statusBTN = HOLD_MODE;
 80004e8:	4b9d      	ldr	r3, [pc, #628]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 80004ea:	2205      	movs	r2, #5
 80004ec:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonPressed(PEDES_BTN)){
 80004ee:	2003      	movs	r0, #3
 80004f0:	f7ff fede 	bl	80002b0 <isButtonPressed>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	f000 8129 	beq.w	800074e <fsm_button_displayTraffic+0x2d2>
			statusBTN = PEDES;
 80004fc:	4b98      	ldr	r3, [pc, #608]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 80004fe:	2206      	movs	r2, #6
 8000500:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000502:	e124      	b.n	800074e <fsm_button_displayTraffic+0x2d2>
	case MODE:
		setTimer(BLINK,10);
 8000504:	210a      	movs	r1, #10
 8000506:	2006      	movs	r0, #6
 8000508:	f000 fede 	bl	80012c8 <setTimer>

		if(changeTimeState == CONFIRM){
 800050c:	4b98      	ldr	r3, [pc, #608]	; (8000770 <fsm_button_displayTraffic+0x2f4>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	2b03      	cmp	r3, #3
 8000512:	d131      	bne.n	8000578 <fsm_button_displayTraffic+0xfc>
			if(timer_flag[BLINK]){
 8000514:	4b97      	ldr	r3, [pc, #604]	; (8000774 <fsm_button_displayTraffic+0x2f8>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d01f      	beq.n	800055c <fsm_button_displayTraffic+0xe0>
				if(flag == 0){
 800051c:	4b96      	ldr	r3, [pc, #600]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d106      	bne.n	8000532 <fsm_button_displayTraffic+0xb6>
					blinkyLight(RED);
 8000524:	2001      	movs	r0, #1
 8000526:	f000 fa89 	bl	8000a3c <blinkyLight>
					flag = 1;
 800052a:	4b93      	ldr	r3, [pc, #588]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 800052c:	2201      	movs	r2, #1
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	e010      	b.n	8000554 <fsm_button_displayTraffic+0xd8>
				}else if(flag == 1){
 8000532:	4b91      	ldr	r3, [pc, #580]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	2b01      	cmp	r3, #1
 8000538:	d106      	bne.n	8000548 <fsm_button_displayTraffic+0xcc>
					blinkyLight(YELLOW);
 800053a:	2002      	movs	r0, #2
 800053c:	f000 fa7e 	bl	8000a3c <blinkyLight>
					flag = 2;
 8000540:	4b8d      	ldr	r3, [pc, #564]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 8000542:	2202      	movs	r2, #2
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	e005      	b.n	8000554 <fsm_button_displayTraffic+0xd8>
				}else {
					blinkyLight(GREEN);
 8000548:	2003      	movs	r0, #3
 800054a:	f000 fa77 	bl	8000a3c <blinkyLight>
					flag = 0;
 800054e:	4b8a      	ldr	r3, [pc, #552]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
				}
				setTimer(BLINK,30);
 8000554:	211e      	movs	r1, #30
 8000556:	2006      	movs	r0, #6
 8000558:	f000 feb6 	bl	80012c8 <setTimer>
			}

			if(isButtonPressed(MODE_BTN)){
 800055c:	2000      	movs	r0, #0
 800055e:	f7ff fea7 	bl	80002b0 <isButtonPressed>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	f000 80f4 	beq.w	8000752 <fsm_button_displayTraffic+0x2d6>
				changeTimeState = RED_CHANGE;
 800056a:	4b81      	ldr	r3, [pc, #516]	; (8000770 <fsm_button_displayTraffic+0x2f4>)
 800056c:	2200      	movs	r2, #0
 800056e:	701a      	strb	r2, [r3, #0]
				statusBTN = INITBTN;
 8000570:	4b7b      	ldr	r3, [pc, #492]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(INC_BTN)) statusBTN = INC;
			if(isButtonPressed(DEC_BTN)) statusBTN = DEC;
		}

		break;
 8000576:	e0ec      	b.n	8000752 <fsm_button_displayTraffic+0x2d6>
		blinkyLight(State);
 8000578:	4b80      	ldr	r3, [pc, #512]	; (800077c <fsm_button_displayTraffic+0x300>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f000 fa5d 	bl	8000a3c <blinkyLight>
			if(isButtonPressed(MODE_BTN)){
 8000582:	2000      	movs	r0, #0
 8000584:	f7ff fe94 	bl	80002b0 <isButtonPressed>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d02c      	beq.n	80005e8 <fsm_button_displayTraffic+0x16c>
				switch(changeTimeState){
 800058e:	4b78      	ldr	r3, [pc, #480]	; (8000770 <fsm_button_displayTraffic+0x2f4>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b03      	cmp	r3, #3
 8000594:	d829      	bhi.n	80005ea <fsm_button_displayTraffic+0x16e>
 8000596:	a201      	add	r2, pc, #4	; (adr r2, 800059c <fsm_button_displayTraffic+0x120>)
 8000598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800059c:	080005ad 	.word	0x080005ad
 80005a0:	080005c1 	.word	0x080005c1
 80005a4:	080005d5 	.word	0x080005d5
 80005a8:	080005eb 	.word	0x080005eb
						State = YELLOW;
 80005ac:	4b73      	ldr	r3, [pc, #460]	; (800077c <fsm_button_displayTraffic+0x300>)
 80005ae:	2202      	movs	r2, #2
 80005b0:	701a      	strb	r2, [r3, #0]
						indexOfLight = YELLOWVERFLAG;
 80005b2:	4b73      	ldr	r3, [pc, #460]	; (8000780 <fsm_button_displayTraffic+0x304>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
						changeTimeState = YELLOW_CHANGE;
 80005b8:	4b6d      	ldr	r3, [pc, #436]	; (8000770 <fsm_button_displayTraffic+0x2f4>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
						break;
 80005be:	e014      	b.n	80005ea <fsm_button_displayTraffic+0x16e>
						State = GREEN;
 80005c0:	4b6e      	ldr	r3, [pc, #440]	; (800077c <fsm_button_displayTraffic+0x300>)
 80005c2:	2203      	movs	r2, #3
 80005c4:	701a      	strb	r2, [r3, #0]
						indexOfLight = GREENVERFLAG;
 80005c6:	4b6e      	ldr	r3, [pc, #440]	; (8000780 <fsm_button_displayTraffic+0x304>)
 80005c8:	2202      	movs	r2, #2
 80005ca:	601a      	str	r2, [r3, #0]
						changeTimeState = GREEN_CHANGE;
 80005cc:	4b68      	ldr	r3, [pc, #416]	; (8000770 <fsm_button_displayTraffic+0x2f4>)
 80005ce:	2202      	movs	r2, #2
 80005d0:	701a      	strb	r2, [r3, #0]
						break;
 80005d2:	e00a      	b.n	80005ea <fsm_button_displayTraffic+0x16e>
						State = RED;
 80005d4:	4b69      	ldr	r3, [pc, #420]	; (800077c <fsm_button_displayTraffic+0x300>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
						indexOfLight = REDVERFLAG;
 80005da:	4b69      	ldr	r3, [pc, #420]	; (8000780 <fsm_button_displayTraffic+0x304>)
 80005dc:	2200      	movs	r2, #0
 80005de:	601a      	str	r2, [r3, #0]
						changeTimeState = CONFIRM;
 80005e0:	4b63      	ldr	r3, [pc, #396]	; (8000770 <fsm_button_displayTraffic+0x2f4>)
 80005e2:	2203      	movs	r2, #3
 80005e4:	701a      	strb	r2, [r3, #0]
						break;
 80005e6:	e000      	b.n	80005ea <fsm_button_displayTraffic+0x16e>
			}
 80005e8:	bf00      	nop
			if(isButtonPressed(INC_BTN)) statusBTN = INC;
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff fe60 	bl	80002b0 <isButtonPressed>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d002      	beq.n	80005fc <fsm_button_displayTraffic+0x180>
 80005f6:	4b5a      	ldr	r3, [pc, #360]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 80005f8:	2203      	movs	r2, #3
 80005fa:	701a      	strb	r2, [r3, #0]
			if(isButtonPressed(DEC_BTN)) statusBTN = DEC;
 80005fc:	2002      	movs	r0, #2
 80005fe:	f7ff fe57 	bl	80002b0 <isButtonPressed>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	f000 80a4 	beq.w	8000752 <fsm_button_displayTraffic+0x2d6>
 800060a:	4b55      	ldr	r3, [pc, #340]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 800060c:	2204      	movs	r2, #4
 800060e:	701a      	strb	r2, [r3, #0]
		break;
 8000610:	e09f      	b.n	8000752 <fsm_button_displayTraffic+0x2d6>
	case INC:
		incTime(indexOfLight);
 8000612:	4b5b      	ldr	r3, [pc, #364]	; (8000780 <fsm_button_displayTraffic+0x304>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff fea6 	bl	8000368 <incTime>
		statusBTN = MODE;
 800061c:	4b50      	ldr	r3, [pc, #320]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 800061e:	2202      	movs	r2, #2
 8000620:	701a      	strb	r2, [r3, #0]
		break;
 8000622:	e09b      	b.n	800075c <fsm_button_displayTraffic+0x2e0>
	case DEC:
		decTime(indexOfLight);
 8000624:	4b56      	ldr	r3, [pc, #344]	; (8000780 <fsm_button_displayTraffic+0x304>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4618      	mov	r0, r3
 800062a:	f7ff fed1 	bl	80003d0 <decTime>
		statusBTN = MODE;
 800062e:	4b4c      	ldr	r3, [pc, #304]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
		break;
 8000634:	e092      	b.n	800075c <fsm_button_displayTraffic+0x2e0>
	case HOLD_MODE:

		switch(manualDisplay){
 8000636:	4b53      	ldr	r3, [pc, #332]	; (8000784 <fsm_button_displayTraffic+0x308>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b03      	cmp	r3, #3
 800063c:	d825      	bhi.n	800068a <fsm_button_displayTraffic+0x20e>
 800063e:	a201      	add	r2, pc, #4	; (adr r2, 8000644 <fsm_button_displayTraffic+0x1c8>)
 8000640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000644:	08000655 	.word	0x08000655
 8000648:	08000667 	.word	0x08000667
 800064c:	08000679 	.word	0x08000679
 8000650:	0800068b 	.word	0x0800068b
		case RED_CHANGE:
			turnOnLight(RED,VER);
 8000654:	2101      	movs	r1, #1
 8000656:	2001      	movs	r0, #1
 8000658:	f000 f938 	bl	80008cc <turnOnLight>
			turnOnLight(RED,HOR);
 800065c:	2100      	movs	r1, #0
 800065e:	2001      	movs	r0, #1
 8000660:	f000 f934 	bl	80008cc <turnOnLight>
			break;
 8000664:	e011      	b.n	800068a <fsm_button_displayTraffic+0x20e>
		case YELLOW_CHANGE:
			turnOnLight(YELLOW,VER);
 8000666:	2101      	movs	r1, #1
 8000668:	2002      	movs	r0, #2
 800066a:	f000 f92f 	bl	80008cc <turnOnLight>
			turnOnLight(YELLOW,HOR);
 800066e:	2100      	movs	r1, #0
 8000670:	2002      	movs	r0, #2
 8000672:	f000 f92b 	bl	80008cc <turnOnLight>
			break;
 8000676:	e008      	b.n	800068a <fsm_button_displayTraffic+0x20e>
		case GREEN_CHANGE:
			turnOnLight(GREEN,VER);
 8000678:	2101      	movs	r1, #1
 800067a:	2003      	movs	r0, #3
 800067c:	f000 f926 	bl	80008cc <turnOnLight>
			turnOnLight(GREEN,HOR);
 8000680:	2100      	movs	r1, #0
 8000682:	2003      	movs	r0, #3
 8000684:	f000 f922 	bl	80008cc <turnOnLight>
			break;
 8000688:	bf00      	nop
		case CONFIRM: break;
		}

		if(isButtonPressed(MODE_BTN)){
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fe10 	bl	80002b0 <isButtonPressed>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d01a      	beq.n	80006cc <fsm_button_displayTraffic+0x250>
			switch(manualDisplay){
 8000696:	4b3b      	ldr	r3, [pc, #236]	; (8000784 <fsm_button_displayTraffic+0x308>)
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	2b03      	cmp	r3, #3
 800069c:	d817      	bhi.n	80006ce <fsm_button_displayTraffic+0x252>
 800069e:	a201      	add	r2, pc, #4	; (adr r2, 80006a4 <fsm_button_displayTraffic+0x228>)
 80006a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006a4:	080006b5 	.word	0x080006b5
 80006a8:	080006bd 	.word	0x080006bd
 80006ac:	080006c5 	.word	0x080006c5
 80006b0:	080006cf 	.word	0x080006cf
				case RED_CHANGE: manualDisplay = YELLOW_CHANGE; break;
 80006b4:	4b33      	ldr	r3, [pc, #204]	; (8000784 <fsm_button_displayTraffic+0x308>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e008      	b.n	80006ce <fsm_button_displayTraffic+0x252>
				case YELLOW_CHANGE: manualDisplay = GREEN_CHANGE; break;
 80006bc:	4b31      	ldr	r3, [pc, #196]	; (8000784 <fsm_button_displayTraffic+0x308>)
 80006be:	2202      	movs	r2, #2
 80006c0:	701a      	strb	r2, [r3, #0]
 80006c2:	e004      	b.n	80006ce <fsm_button_displayTraffic+0x252>
				case GREEN_CHANGE: manualDisplay = RED_CHANGE; break;
 80006c4:	4b2f      	ldr	r3, [pc, #188]	; (8000784 <fsm_button_displayTraffic+0x308>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e000      	b.n	80006ce <fsm_button_displayTraffic+0x252>
				case CONFIRM: break;
			}
		}
 80006cc:	bf00      	nop

		if(isButtonHold(MODE_BTN)){
 80006ce:	2000      	movs	r0, #0
 80006d0:	f7ff fe10 	bl	80002f4 <isButtonHold>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d03d      	beq.n	8000756 <fsm_button_displayTraffic+0x2da>
			statusBTN = INITBTN;
 80006da:	4b21      	ldr	r3, [pc, #132]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006e0:	e039      	b.n	8000756 <fsm_button_displayTraffic+0x2da>
	case PEDES:
		setTimer(BLINK,10);
 80006e2:	210a      	movs	r1, #10
 80006e4:	2006      	movs	r0, #6
 80006e6:	f000 fdef 	bl	80012c8 <setTimer>
		blinkyPedes();
 80006ea:	f000 f8cf 	bl	800088c <blinkyPedes>
		if(timer_flag[BLINK]){
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <fsm_button_displayTraffic+0x2f8>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d01f      	beq.n	8000736 <fsm_button_displayTraffic+0x2ba>
			if(flag == 0){
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d106      	bne.n	800070c <fsm_button_displayTraffic+0x290>
				blinkyLight(RED);
 80006fe:	2001      	movs	r0, #1
 8000700:	f000 f99c 	bl	8000a3c <blinkyLight>
				flag = 1;
 8000704:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 8000706:	2201      	movs	r2, #1
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	e010      	b.n	800072e <fsm_button_displayTraffic+0x2b2>
			}else if(flag == 1){
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b01      	cmp	r3, #1
 8000712:	d106      	bne.n	8000722 <fsm_button_displayTraffic+0x2a6>
				blinkyLight(YELLOW);
 8000714:	2002      	movs	r0, #2
 8000716:	f000 f991 	bl	8000a3c <blinkyLight>
				flag = 2;
 800071a:	4b17      	ldr	r3, [pc, #92]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 800071c:	2202      	movs	r2, #2
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	e005      	b.n	800072e <fsm_button_displayTraffic+0x2b2>
			}else {
				blinkyLight(GREEN);
 8000722:	2003      	movs	r0, #3
 8000724:	f000 f98a 	bl	8000a3c <blinkyLight>
				flag = 0;
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <fsm_button_displayTraffic+0x2fc>)
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
			}
			setTimer(BLINK,30);
 800072e:	211e      	movs	r1, #30
 8000730:	2006      	movs	r0, #6
 8000732:	f000 fdc9 	bl	80012c8 <setTimer>
		}
		if (isButtonPressed(PEDES_BTN)){
 8000736:	2003      	movs	r0, #3
 8000738:	f7ff fdba 	bl	80002b0 <isButtonPressed>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00b      	beq.n	800075a <fsm_button_displayTraffic+0x2de>
			clearPedes();
 8000742:	f000 f86f 	bl	8000824 <clearPedes>
			statusBTN= INITBTN;
 8000746:	4b06      	ldr	r3, [pc, #24]	; (8000760 <fsm_button_displayTraffic+0x2e4>)
 8000748:	2200      	movs	r2, #0
 800074a:	701a      	strb	r2, [r3, #0]
		}
		break;
 800074c:	e005      	b.n	800075a <fsm_button_displayTraffic+0x2de>
		break;
 800074e:	bf00      	nop
 8000750:	e004      	b.n	800075c <fsm_button_displayTraffic+0x2e0>
		break;
 8000752:	bf00      	nop
 8000754:	e002      	b.n	800075c <fsm_button_displayTraffic+0x2e0>
		break;
 8000756:	bf00      	nop
 8000758:	e000      	b.n	800075c <fsm_button_displayTraffic+0x2e0>
		break;
 800075a:	bf00      	nop
	}
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	200000b7 	.word	0x200000b7
 8000764:	200000b5 	.word	0x200000b5
 8000768:	200000b6 	.word	0x200000b6
 800076c:	200000bc 	.word	0x200000bc
 8000770:	200000b8 	.word	0x200000b8
 8000774:	200001c8 	.word	0x200001c8
 8000778:	200000cc 	.word	0x200000cc
 800077c:	20000028 	.word	0x20000028
 8000780:	200000c8 	.word	0x200000c8
 8000784:	200000b9 	.word	0x200000b9

08000788 <clearLight>:
		D7_Pin
};

unsigned char blink = 0;

void clearLight(enum flow direction){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <clearLight+0x16>
 8000798:	2b01      	cmp	r3, #1
 800079a:	d016      	beq.n	80007ca <clearLight+0x42>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
			HAL_GPIO_WritePin(LedPortVER[i],LedPinVER[i],0);
		}
		break;
	}
}
 800079c:	e02b      	b.n	80007f6 <clearLight+0x6e>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	e00e      	b.n	80007c2 <clearLight+0x3a>
			HAL_GPIO_WritePin(LedPortHOR[i],LedPinHOR[i],0);
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <clearLight+0x78>)
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <clearLight+0x7c>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4619      	mov	r1, r3
 80007b8:	f001 f9af 	bl	8001b1a <HAL_GPIO_WritePin>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	3301      	adds	r3, #1
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b01      	cmp	r3, #1
 80007c6:	dded      	ble.n	80007a4 <clearLight+0x1c>
		break;
 80007c8:	e015      	b.n	80007f6 <clearLight+0x6e>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	e00e      	b.n	80007ee <clearLight+0x66>
			HAL_GPIO_WritePin(LedPortVER[i],LedPinVER[i],0);
 80007d0:	4a0d      	ldr	r2, [pc, #52]	; (8000808 <clearLight+0x80>)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007d8:	4a0c      	ldr	r2, [pc, #48]	; (800080c <clearLight+0x84>)
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	f001 f999 	bl	8001b1a <HAL_GPIO_WritePin>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	dded      	ble.n	80007d0 <clearLight+0x48>
		break;
 80007f4:	bf00      	nop
}
 80007f6:	bf00      	nop
 80007f8:	3710      	adds	r7, #16
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000040 	.word	0x20000040
 8000804:	2000004c 	.word	0x2000004c
 8000808:	20000038 	.word	0x20000038
 800080c:	20000048 	.word	0x20000048

08000810 <clearTrafficLight>:

void clearTrafficLight(void){
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	clearLight(HOR);
 8000814:	2000      	movs	r0, #0
 8000816:	f7ff ffb7 	bl	8000788 <clearLight>
	clearLight(VER);
 800081a:	2001      	movs	r0, #1
 800081c:	f7ff ffb4 	bl	8000788 <clearLight>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <clearPedes>:

void clearPedes(void){
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LedPortPedes[0],LedPinPedes[0],0);
 8000828:	4b09      	ldr	r3, [pc, #36]	; (8000850 <clearPedes+0x2c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a09      	ldr	r2, [pc, #36]	; (8000854 <clearPedes+0x30>)
 800082e:	8811      	ldrh	r1, [r2, #0]
 8000830:	2200      	movs	r2, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f001 f971 	bl	8001b1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedPortPedes[1],LedPinPedes[1],0);
 8000838:	4b05      	ldr	r3, [pc, #20]	; (8000850 <clearPedes+0x2c>)
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	4a05      	ldr	r2, [pc, #20]	; (8000854 <clearPedes+0x30>)
 800083e:	8851      	ldrh	r1, [r2, #2]
 8000840:	2200      	movs	r2, #0
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f969 	bl	8001b1a <HAL_GPIO_WritePin>
	buzzer_turn_off();
 8000848:	f7ff fd87 	bl	800035a <buzzer_turn_off>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	20000050 	.word	0x20000050
 8000854:	20000058 	.word	0x20000058

08000858 <turnOnPedes>:

void turnOnPedes(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LedPortPedes[0],LedPinPedes[0],0);
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <turnOnPedes+0x2c>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a09      	ldr	r2, [pc, #36]	; (8000888 <turnOnPedes+0x30>)
 8000862:	8811      	ldrh	r1, [r2, #0]
 8000864:	2200      	movs	r2, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f001 f957 	bl	8001b1a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedPortPedes[1],LedPinPedes[1],1);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <turnOnPedes+0x2c>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a05      	ldr	r2, [pc, #20]	; (8000888 <turnOnPedes+0x30>)
 8000872:	8851      	ldrh	r1, [r2, #2]
 8000874:	2201      	movs	r2, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f001 f94f 	bl	8001b1a <HAL_GPIO_WritePin>
	buzzer_turn_on();
 800087c:	f7ff fd66 	bl	800034c <buzzer_turn_on>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000050 	.word	0x20000050
 8000888:	20000058 	.word	0x20000058

0800088c <blinkyPedes>:

void blinkyPedes(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	if(timer_flag[BLINK]){
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <blinkyPedes+0x38>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d013      	beq.n	80008c0 <blinkyPedes+0x34>
		if(blink){
 8000898:	4b0b      	ldr	r3, [pc, #44]	; (80008c8 <blinkyPedes+0x3c>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d005      	beq.n	80008ac <blinkyPedes+0x20>
			clearPedes();
 80008a0:	f7ff ffc0 	bl	8000824 <clearPedes>
			blink = 0;
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <blinkyPedes+0x3c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	701a      	strb	r2, [r3, #0]
 80008aa:	e004      	b.n	80008b6 <blinkyPedes+0x2a>
		}
		else{
			turnOnPedes();
 80008ac:	f7ff ffd4 	bl	8000858 <turnOnPedes>
			blink = 1;
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <blinkyPedes+0x3c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
		}
		setTimer(BLINK,1000);
 80008b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 fd04 	bl	80012c8 <setTimer>
	}
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	200001c8 	.word	0x200001c8
 80008c8:	200000d0 	.word	0x200000d0

080008cc <turnOnLight>:

void turnOnLight(enum StateLight currentState, enum flow direction){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	460a      	mov	r2, r1
 80008d6:	71fb      	strb	r3, [r7, #7]
 80008d8:	4613      	mov	r3, r2
 80008da:	71bb      	strb	r3, [r7, #6]
	switch(direction){
 80008dc:	79bb      	ldrb	r3, [r7, #6]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <turnOnLight+0x1c>
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d04e      	beq.n	8000984 <turnOnLight+0xb8>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],1);
			break;
		}
		break;
	}
}
 80008e6:	e09c      	b.n	8000a22 <turnOnLight+0x156>
		switch(currentState){
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	f200 8096 	bhi.w	8000a1c <turnOnLight+0x150>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <turnOnLight+0x2c>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000981 	.word	0x08000981
 80008fc:	08000909 	.word	0x08000909
 8000900:	08000931 	.word	0x08000931
 8000904:	08000959 	.word	0x08000959
			clearLight(HOR);
 8000908:	2000      	movs	r0, #0
 800090a:	f7ff ff3d 	bl	8000788 <clearLight>
			HAL_GPIO_WritePin(LedPortHOR[0],LedPinHOR[0],1);
 800090e:	4b47      	ldr	r3, [pc, #284]	; (8000a2c <turnOnLight+0x160>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4a47      	ldr	r2, [pc, #284]	; (8000a30 <turnOnLight+0x164>)
 8000914:	8811      	ldrh	r1, [r2, #0]
 8000916:	2201      	movs	r2, #1
 8000918:	4618      	mov	r0, r3
 800091a:	f001 f8fe 	bl	8001b1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortHOR[1],LedPinHOR[1],0);
 800091e:	4b43      	ldr	r3, [pc, #268]	; (8000a2c <turnOnLight+0x160>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	4a43      	ldr	r2, [pc, #268]	; (8000a30 <turnOnLight+0x164>)
 8000924:	8851      	ldrh	r1, [r2, #2]
 8000926:	2200      	movs	r2, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f001 f8f6 	bl	8001b1a <HAL_GPIO_WritePin>
			break;
 800092e:	e028      	b.n	8000982 <turnOnLight+0xb6>
			clearLight(HOR);
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff ff29 	bl	8000788 <clearLight>
			HAL_GPIO_WritePin(LedPortHOR[0],LedPinHOR[0],1);
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <turnOnLight+0x160>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a3d      	ldr	r2, [pc, #244]	; (8000a30 <turnOnLight+0x164>)
 800093c:	8811      	ldrh	r1, [r2, #0]
 800093e:	2201      	movs	r2, #1
 8000940:	4618      	mov	r0, r3
 8000942:	f001 f8ea 	bl	8001b1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortHOR[1],LedPinHOR[1],1);
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <turnOnLight+0x160>)
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	4a39      	ldr	r2, [pc, #228]	; (8000a30 <turnOnLight+0x164>)
 800094c:	8851      	ldrh	r1, [r2, #2]
 800094e:	2201      	movs	r2, #1
 8000950:	4618      	mov	r0, r3
 8000952:	f001 f8e2 	bl	8001b1a <HAL_GPIO_WritePin>
			break;
 8000956:	e014      	b.n	8000982 <turnOnLight+0xb6>
			clearLight(HOR);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff15 	bl	8000788 <clearLight>
			HAL_GPIO_WritePin(LedPortHOR[0],LedPinHOR[0],0);
 800095e:	4b33      	ldr	r3, [pc, #204]	; (8000a2c <turnOnLight+0x160>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a33      	ldr	r2, [pc, #204]	; (8000a30 <turnOnLight+0x164>)
 8000964:	8811      	ldrh	r1, [r2, #0]
 8000966:	2200      	movs	r2, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f001 f8d6 	bl	8001b1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortHOR[1],LedPinHOR[1],1);
 800096e:	4b2f      	ldr	r3, [pc, #188]	; (8000a2c <turnOnLight+0x160>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	4a2f      	ldr	r2, [pc, #188]	; (8000a30 <turnOnLight+0x164>)
 8000974:	8851      	ldrh	r1, [r2, #2]
 8000976:	2201      	movs	r2, #1
 8000978:	4618      	mov	r0, r3
 800097a:	f001 f8ce 	bl	8001b1a <HAL_GPIO_WritePin>
			break;
 800097e:	e000      	b.n	8000982 <turnOnLight+0xb6>
		case INIT: break;
 8000980:	bf00      	nop
		break;
 8000982:	e04b      	b.n	8000a1c <turnOnLight+0x150>
		switch(currentState){
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d84a      	bhi.n	8000a20 <turnOnLight+0x154>
 800098a:	a201      	add	r2, pc, #4	; (adr r2, 8000990 <turnOnLight+0xc4>)
 800098c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000990:	08000a19 	.word	0x08000a19
 8000994:	080009a1 	.word	0x080009a1
 8000998:	080009c9 	.word	0x080009c9
 800099c:	080009f1 	.word	0x080009f1
			clearLight(VER);
 80009a0:	2001      	movs	r0, #1
 80009a2:	f7ff fef1 	bl	8000788 <clearLight>
			HAL_GPIO_WritePin(LedPortVER[0],LedPinVER[0],1);
 80009a6:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <turnOnLight+0x168>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <turnOnLight+0x16c>)
 80009ac:	8811      	ldrh	r1, [r2, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 f8b2 	bl	8001b1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],0);
 80009b6:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <turnOnLight+0x168>)
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	4a1f      	ldr	r2, [pc, #124]	; (8000a38 <turnOnLight+0x16c>)
 80009bc:	8851      	ldrh	r1, [r2, #2]
 80009be:	2200      	movs	r2, #0
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 f8aa 	bl	8001b1a <HAL_GPIO_WritePin>
			break;
 80009c6:	e028      	b.n	8000a1a <turnOnLight+0x14e>
			clearLight(VER);
 80009c8:	2001      	movs	r0, #1
 80009ca:	f7ff fedd 	bl	8000788 <clearLight>
			HAL_GPIO_WritePin(LedPortVER[0],LedPinVER[0],1);
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <turnOnLight+0x168>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <turnOnLight+0x16c>)
 80009d4:	8811      	ldrh	r1, [r2, #0]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 f89e 	bl	8001b1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],1);
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <turnOnLight+0x168>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	4a15      	ldr	r2, [pc, #84]	; (8000a38 <turnOnLight+0x16c>)
 80009e4:	8851      	ldrh	r1, [r2, #2]
 80009e6:	2201      	movs	r2, #1
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 f896 	bl	8001b1a <HAL_GPIO_WritePin>
			break;
 80009ee:	e014      	b.n	8000a1a <turnOnLight+0x14e>
			clearLight(VER);
 80009f0:	2001      	movs	r0, #1
 80009f2:	f7ff fec9 	bl	8000788 <clearLight>
			HAL_GPIO_WritePin(LedPortVER[0],LedPinVER[0],0);
 80009f6:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <turnOnLight+0x168>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a0f      	ldr	r2, [pc, #60]	; (8000a38 <turnOnLight+0x16c>)
 80009fc:	8811      	ldrh	r1, [r2, #0]
 80009fe:	2200      	movs	r2, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f001 f88a 	bl	8001b1a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],1);
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <turnOnLight+0x168>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	4a0b      	ldr	r2, [pc, #44]	; (8000a38 <turnOnLight+0x16c>)
 8000a0c:	8851      	ldrh	r1, [r2, #2]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 f882 	bl	8001b1a <HAL_GPIO_WritePin>
			break;
 8000a16:	e000      	b.n	8000a1a <turnOnLight+0x14e>
		case INIT: break;
 8000a18:	bf00      	nop
		break;
 8000a1a:	e001      	b.n	8000a20 <turnOnLight+0x154>
		break;
 8000a1c:	bf00      	nop
 8000a1e:	e000      	b.n	8000a22 <turnOnLight+0x156>
		break;
 8000a20:	bf00      	nop
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000040 	.word	0x20000040
 8000a30:	2000004c 	.word	0x2000004c
 8000a34:	20000038 	.word	0x20000038
 8000a38:	20000048 	.word	0x20000048

08000a3c <blinkyLight>:

void blinkyLight(enum StateLight currentState){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	if(timer_flag[BLINK]){
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <blinkyLight+0x50>)
 8000a48:	699b      	ldr	r3, [r3, #24]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d01a      	beq.n	8000a84 <blinkyLight+0x48>
		if(blink){
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <blinkyLight+0x54>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <blinkyLight+0x26>
			clearTrafficLight();
 8000a56:	f7ff fedb 	bl	8000810 <clearTrafficLight>
			blink = 0;
 8000a5a:	4b0d      	ldr	r3, [pc, #52]	; (8000a90 <blinkyLight+0x54>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e00c      	b.n	8000a7c <blinkyLight+0x40>
		}
		else{
			turnOnLight(currentState,VER);
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	2101      	movs	r1, #1
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff ff30 	bl	80008cc <turnOnLight>
			turnOnLight(currentState,HOR);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ff2b 	bl	80008cc <turnOnLight>
			blink = 1;
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <blinkyLight+0x54>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
		}
		setTimer(BLINK,200);
 8000a7c:	21c8      	movs	r1, #200	; 0xc8
 8000a7e:	2006      	movs	r0, #6
 8000a80:	f000 fc22 	bl	80012c8 <setTimer>
	}
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	200001c8 	.word	0x200001c8
 8000a90:	200000d0 	.word	0x200000d0

08000a94 <displayTrafficLight>:

void displayTrafficLight(enum flow direction, int * trafficTime){
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	6039      	str	r1, [r7, #0]
 8000a9e:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d002      	beq.n	8000aac <displayTrafficLight+0x18>
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d05a      	beq.n	8000b60 <displayTrafficLight+0xcc>
			}
			break;
		}
		break;
	}
}
 8000aaa:	e0b7      	b.n	8000c1c <displayTrafficLight+0x188>
		switch(currentStateHOR){
 8000aac:	4b5d      	ldr	r3, [pc, #372]	; (8000c24 <displayTrafficLight+0x190>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	f200 80b0 	bhi.w	8000c16 <displayTrafficLight+0x182>
 8000ab6:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <displayTrafficLight+0x28>)
 8000ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abc:	08000acd 	.word	0x08000acd
 8000ac0:	08000ae5 	.word	0x08000ae5
 8000ac4:	08000b0b 	.word	0x08000b0b
 8000ac8:	08000b2f 	.word	0x08000b2f
			clearTrafficLight();
 8000acc:	f7ff fea0 	bl	8000810 <clearTrafficLight>
			setTimer(HOR,trafficTime[REDHORFLAG - 3]);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	f000 fbf6 	bl	80012c8 <setTimer>
			currentStateHOR = RED;
 8000adc:	4b51      	ldr	r3, [pc, #324]	; (8000c24 <displayTrafficLight+0x190>)
 8000ade:	2201      	movs	r2, #1
 8000ae0:	701a      	strb	r2, [r3, #0]
			break;
 8000ae2:	e03c      	b.n	8000b5e <displayTrafficLight+0xca>
			turnOnLight(RED,HOR);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fef0 	bl	80008cc <turnOnLight>
			if(timer_flag[HOR]){
 8000aec:	4b4e      	ldr	r3, [pc, #312]	; (8000c28 <displayTrafficLight+0x194>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d02f      	beq.n	8000b54 <displayTrafficLight+0xc0>
				currentStateHOR = GREEN;
 8000af4:	4b4b      	ldr	r3, [pc, #300]	; (8000c24 <displayTrafficLight+0x190>)
 8000af6:	2203      	movs	r2, #3
 8000af8:	701a      	strb	r2, [r3, #0]
				setTimer(HOR,trafficTime[GREENHORFLAG - 3]);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3308      	adds	r3, #8
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4619      	mov	r1, r3
 8000b02:	2000      	movs	r0, #0
 8000b04:	f000 fbe0 	bl	80012c8 <setTimer>
			break;
 8000b08:	e024      	b.n	8000b54 <displayTrafficLight+0xc0>
			turnOnLight(YELLOW,HOR);
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fedd 	bl	80008cc <turnOnLight>
			if(timer_flag[HOR]){
 8000b12:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <displayTrafficLight+0x194>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d01e      	beq.n	8000b58 <displayTrafficLight+0xc4>
				currentStateHOR = RED;
 8000b1a:	4b42      	ldr	r3, [pc, #264]	; (8000c24 <displayTrafficLight+0x190>)
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
				setTimer(HOR,trafficTime[REDHORFLAG - 3]);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 fbce 	bl	80012c8 <setTimer>
			break;
 8000b2c:	e014      	b.n	8000b58 <displayTrafficLight+0xc4>
			turnOnLight(GREEN,HOR);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2003      	movs	r0, #3
 8000b32:	f7ff fecb 	bl	80008cc <turnOnLight>
			if(timer_flag[HOR]){
 8000b36:	4b3c      	ldr	r3, [pc, #240]	; (8000c28 <displayTrafficLight+0x194>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d00e      	beq.n	8000b5c <displayTrafficLight+0xc8>
				currentStateHOR = YELLOW;
 8000b3e:	4b39      	ldr	r3, [pc, #228]	; (8000c24 <displayTrafficLight+0x190>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	701a      	strb	r2, [r3, #0]
				setTimer(HOR, trafficTime[YELLOWHORFLAG - 3]);
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	3304      	adds	r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f000 fbbb 	bl	80012c8 <setTimer>
			break;
 8000b52:	e003      	b.n	8000b5c <displayTrafficLight+0xc8>
			break;
 8000b54:	bf00      	nop
 8000b56:	e05e      	b.n	8000c16 <displayTrafficLight+0x182>
			break;
 8000b58:	bf00      	nop
 8000b5a:	e05c      	b.n	8000c16 <displayTrafficLight+0x182>
			break;
 8000b5c:	bf00      	nop
		break;
 8000b5e:	e05a      	b.n	8000c16 <displayTrafficLight+0x182>
		switch(currentStateVER){
 8000b60:	4b32      	ldr	r3, [pc, #200]	; (8000c2c <displayTrafficLight+0x198>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	d858      	bhi.n	8000c1a <displayTrafficLight+0x186>
 8000b68:	a201      	add	r2, pc, #4	; (adr r2, 8000b70 <displayTrafficLight+0xdc>)
 8000b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b6e:	bf00      	nop
 8000b70:	08000b81 	.word	0x08000b81
 8000b74:	08000b9b 	.word	0x08000b9b
 8000b78:	08000bc1 	.word	0x08000bc1
 8000b7c:	08000be5 	.word	0x08000be5
			clearTrafficLight();
 8000b80:	f7ff fe46 	bl	8000810 <clearTrafficLight>
			setTimer(VER,trafficTime[GREENVERFLAG]);
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	3308      	adds	r3, #8
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 fb9b 	bl	80012c8 <setTimer>
			currentStateVER = GREEN;
 8000b92:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <displayTrafficLight+0x198>)
 8000b94:	2203      	movs	r2, #3
 8000b96:	701a      	strb	r2, [r3, #0]
			break;
 8000b98:	e03c      	b.n	8000c14 <displayTrafficLight+0x180>
			turnOnLight(RED,VER);
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f7ff fe95 	bl	80008cc <turnOnLight>
			if(timer_flag[VER]){
 8000ba2:	4b21      	ldr	r3, [pc, #132]	; (8000c28 <displayTrafficLight+0x194>)
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d02f      	beq.n	8000c0a <displayTrafficLight+0x176>
				currentStateVER = GREEN;
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <displayTrafficLight+0x198>)
 8000bac:	2203      	movs	r2, #3
 8000bae:	701a      	strb	r2, [r3, #0]
				setTimer(VER,trafficTime[GREENVERFLAG]);
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	3308      	adds	r3, #8
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 fb85 	bl	80012c8 <setTimer>
			break;
 8000bbe:	e024      	b.n	8000c0a <displayTrafficLight+0x176>
			turnOnLight(YELLOW,VER);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	2002      	movs	r0, #2
 8000bc4:	f7ff fe82 	bl	80008cc <turnOnLight>
			if(timer_flag[VER]){
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <displayTrafficLight+0x194>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d01e      	beq.n	8000c0e <displayTrafficLight+0x17a>
				currentStateVER = RED;
 8000bd0:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <displayTrafficLight+0x198>)
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	701a      	strb	r2, [r3, #0]
				setTimer(VER,trafficTime[REDVERFLAG]);
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4619      	mov	r1, r3
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 fb73 	bl	80012c8 <setTimer>
			break;
 8000be2:	e014      	b.n	8000c0e <displayTrafficLight+0x17a>
			turnOnLight(GREEN,VER);
 8000be4:	2101      	movs	r1, #1
 8000be6:	2003      	movs	r0, #3
 8000be8:	f7ff fe70 	bl	80008cc <turnOnLight>
			if(timer_flag[VER]){
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <displayTrafficLight+0x194>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00e      	beq.n	8000c12 <displayTrafficLight+0x17e>
				setTimer(VER,trafficTime[YELLOWVERFLAG]);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	f000 fb63 	bl	80012c8 <setTimer>
				currentStateVER = YELLOW;
 8000c02:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <displayTrafficLight+0x198>)
 8000c04:	2202      	movs	r2, #2
 8000c06:	701a      	strb	r2, [r3, #0]
			break;
 8000c08:	e003      	b.n	8000c12 <displayTrafficLight+0x17e>
			break;
 8000c0a:	bf00      	nop
 8000c0c:	e005      	b.n	8000c1a <displayTrafficLight+0x186>
			break;
 8000c0e:	bf00      	nop
 8000c10:	e003      	b.n	8000c1a <displayTrafficLight+0x186>
			break;
 8000c12:	bf00      	nop
		break;
 8000c14:	e001      	b.n	8000c1a <displayTrafficLight+0x186>
		break;
 8000c16:	bf00      	nop
 8000c18:	e000      	b.n	8000c1c <displayTrafficLight+0x188>
		break;
 8000c1a:	bf00      	nop
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	200000b6 	.word	0x200000b6
 8000c28:	200001c8 	.word	0x200001c8
 8000c2c:	200000b5 	.word	0x200000b5

08000c30 <displayTraffic>:

void displayTraffic(int * timeTraffic){
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	displayTrafficLight(VER, timeTraffic);
 8000c38:	6879      	ldr	r1, [r7, #4]
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff ff2a 	bl	8000a94 <displayTrafficLight>
	displayTrafficLight(HOR, timeTraffic);
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff ff26 	bl	8000a94 <displayTrafficLight>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a13      	ldr	r2, [pc, #76]	; (8000cac <HAL_UART_RxCpltCallback+0x5c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d11f      	bne.n	8000ca2 <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000c62:	2332      	movs	r3, #50	; 0x32
 8000c64:	2201      	movs	r2, #1
 8000c66:	4912      	ldr	r1, [pc, #72]	; (8000cb0 <HAL_UART_RxCpltCallback+0x60>)
 8000c68:	4812      	ldr	r0, [pc, #72]	; (8000cb4 <HAL_UART_RxCpltCallback+0x64>)
 8000c6a:	f002 fb2c 	bl	80032c6 <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 8000c6e:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_UART_RxCpltCallback+0x68>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	b2d1      	uxtb	r1, r2
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_UART_RxCpltCallback+0x68>)
 8000c78:	7011      	strb	r1, [r2, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <HAL_UART_RxCpltCallback+0x60>)
 8000c7e:	7819      	ldrb	r1, [r3, #0]
 8000c80:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_UART_RxCpltCallback+0x6c>)
 8000c82:	5499      	strb	r1, [r3, r2]
		if (index_buffer == 30)
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <HAL_UART_RxCpltCallback+0x68>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b1e      	cmp	r3, #30
 8000c8a:	d102      	bne.n	8000c92 <HAL_UART_RxCpltCallback+0x42>
			index_buffer = 0;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <HAL_UART_RxCpltCallback+0x68>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_UART_RxCpltCallback+0x70>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4905      	ldr	r1, [pc, #20]	; (8000cb0 <HAL_UART_RxCpltCallback+0x60>)
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <HAL_UART_RxCpltCallback+0x64>)
 8000c9e:	f002 fba4 	bl	80033ea <HAL_UART_Receive_IT>
	}
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40004400 	.word	0x40004400
 8000cb0:	200000b4 	.word	0x200000b4
 8000cb4:	20000164 	.word	0x20000164
 8000cb8:	200001c6 	.word	0x200001c6
 8000cbc:	200001a8 	.word	0x200001a8
 8000cc0:	200001c7 	.word	0x200001c7

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b084      	sub	sp, #16
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 fb6b 	bl	80013a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f827 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 f931 	bl	8000f38 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cd6:	f000 f85f 	bl	8000d98 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000cda:	f000 f903 	bl	8000ee4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000cde:	f000 f8a7 	bl	8000e30 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <main+0x48>)
 8000ce4:	f001 fb9c 	bl	8002420 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4909      	ldr	r1, [pc, #36]	; (8000d10 <main+0x4c>)
 8000cec:	4809      	ldr	r0, [pc, #36]	; (8000d14 <main+0x50>)
 8000cee:	f002 fb7c 	bl	80033ea <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <main+0x54>)
 8000cf6:	f001 fc35 	bl	8002564 <HAL_TIM_PWM_Start>
  int time[3] = {5000,2000,3000};
 8000cfa:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <main+0x58>)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    /* USER CODE END WHILE */
	  //	  traffic
	  //	  displayTraffic(time);
	  //	  traffic
	  //	  button + traffic
	  fsm_button_displayTraffic();
 8000d04:	f7ff fbba 	bl	800047c <fsm_button_displayTraffic>
 8000d08:	e7fc      	b.n	8000d04 <main+0x40>
 8000d0a:	bf00      	nop
 8000d0c:	200000d4 	.word	0x200000d4
 8000d10:	200000b4 	.word	0x200000b4
 8000d14:	20000164 	.word	0x20000164
 8000d18:	2000011c 	.word	0x2000011c
 8000d1c:	08003d0c 	.word	0x08003d0c

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b090      	sub	sp, #64	; 0x40
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	2228      	movs	r2, #40	; 0x28
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f002 ffd8 	bl	8003ce4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d46:	2301      	movs	r3, #1
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d4a:	2310      	movs	r3, #16
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 fef8 	bl	8001b4c <HAL_RCC_OscConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d62:	f000 f972 	bl	800104a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d66:	230f      	movs	r3, #15
 8000d68:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f001 f966 	bl	8002050 <HAL_RCC_ClockConfig>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d8a:	f000 f95e 	bl	800104a <Error_Handler>
  }
}
 8000d8e:	bf00      	nop
 8000d90:	3740      	adds	r7, #64	; 0x40
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dac:	463b      	mov	r3, r7
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dbe:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000dc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc4:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dca:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dcc:	2209      	movs	r2, #9
 8000dce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b16      	ldr	r3, [pc, #88]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ddc:	4813      	ldr	r0, [pc, #76]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dde:	f001 facf 	bl	8002380 <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000de8:	f000 f92f 	bl	800104a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000dfa:	f001 fe1b 	bl	8002a34 <HAL_TIM_ConfigClockSource>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e04:	f000 f921 	bl	800104a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e10:	463b      	mov	r3, r7
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_TIM2_Init+0x94>)
 8000e16:	f002 f999 	bl	800314c <HAL_TIMEx_MasterConfigSynchronization>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e20:	f000 f913 	bl	800104a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000d4 	.word	0x200000d4

08000e30 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e52:	4b22      	ldr	r3, [pc, #136]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <MX_TIM3_Init+0xb0>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000e58:	4b20      	ldr	r3, [pc, #128]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e5a:	223f      	movs	r2, #63	; 0x3f
 8000e5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b1b      	ldr	r3, [pc, #108]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b1a      	ldr	r3, [pc, #104]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e78:	4818      	ldr	r0, [pc, #96]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e7a:	f001 fb23 	bl	80024c4 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e84:	f000 f8e1 	bl	800104a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4619      	mov	r1, r3
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_TIM3_Init+0xac>)
 8000e98:	f002 f958 	bl	800314c <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000ea2:	f000 f8d2 	bl	800104a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	; 0x60
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM3_Init+0xac>)
 8000ebe:	f001 fcfb 	bl	80028b8 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000ec8:	f000 f8bf 	bl	800104a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM3_Init+0xac>)
 8000ece:	f000 f935 	bl	800113c <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3728      	adds	r7, #40	; 0x28
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000011c 	.word	0x2000011c
 8000ee0:	40000400 	.word	0x40000400

08000ee4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_USART2_UART_Init+0x50>)
 8000eec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ef4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000efc:	4b0c      	ldr	r3, [pc, #48]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f08:	4b09      	ldr	r3, [pc, #36]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	220c      	movs	r2, #12
 8000f0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0e:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f14:	4b06      	ldr	r3, [pc, #24]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1a:	4805      	ldr	r0, [pc, #20]	; (8000f30 <MX_USART2_UART_Init+0x4c>)
 8000f1c:	f002 f986 	bl	800322c <HAL_UART_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f26:	f000 f890 	bl	800104a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2a:	bf00      	nop
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000164 	.word	0x20000164
 8000f34:	40004400 	.word	0x40004400

08000f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4a2d      	ldr	r2, [pc, #180]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	6193      	str	r3, [r2, #24]
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0304 	and.w	r3, r3, #4
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f66:	699b      	ldr	r3, [r3, #24]
 8000f68:	4a27      	ldr	r2, [pc, #156]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f6a:	f043 0308 	orr.w	r3, r3, #8
 8000f6e:	6193      	str	r3, [r2, #24]
 8000f70:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_GPIO_Init+0xd0>)
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	f003 0308 	and.w	r3, r3, #8
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000f82:	4822      	ldr	r0, [pc, #136]	; (800100c <MX_GPIO_Init+0xd4>)
 8000f84:	f000 fdc9 	bl	8001b1a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000f8e:	4820      	ldr	r0, [pc, #128]	; (8001010 <MX_GPIO_Init+0xd8>)
 8000f90:	f000 fdc3 	bl	8001b1a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedesButton_Pin button_mode_Pin button_inc_Pin */
  GPIO_InitStruct.Pin = PedesButton_Pin|button_mode_Pin|button_inc_Pin;
 8000f94:	2313      	movs	r3, #19
 8000f96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	481a      	ldr	r0, [pc, #104]	; (8001010 <MX_GPIO_Init+0xd8>)
 8000fa8:	f000 fc1c 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_dec_Pin */
  GPIO_InitStruct.Pin = button_dec_Pin;
 8000fac:	2301      	movs	r3, #1
 8000fae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button_dec_GPIO_Port, &GPIO_InitStruct);
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4813      	ldr	r0, [pc, #76]	; (800100c <MX_GPIO_Init+0xd4>)
 8000fc0:	f000 fc10 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000fc4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000fc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0308 	add.w	r3, r7, #8
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480b      	ldr	r0, [pc, #44]	; (800100c <MX_GPIO_Init+0xd4>)
 8000fde:	f000 fc01 	bl	80017e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000fe2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_GPIO_Init+0xd8>)
 8000ffc:	f000 fbf2 	bl	80017e4 <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3718      	adds	r7, #24
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000
 800100c:	40010c00 	.word	0x40010c00
 8001010:	40010800 	.word	0x40010800

08001014 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 500;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001024:	d10d      	bne.n	8001042 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		for(int i = 0 ; i < NUMS_OF_TIMER; i++){
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	e005      	b.n	8001038 <HAL_TIM_PeriodElapsedCallback+0x24>
			timerRun(i);
 800102c:	68f8      	ldr	r0, [r7, #12]
 800102e:	f000 f96b 	bl	8001308 <timerRun>
		for(int i = 0 ; i < NUMS_OF_TIMER; i++){
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b02      	cmp	r3, #2
 800103c:	ddf6      	ble.n	800102c <HAL_TIM_PeriodElapsedCallback+0x18>
		}
		buttonReading();
 800103e:	f7ff f885 	bl	800014c <buttonReading>
	}
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}

0800104a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104e:	b672      	cpsid	i
}
 8001050:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001052:	e7fe      	b.n	8001052 <Error_Handler+0x8>

08001054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <HAL_MspInit+0x5c>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <HAL_MspInit+0x5c>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_MspInit+0x5c>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <HAL_MspInit+0x5c>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	4a0e      	ldr	r2, [pc, #56]	; (80010b0 <HAL_MspInit+0x5c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800107c:	61d3      	str	r3, [r2, #28]
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <HAL_MspInit+0x5c>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800108a:	4b0a      	ldr	r3, [pc, #40]	; (80010b4 <HAL_MspInit+0x60>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_MspInit+0x60>)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a6:	bf00      	nop
 80010a8:	3714      	adds	r7, #20
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010000 	.word	0x40010000

080010b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010c8:	d113      	bne.n	80010f2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ca:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	61d3      	str	r3, [r2, #28]
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_TIM_Base_MspInit+0x44>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2100      	movs	r1, #0
 80010e6:	201c      	movs	r0, #28
 80010e8:	f000 fa95 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ec:	201c      	movs	r0, #28
 80010ee:	f000 faae 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a09      	ldr	r2, [pc, #36]	; (8001134 <HAL_TIM_PWM_MspInit+0x34>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10b      	bne.n	800112a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <HAL_TIM_PWM_MspInit+0x38>)
 8001114:	69db      	ldr	r3, [r3, #28]
 8001116:	4a08      	ldr	r2, [pc, #32]	; (8001138 <HAL_TIM_PWM_MspInit+0x38>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	61d3      	str	r3, [r2, #28]
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <HAL_TIM_PWM_MspInit+0x38>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	bc80      	pop	{r7}
 8001132:	4770      	bx	lr
 8001134:	40000400 	.word	0x40000400
 8001138:	40021000 	.word	0x40021000

0800113c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b088      	sub	sp, #32
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 0310 	add.w	r3, r7, #16
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a0f      	ldr	r2, [pc, #60]	; (8001194 <HAL_TIM_MspPostInit+0x58>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d117      	bne.n	800118c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <HAL_TIM_MspPostInit+0x5c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <HAL_TIM_MspPostInit+0x5c>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <HAL_TIM_MspPostInit+0x5c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = D12_Pin;
 8001174:	2340      	movs	r3, #64	; 0x40
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2302      	movs	r3, #2
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4805      	ldr	r0, [pc, #20]	; (800119c <HAL_TIM_MspPostInit+0x60>)
 8001188:	f000 fb2c 	bl	80017e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800118c:	bf00      	nop
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40000400 	.word	0x40000400
 8001198:	40021000 	.word	0x40021000
 800119c:	40010800 	.word	0x40010800

080011a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 0310 	add.w	r3, r7, #16
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_UART_MspInit+0x98>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d137      	bne.n	8001230 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <HAL_UART_MspInit+0x9c>)
 80011c2:	69db      	ldr	r3, [r3, #28]
 80011c4:	4a1d      	ldr	r2, [pc, #116]	; (800123c <HAL_UART_MspInit+0x9c>)
 80011c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011ca:	61d3      	str	r3, [r2, #28]
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <HAL_UART_MspInit+0x9c>)
 80011ce:	69db      	ldr	r3, [r3, #28]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d8:	4b18      	ldr	r3, [pc, #96]	; (800123c <HAL_UART_MspInit+0x9c>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	4a17      	ldr	r2, [pc, #92]	; (800123c <HAL_UART_MspInit+0x9c>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	6193      	str	r3, [r2, #24]
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <HAL_UART_MspInit+0x9c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	f003 0304 	and.w	r3, r3, #4
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80011f0:	2304      	movs	r3, #4
 80011f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f8:	2303      	movs	r3, #3
 80011fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	480f      	ldr	r0, [pc, #60]	; (8001240 <HAL_UART_MspInit+0xa0>)
 8001204:	f000 faee 	bl	80017e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001208:	2308      	movs	r3, #8
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <HAL_UART_MspInit+0xa0>)
 800121c:	f000 fae2 	bl	80017e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2026      	movs	r0, #38	; 0x26
 8001226:	f000 f9f6 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800122a:	2026      	movs	r0, #38	; 0x26
 800122c:	f000 fa0f 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40004400 	.word	0x40004400
 800123c:	40021000 	.word	0x40021000
 8001240:	40010800 	.word	0x40010800

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126e:	b480      	push	{r7}
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	46bd      	mov	sp, r7
 8001276:	bc80      	pop	{r7}
 8001278:	4770      	bx	lr

0800127a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800127a:	b480      	push	{r7}
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr

08001286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128a:	f000 f8d1 	bl	8001430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <TIM2_IRQHandler+0x10>)
 800129a:	f001 fa05 	bl	80026a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	200000d4 	.word	0x200000d4

080012a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <USART2_IRQHandler+0x10>)
 80012ae:	f002 f8cd 	bl	800344c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000164 	.word	0x20000164

080012bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012c0:	bf00      	nop
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <setTimer>:
#include "timer.h"

int timer_flag[NUMS_OF_TIMER];
int timer_counter[NUMS_OF_TIMER];

void setTimer(int index, int duration){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / CYCLE;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	4a09      	ldr	r2, [pc, #36]	; (80012fc <setTimer+0x34>)
 80012d6:	fb82 1203 	smull	r1, r2, r2, r3
 80012da:	1092      	asrs	r2, r2, #2
 80012dc:	17db      	asrs	r3, r3, #31
 80012de:	1ad2      	subs	r2, r2, r3
 80012e0:	4907      	ldr	r1, [pc, #28]	; (8001300 <setTimer+0x38>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80012e8:	4a06      	ldr	r2, [pc, #24]	; (8001304 <setTimer+0x3c>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2100      	movs	r1, #0
 80012ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr
 80012fc:	66666667 	.word	0x66666667
 8001300:	200001d4 	.word	0x200001d4
 8001304:	200001c8 	.word	0x200001c8

08001308 <timerRun>:

void timerRun(int index){
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] >= 0) {
 8001310:	4a0f      	ldr	r2, [pc, #60]	; (8001350 <timerRun+0x48>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db13      	blt.n	8001344 <timerRun+0x3c>
		timer_counter[index]--;
 800131c:	4a0c      	ldr	r2, [pc, #48]	; (8001350 <timerRun+0x48>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	1e5a      	subs	r2, r3, #1
 8001326:	490a      	ldr	r1, [pc, #40]	; (8001350 <timerRun+0x48>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0) timer_flag[index] = 1;
 800132e:	4a08      	ldr	r2, [pc, #32]	; (8001350 <timerRun+0x48>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	2b00      	cmp	r3, #0
 8001338:	dc04      	bgt.n	8001344 <timerRun+0x3c>
 800133a:	4a06      	ldr	r2, [pc, #24]	; (8001354 <timerRun+0x4c>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2101      	movs	r1, #1
 8001340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	200001d4 	.word	0x200001d4
 8001354:	200001c8 	.word	0x200001c8

08001358 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	; (800138c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	; (8001390 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	; (8001394 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	; (800139c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800137e:	f7ff ff9d 	bl	80012bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001382:	f002 fc8b 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001386:	f7ff fc9d 	bl	8000cc4 <main>
  bx lr
 800138a:	4770      	bx	lr
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001394:	08003d48 	.word	0x08003d48
  ldr r2, =_sbss
 8001398:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800139c:	200001e4 	.word	0x200001e4

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a8:	4b08      	ldr	r3, [pc, #32]	; (80013cc <HAL_Init+0x28>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a07      	ldr	r2, [pc, #28]	; (80013cc <HAL_Init+0x28>)
 80013ae:	f043 0310 	orr.w	r3, r3, #16
 80013b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b4:	2003      	movs	r0, #3
 80013b6:	f000 f923 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ba:	200f      	movs	r0, #15
 80013bc:	f000 f808 	bl	80013d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c0:	f7ff fe48 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013c4:	2300      	movs	r3, #0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40022000 	.word	0x40022000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d8:	4b12      	ldr	r3, [pc, #72]	; (8001424 <HAL_InitTick+0x54>)
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_InitTick+0x58>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f93b 	bl	800166a <HAL_SYSTICK_Config>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00e      	b.n	800141c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b0f      	cmp	r3, #15
 8001402:	d80a      	bhi.n	800141a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001404:	2200      	movs	r2, #0
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	f04f 30ff 	mov.w	r0, #4294967295
 800140c:	f000 f903 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001410:	4a06      	ldr	r2, [pc, #24]	; (800142c <HAL_InitTick+0x5c>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	e000      	b.n	800141c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
}
 800141c:	4618      	mov	r0, r3
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000005c 	.word	0x2000005c
 8001428:	20000064 	.word	0x20000064
 800142c:	20000060 	.word	0x20000060

08001430 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001434:	4b05      	ldr	r3, [pc, #20]	; (800144c <HAL_IncTick+0x1c>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	461a      	mov	r2, r3
 800143a:	4b05      	ldr	r3, [pc, #20]	; (8001450 <HAL_IncTick+0x20>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4413      	add	r3, r2
 8001440:	4a03      	ldr	r2, [pc, #12]	; (8001450 <HAL_IncTick+0x20>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr
 800144c:	20000064 	.word	0x20000064
 8001450:	200001e0 	.word	0x200001e0

08001454 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return uwTick;
 8001458:	4b02      	ldr	r3, [pc, #8]	; (8001464 <HAL_GetTick+0x10>)
 800145a:	681b      	ldr	r3, [r3, #0]
}
 800145c:	4618      	mov	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	200001e0 	.word	0x200001e0

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bc80      	pop	{r7}
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4906      	ldr	r1, [pc, #24]	; (8001500 <__NVIC_EnableIRQ+0x34>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	; (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	; 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	; 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff90 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff2d 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff42 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff90 	bl	8001558 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5f 	bl	8001504 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff35 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa2 	bl	80015bc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001682:	b480      	push	{r7}
 8001684:	b085      	sub	sp, #20
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001694:	2b02      	cmp	r3, #2
 8001696:	d008      	beq.n	80016aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2204      	movs	r2, #4
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e020      	b.n	80016ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 020e 	bic.w	r2, r2, #14
 80016b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0201 	bic.w	r2, r2, #1
 80016c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d2:	2101      	movs	r1, #1
 80016d4:	fa01 f202 	lsl.w	r2, r1, r2
 80016d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800170a:	2b02      	cmp	r3, #2
 800170c:	d005      	beq.n	800171a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2204      	movs	r2, #4
 8001712:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	73fb      	strb	r3, [r7, #15]
 8001718:	e051      	b.n	80017be <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 020e 	bic.w	r2, r2, #14
 8001728:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0201 	bic.w	r2, r2, #1
 8001738:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a22      	ldr	r2, [pc, #136]	; (80017c8 <HAL_DMA_Abort_IT+0xd0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d029      	beq.n	8001798 <HAL_DMA_Abort_IT+0xa0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a20      	ldr	r2, [pc, #128]	; (80017cc <HAL_DMA_Abort_IT+0xd4>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d022      	beq.n	8001794 <HAL_DMA_Abort_IT+0x9c>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_DMA_Abort_IT+0xd8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d01a      	beq.n	800178e <HAL_DMA_Abort_IT+0x96>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a1d      	ldr	r2, [pc, #116]	; (80017d4 <HAL_DMA_Abort_IT+0xdc>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d012      	beq.n	8001788 <HAL_DMA_Abort_IT+0x90>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1c      	ldr	r2, [pc, #112]	; (80017d8 <HAL_DMA_Abort_IT+0xe0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00a      	beq.n	8001782 <HAL_DMA_Abort_IT+0x8a>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1a      	ldr	r2, [pc, #104]	; (80017dc <HAL_DMA_Abort_IT+0xe4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d102      	bne.n	800177c <HAL_DMA_Abort_IT+0x84>
 8001776:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800177a:	e00e      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 800177c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001780:	e00b      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001782:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001786:	e008      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	e005      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 800178e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001792:	e002      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001794:	2310      	movs	r3, #16
 8001796:	e000      	b.n	800179a <HAL_DMA_Abort_IT+0xa2>
 8001798:	2301      	movs	r3, #1
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_DMA_Abort_IT+0xe8>)
 800179c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2201      	movs	r2, #1
 80017a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
    } 
  }
  return status;
 80017be:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40020008 	.word	0x40020008
 80017cc:	4002001c 	.word	0x4002001c
 80017d0:	40020030 	.word	0x40020030
 80017d4:	40020044 	.word	0x40020044
 80017d8:	40020058 	.word	0x40020058
 80017dc:	4002006c 	.word	0x4002006c
 80017e0:	40020000 	.word	0x40020000

080017e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b08b      	sub	sp, #44	; 0x2c
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017ee:	2300      	movs	r3, #0
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017f6:	e169      	b.n	8001acc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f8:	2201      	movs	r2, #1
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	69fa      	ldr	r2, [r7, #28]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 8158 	bne.w	8001ac6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4a9a      	ldr	r2, [pc, #616]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d05e      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001820:	4a98      	ldr	r2, [pc, #608]	; (8001a84 <HAL_GPIO_Init+0x2a0>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d875      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001826:	4a98      	ldr	r2, [pc, #608]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d058      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 800182c:	4a96      	ldr	r2, [pc, #600]	; (8001a88 <HAL_GPIO_Init+0x2a4>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d86f      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001832:	4a96      	ldr	r2, [pc, #600]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d052      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001838:	4a94      	ldr	r2, [pc, #592]	; (8001a8c <HAL_GPIO_Init+0x2a8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d869      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800183e:	4a94      	ldr	r2, [pc, #592]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d04c      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001844:	4a92      	ldr	r2, [pc, #584]	; (8001a90 <HAL_GPIO_Init+0x2ac>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d863      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800184a:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d046      	beq.n	80018de <HAL_GPIO_Init+0xfa>
 8001850:	4a90      	ldr	r2, [pc, #576]	; (8001a94 <HAL_GPIO_Init+0x2b0>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d85d      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 8001856:	2b12      	cmp	r3, #18
 8001858:	d82a      	bhi.n	80018b0 <HAL_GPIO_Init+0xcc>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d859      	bhi.n	8001912 <HAL_GPIO_Init+0x12e>
 800185e:	a201      	add	r2, pc, #4	; (adr r2, 8001864 <HAL_GPIO_Init+0x80>)
 8001860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001864:	080018df 	.word	0x080018df
 8001868:	080018b9 	.word	0x080018b9
 800186c:	080018cb 	.word	0x080018cb
 8001870:	0800190d 	.word	0x0800190d
 8001874:	08001913 	.word	0x08001913
 8001878:	08001913 	.word	0x08001913
 800187c:	08001913 	.word	0x08001913
 8001880:	08001913 	.word	0x08001913
 8001884:	08001913 	.word	0x08001913
 8001888:	08001913 	.word	0x08001913
 800188c:	08001913 	.word	0x08001913
 8001890:	08001913 	.word	0x08001913
 8001894:	08001913 	.word	0x08001913
 8001898:	08001913 	.word	0x08001913
 800189c:	08001913 	.word	0x08001913
 80018a0:	08001913 	.word	0x08001913
 80018a4:	08001913 	.word	0x08001913
 80018a8:	080018c1 	.word	0x080018c1
 80018ac:	080018d5 	.word	0x080018d5
 80018b0:	4a79      	ldr	r2, [pc, #484]	; (8001a98 <HAL_GPIO_Init+0x2b4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018b6:	e02c      	b.n	8001912 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	623b      	str	r3, [r7, #32]
          break;
 80018be:	e029      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	3304      	adds	r3, #4
 80018c6:	623b      	str	r3, [r7, #32]
          break;
 80018c8:	e024      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	3308      	adds	r3, #8
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e01f      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	330c      	adds	r3, #12
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e01a      	b.n	8001914 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018e6:	2304      	movs	r3, #4
 80018e8:	623b      	str	r3, [r7, #32]
          break;
 80018ea:	e013      	b.n	8001914 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d105      	bne.n	8001900 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f4:	2308      	movs	r3, #8
 80018f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69fa      	ldr	r2, [r7, #28]
 80018fc:	611a      	str	r2, [r3, #16]
          break;
 80018fe:	e009      	b.n	8001914 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001900:	2308      	movs	r3, #8
 8001902:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	615a      	str	r2, [r3, #20]
          break;
 800190a:	e003      	b.n	8001914 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800190c:	2300      	movs	r3, #0
 800190e:	623b      	str	r3, [r7, #32]
          break;
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x130>
          break;
 8001912:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	2bff      	cmp	r3, #255	; 0xff
 8001918:	d801      	bhi.n	800191e <HAL_GPIO_Init+0x13a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_Init+0x13e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d802      	bhi.n	8001930 <HAL_GPIO_Init+0x14c>
 800192a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x152>
 8001930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001932:	3b08      	subs	r3, #8
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	210f      	movs	r1, #15
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	fa01 f303 	lsl.w	r3, r1, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	401a      	ands	r2, r3
 8001948:	6a39      	ldr	r1, [r7, #32]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	fa01 f303 	lsl.w	r3, r1, r3
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 80b1 	beq.w	8001ac6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6193      	str	r3, [r2, #24]
 8001970:	4b4a      	ldr	r3, [pc, #296]	; (8001a9c <HAL_GPIO_Init+0x2b8>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800197c:	4a48      	ldr	r2, [pc, #288]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001988:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	fa02 f303 	lsl.w	r3, r2, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a40      	ldr	r2, [pc, #256]	; (8001aa4 <HAL_GPIO_Init+0x2c0>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d013      	beq.n	80019d0 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3f      	ldr	r2, [pc, #252]	; (8001aa8 <HAL_GPIO_Init+0x2c4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00d      	beq.n	80019cc <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3e      	ldr	r2, [pc, #248]	; (8001aac <HAL_GPIO_Init+0x2c8>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d007      	beq.n	80019c8 <HAL_GPIO_Init+0x1e4>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <HAL_GPIO_Init+0x2cc>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d101      	bne.n	80019c4 <HAL_GPIO_Init+0x1e0>
 80019c0:	2303      	movs	r3, #3
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c4:	2304      	movs	r3, #4
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1ee>
 80019d0:	2300      	movs	r3, #0
 80019d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e2:	492f      	ldr	r1, [pc, #188]	; (8001aa0 <HAL_GPIO_Init+0x2bc>)
 80019e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019fc:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	492c      	ldr	r1, [pc, #176]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e006      	b.n	8001a18 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a0a:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	4928      	ldr	r1, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d006      	beq.n	8001a32 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a24:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	4922      	ldr	r1, [pc, #136]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	e006      	b.n	8001a40 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a32:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	491e      	ldr	r1, [pc, #120]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d006      	beq.n	8001a5a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a4c:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	4918      	ldr	r1, [pc, #96]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a5a:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	43db      	mvns	r3, r3
 8001a62:	4914      	ldr	r1, [pc, #80]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a64:	4013      	ands	r3, r2
 8001a66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d021      	beq.n	8001ab8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a74:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	490e      	ldr	r1, [pc, #56]	; (8001ab4 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	60cb      	str	r3, [r1, #12]
 8001a80:	e021      	b.n	8001ac6 <HAL_GPIO_Init+0x2e2>
 8001a82:	bf00      	nop
 8001a84:	10320000 	.word	0x10320000
 8001a88:	10310000 	.word	0x10310000
 8001a8c:	10220000 	.word	0x10220000
 8001a90:	10210000 	.word	0x10210000
 8001a94:	10120000 	.word	0x10120000
 8001a98:	10110000 	.word	0x10110000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40010000 	.word	0x40010000
 8001aa4:	40010800 	.word	0x40010800
 8001aa8:	40010c00 	.word	0x40010c00
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40011400 	.word	0x40011400
 8001ab4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	4909      	ldr	r1, [pc, #36]	; (8001ae8 <HAL_GPIO_Init+0x304>)
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	3301      	adds	r3, #1
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f47f ae8e 	bne.w	80017f8 <HAL_GPIO_Init+0x14>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	372c      	adds	r7, #44	; 0x2c
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40010400 	.word	0x40010400

08001aec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	887b      	ldrh	r3, [r7, #2]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b04:	2301      	movs	r3, #1
 8001b06:	73fb      	strb	r3, [r7, #15]
 8001b08:	e001      	b.n	8001b0e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr

08001b1a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	460b      	mov	r3, r1
 8001b24:	807b      	strh	r3, [r7, #2]
 8001b26:	4613      	mov	r3, r2
 8001b28:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b2a:	787b      	ldrb	r3, [r7, #1]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b30:	887a      	ldrh	r2, [r7, #2]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b36:	e003      	b.n	8001b40 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b38:	887b      	ldrh	r3, [r7, #2]
 8001b3a:	041a      	lsls	r2, r3, #16
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	611a      	str	r2, [r3, #16]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc80      	pop	{r7}
 8001b48:	4770      	bx	lr
	...

08001b4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e272      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 8087 	beq.w	8001c7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	4b92      	ldr	r3, [pc, #584]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 030c 	and.w	r3, r3, #12
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00c      	beq.n	8001b92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b78:	4b8f      	ldr	r3, [pc, #572]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 030c 	and.w	r3, r3, #12
 8001b80:	2b08      	cmp	r3, #8
 8001b82:	d112      	bne.n	8001baa <HAL_RCC_OscConfig+0x5e>
 8001b84:	4b8c      	ldr	r3, [pc, #560]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b90:	d10b      	bne.n	8001baa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b92:	4b89      	ldr	r3, [pc, #548]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d06c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x12c>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d168      	bne.n	8001c78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e24c      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x76>
 8001bb4:	4b80      	ldr	r3, [pc, #512]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a7f      	ldr	r2, [pc, #508]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e02e      	b.n	8001c20 <HAL_RCC_OscConfig+0xd4>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x98>
 8001bca:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a7a      	ldr	r2, [pc, #488]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	4b78      	ldr	r3, [pc, #480]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	e01d      	b.n	8001c20 <HAL_RCC_OscConfig+0xd4>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0xbc>
 8001bee:	4b72      	ldr	r3, [pc, #456]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a71      	ldr	r2, [pc, #452]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6f      	ldr	r3, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6e      	ldr	r2, [pc, #440]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0xd4>
 8001c08:	4b6b      	ldr	r3, [pc, #428]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a6a      	ldr	r2, [pc, #424]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b68      	ldr	r3, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a67      	ldr	r2, [pc, #412]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d013      	beq.n	8001c50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c28:	f7ff fc14 	bl	8001454 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c30:	f7ff fc10 	bl	8001454 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b64      	cmp	r3, #100	; 0x64
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e200      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c42:	4b5d      	ldr	r3, [pc, #372]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0f0      	beq.n	8001c30 <HAL_RCC_OscConfig+0xe4>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff fc00 	bl	8001454 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7ff fbfc 	bl	8001454 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e1ec      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6a:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x10c>
 8001c76:	e000      	b.n	8001c7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d063      	beq.n	8001d4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c86:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d00b      	beq.n	8001caa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c92:	4b49      	ldr	r3, [pc, #292]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	2b08      	cmp	r3, #8
 8001c9c:	d11c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x18c>
 8001c9e:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d116      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	4b43      	ldr	r3, [pc, #268]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d005      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x176>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e1c0      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc2:	4b3d      	ldr	r3, [pc, #244]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4939      	ldr	r1, [pc, #228]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cd6:	e03a      	b.n	8001d4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d020      	beq.n	8001d22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce0:	4b36      	ldr	r3, [pc, #216]	; (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fbb5 	bl	8001454 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cee:	f7ff fbb1 	bl	8001454 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1a1      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0f0      	beq.n	8001cee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	4927      	ldr	r1, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]
 8001d20:	e015      	b.n	8001d4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d22:	4b26      	ldr	r3, [pc, #152]	; (8001dbc <HAL_RCC_OscConfig+0x270>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fb94 	bl	8001454 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d30:	f7ff fb90 	bl	8001454 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e180      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d42:	4b1d      	ldr	r3, [pc, #116]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d03a      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d019      	beq.n	8001d96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d62:	4b17      	ldr	r3, [pc, #92]	; (8001dc0 <HAL_RCC_OscConfig+0x274>)
 8001d64:	2201      	movs	r2, #1
 8001d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d68:	f7ff fb74 	bl	8001454 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d70:	f7ff fb70 	bl	8001454 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e160      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f000 fad8 	bl	8002344 <RCC_Delay>
 8001d94:	e01c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_RCC_OscConfig+0x274>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9c:	f7ff fb5a 	bl	8001454 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da2:	e00f      	b.n	8001dc4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da4:	f7ff fb56 	bl	8001454 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d908      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e146      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	42420000 	.word	0x42420000
 8001dc0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc4:	4b92      	ldr	r3, [pc, #584]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1e9      	bne.n	8001da4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 80a6 	beq.w	8001f2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de2:	4b8b      	ldr	r3, [pc, #556]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10d      	bne.n	8001e0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	4a87      	ldr	r2, [pc, #540]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	61d3      	str	r3, [r2, #28]
 8001dfa:	4b85      	ldr	r3, [pc, #532]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	60bb      	str	r3, [r7, #8]
 8001e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e06:	2301      	movs	r3, #1
 8001e08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b82      	ldr	r3, [pc, #520]	; (8002014 <HAL_RCC_OscConfig+0x4c8>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e16:	4b7f      	ldr	r3, [pc, #508]	; (8002014 <HAL_RCC_OscConfig+0x4c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7e      	ldr	r2, [pc, #504]	; (8002014 <HAL_RCC_OscConfig+0x4c8>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e22:	f7ff fb17 	bl	8001454 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7ff fb13 	bl	8001454 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b64      	cmp	r3, #100	; 0x64
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e103      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3c:	4b75      	ldr	r3, [pc, #468]	; (8002014 <HAL_RCC_OscConfig+0x4c8>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x312>
 8001e50:	4b6f      	ldr	r3, [pc, #444]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a6e      	ldr	r2, [pc, #440]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	e02d      	b.n	8001eba <HAL_RCC_OscConfig+0x36e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10c      	bne.n	8001e80 <HAL_RCC_OscConfig+0x334>
 8001e66:	4b6a      	ldr	r3, [pc, #424]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4a69      	ldr	r2, [pc, #420]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	f023 0301 	bic.w	r3, r3, #1
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4a66      	ldr	r2, [pc, #408]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	f023 0304 	bic.w	r3, r3, #4
 8001e7c:	6213      	str	r3, [r2, #32]
 8001e7e:	e01c      	b.n	8001eba <HAL_RCC_OscConfig+0x36e>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	2b05      	cmp	r3, #5
 8001e86:	d10c      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x356>
 8001e88:	4b61      	ldr	r3, [pc, #388]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e8a:	6a1b      	ldr	r3, [r3, #32]
 8001e8c:	4a60      	ldr	r2, [pc, #384]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	f043 0304 	orr.w	r3, r3, #4
 8001e92:	6213      	str	r3, [r2, #32]
 8001e94:	4b5e      	ldr	r3, [pc, #376]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	6a1b      	ldr	r3, [r3, #32]
 8001e98:	4a5d      	ldr	r2, [pc, #372]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6213      	str	r3, [r2, #32]
 8001ea0:	e00b      	b.n	8001eba <HAL_RCC_OscConfig+0x36e>
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	4a5a      	ldr	r2, [pc, #360]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	f023 0301 	bic.w	r3, r3, #1
 8001eac:	6213      	str	r3, [r2, #32]
 8001eae:	4b58      	ldr	r3, [pc, #352]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	4a57      	ldr	r2, [pc, #348]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	f023 0304 	bic.w	r3, r3, #4
 8001eb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d015      	beq.n	8001eee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fac7 	bl	8001454 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7ff fac3 	bl	8001454 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e0b1      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee0:	4b4b      	ldr	r3, [pc, #300]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0ee      	beq.n	8001eca <HAL_RCC_OscConfig+0x37e>
 8001eec:	e014      	b.n	8001f18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fab1 	bl	8001454 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef4:	e00a      	b.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ef6:	f7ff faad 	bl	8001454 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e09b      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0c:	4b40      	ldr	r3, [pc, #256]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ee      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f18:	7dfb      	ldrb	r3, [r7, #23]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d105      	bne.n	8001f2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f1e:	4b3c      	ldr	r3, [pc, #240]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a3b      	ldr	r2, [pc, #236]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8087 	beq.w	8002042 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f34:	4b36      	ldr	r3, [pc, #216]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b08      	cmp	r3, #8
 8001f3e:	d061      	beq.n	8002004 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	69db      	ldr	r3, [r3, #28]
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d146      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b33      	ldr	r3, [pc, #204]	; (8002018 <HAL_RCC_OscConfig+0x4cc>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fa81 	bl	8001454 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff fa7d 	bl	8001454 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e06d      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f0      	bne.n	8001f56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f7c:	d108      	bne.n	8001f90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	4921      	ldr	r1, [pc, #132]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a19      	ldr	r1, [r3, #32]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa0:	430b      	orrs	r3, r1
 8001fa2:	491b      	ldr	r1, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fa8:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_OscConfig+0x4cc>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fae:	f7ff fa51 	bl	8001454 <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff fa4d 	bl	8001454 <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e03d      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0f0      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x46a>
 8001fd4:	e035      	b.n	8002042 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd6:	4b10      	ldr	r3, [pc, #64]	; (8002018 <HAL_RCC_OscConfig+0x4cc>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fdc:	f7ff fa3a 	bl	8001454 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff fa36 	bl	8001454 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e026      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x498>
 8002002:	e01e      	b.n	8002042 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d107      	bne.n	800201c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e019      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
 8002018:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <HAL_RCC_OscConfig+0x500>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	429a      	cmp	r2, r3
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d001      	beq.n	8002042 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e000      	b.n	8002044 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000

08002050 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0d0      	b.n	8002206 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b6a      	ldr	r3, [pc, #424]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d910      	bls.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b67      	ldr	r3, [pc, #412]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4965      	ldr	r1, [pc, #404]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b63      	ldr	r3, [pc, #396]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4a58      	ldr	r2, [pc, #352]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b53      	ldr	r3, [pc, #332]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	4a52      	ldr	r2, [pc, #328]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b50      	ldr	r3, [pc, #320]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494d      	ldr	r1, [pc, #308]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d040      	beq.n	8002170 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b47      	ldr	r3, [pc, #284]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d115      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e073      	b.n	8002206 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211e:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e06b      	b.n	8002206 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212e:	4b39      	ldr	r3, [pc, #228]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f023 0203 	bic.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4936      	ldr	r1, [pc, #216]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 800213c:	4313      	orrs	r3, r2
 800213e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002140:	f7ff f988 	bl	8001454 <HAL_GetTick>
 8002144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002146:	e00a      	b.n	800215e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002148:	f7ff f984 	bl	8001454 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f241 3288 	movw	r2, #5000	; 0x1388
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e053      	b.n	8002206 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 020c 	and.w	r2, r3, #12
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	429a      	cmp	r2, r3
 800216e:	d1eb      	bne.n	8002148 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002170:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d210      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0207 	bic.w	r2, r3, #7
 8002186:	4922      	ldr	r1, [pc, #136]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	4313      	orrs	r3, r2
 800218c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_RCC_ClockConfig+0x1c0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e032      	b.n	8002206 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4916      	ldr	r1, [pc, #88]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490e      	ldr	r1, [pc, #56]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f821 	bl	8002224 <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_ClockConfig+0x1c4>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490a      	ldr	r1, [pc, #40]	; (8002218 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a09      	ldr	r2, [pc, #36]	; (800221c <HAL_RCC_ClockConfig+0x1cc>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021fa:	4b09      	ldr	r3, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1d0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff f8e6 	bl	80013d0 <HAL_InitTick>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40022000 	.word	0x40022000
 8002214:	40021000 	.word	0x40021000
 8002218:	08003d28 	.word	0x08003d28
 800221c:	2000005c 	.word	0x2000005c
 8002220:	20000060 	.word	0x20000060

08002224 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002224:	b490      	push	{r4, r7}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xac>)
 800222c:	1d3c      	adds	r4, r7, #4
 800222e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002230:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002234:	f240 2301 	movw	r3, #513	; 0x201
 8002238:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
 800223e:	2300      	movs	r3, #0
 8002240:	61bb      	str	r3, [r7, #24]
 8002242:	2300      	movs	r3, #0
 8002244:	627b      	str	r3, [r7, #36]	; 0x24
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 030c 	and.w	r3, r3, #12
 800225a:	2b04      	cmp	r3, #4
 800225c:	d002      	beq.n	8002264 <HAL_RCC_GetSysClockFreq+0x40>
 800225e:	2b08      	cmp	r3, #8
 8002260:	d003      	beq.n	800226a <HAL_RCC_GetSysClockFreq+0x46>
 8002262:	e02b      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002264:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002266:	623b      	str	r3, [r7, #32]
      break;
 8002268:	e02b      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	0c9b      	lsrs	r3, r3, #18
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3328      	adds	r3, #40	; 0x28
 8002274:	443b      	add	r3, r7
 8002276:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800227a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d012      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	0c5b      	lsrs	r3, r3, #17
 800228c:	f003 0301 	and.w	r3, r3, #1
 8002290:	3328      	adds	r3, #40	; 0x28
 8002292:	443b      	add	r3, r7
 8002294:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002298:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800229e:	fb03 f202 	mul.w	r2, r3, r2
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
 80022aa:	e004      	b.n	80022b6 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b0:	fb02 f303 	mul.w	r3, r2, r3
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	623b      	str	r3, [r7, #32]
      break;
 80022ba:	e002      	b.n	80022c2 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022be:	623b      	str	r3, [r7, #32]
      break;
 80022c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c2:	6a3b      	ldr	r3, [r7, #32]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc90      	pop	{r4, r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	08003d18 	.word	0x08003d18
 80022d4:	40021000 	.word	0x40021000
 80022d8:	007a1200 	.word	0x007a1200
 80022dc:	003d0900 	.word	0x003d0900

080022e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e4:	4b02      	ldr	r3, [pc, #8]	; (80022f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022e6:	681b      	ldr	r3, [r3, #0]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	2000005c 	.word	0x2000005c

080022f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022f8:	f7ff fff2 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 80022fc:	4602      	mov	r2, r0
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	4903      	ldr	r1, [pc, #12]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800230a:	5ccb      	ldrb	r3, [r1, r3]
 800230c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002310:	4618      	mov	r0, r3
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	08003d38 	.word	0x08003d38

0800231c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002320:	f7ff ffde 	bl	80022e0 <HAL_RCC_GetHCLKFreq>
 8002324:	4602      	mov	r2, r0
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	0adb      	lsrs	r3, r3, #11
 800232c:	f003 0307 	and.w	r3, r3, #7
 8002330:	4903      	ldr	r1, [pc, #12]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002332:	5ccb      	ldrb	r3, [r1, r3]
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000
 8002340:	08003d38 	.word	0x08003d38

08002344 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800234c:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <RCC_Delay+0x34>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <RCC_Delay+0x38>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0a5b      	lsrs	r3, r3, #9
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	fb02 f303 	mul.w	r3, r2, r3
 800235e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002360:	bf00      	nop
  }
  while (Delay --);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1e5a      	subs	r2, r3, #1
 8002366:	60fa      	str	r2, [r7, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1f9      	bne.n	8002360 <RCC_Delay+0x1c>
}
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	2000005c 	.word	0x2000005c
 800237c:	10624dd3 	.word	0x10624dd3

08002380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e041      	b.n	8002416 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d106      	bne.n	80023ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7fe fe86 	bl	80010b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2202      	movs	r2, #2
 80023b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3304      	adds	r3, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f000 fc20 	bl	8002c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	d001      	beq.n	8002438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e03a      	b.n	80024ae <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2202      	movs	r2, #2
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f042 0201 	orr.w	r2, r2, #1
 800244e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a18      	ldr	r2, [pc, #96]	; (80024b8 <HAL_TIM_Base_Start_IT+0x98>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x58>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002462:	d009      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x58>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <HAL_TIM_Base_Start_IT+0x9c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x58>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a13      	ldr	r2, [pc, #76]	; (80024c0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d111      	bne.n	800249c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d010      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	e007      	b.n	80024ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr
 80024b8:	40012c00 	.word	0x40012c00
 80024bc:	40000400 	.word	0x40000400
 80024c0:	40000800 	.word	0x40000800

080024c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e041      	b.n	800255a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7fe fe08 	bl	8001100 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3304      	adds	r3, #4
 8002500:	4619      	mov	r1, r3
 8002502:	4610      	mov	r0, r2
 8002504:	f000 fb7e 	bl	8002c04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
	...

08002564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_TIM_PWM_Start+0x24>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b01      	cmp	r3, #1
 800257e:	bf14      	ite	ne
 8002580:	2301      	movne	r3, #1
 8002582:	2300      	moveq	r3, #0
 8002584:	b2db      	uxtb	r3, r3
 8002586:	e022      	b.n	80025ce <HAL_TIM_PWM_Start+0x6a>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2b04      	cmp	r3, #4
 800258c:	d109      	bne.n	80025a2 <HAL_TIM_PWM_Start+0x3e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002594:	b2db      	uxtb	r3, r3
 8002596:	2b01      	cmp	r3, #1
 8002598:	bf14      	ite	ne
 800259a:	2301      	movne	r3, #1
 800259c:	2300      	moveq	r3, #0
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	e015      	b.n	80025ce <HAL_TIM_PWM_Start+0x6a>
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d109      	bne.n	80025bc <HAL_TIM_PWM_Start+0x58>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e008      	b.n	80025ce <HAL_TIM_PWM_Start+0x6a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e05e      	b.n	8002694 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d104      	bne.n	80025e6 <HAL_TIM_PWM_Start+0x82>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e4:	e013      	b.n	800260e <HAL_TIM_PWM_Start+0xaa>
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	2b04      	cmp	r3, #4
 80025ea:	d104      	bne.n	80025f6 <HAL_TIM_PWM_Start+0x92>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025f4:	e00b      	b.n	800260e <HAL_TIM_PWM_Start+0xaa>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d104      	bne.n	8002606 <HAL_TIM_PWM_Start+0xa2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2202      	movs	r2, #2
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002604:	e003      	b.n	800260e <HAL_TIM_PWM_Start+0xaa>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2201      	movs	r2, #1
 8002614:	6839      	ldr	r1, [r7, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fd74 	bl	8003104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_TIM_PWM_Start+0x138>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d107      	bne.n	8002636 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a18      	ldr	r2, [pc, #96]	; (800269c <HAL_TIM_PWM_Start+0x138>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d00e      	beq.n	800265e <HAL_TIM_PWM_Start+0xfa>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002648:	d009      	beq.n	800265e <HAL_TIM_PWM_Start+0xfa>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a14      	ldr	r2, [pc, #80]	; (80026a0 <HAL_TIM_PWM_Start+0x13c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d004      	beq.n	800265e <HAL_TIM_PWM_Start+0xfa>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a12      	ldr	r2, [pc, #72]	; (80026a4 <HAL_TIM_PWM_Start+0x140>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d111      	bne.n	8002682 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2b06      	cmp	r3, #6
 800266e:	d010      	beq.n	8002692 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002680:	e007      	b.n	8002692 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f042 0201 	orr.w	r2, r2, #1
 8002690:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40012c00 	.word	0x40012c00
 80026a0:	40000400 	.word	0x40000400
 80026a4:	40000800 	.word	0x40000800

080026a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0202 	mvn.w	r2, #2
 80026d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f003 0303 	and.w	r3, r3, #3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fa6f 	bl	8002bce <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa62 	bl	8002bbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fa71 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0304 	and.w	r3, r3, #4
 800270e:	2b04      	cmp	r3, #4
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b04      	cmp	r3, #4
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0204 	mvn.w	r2, #4
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2202      	movs	r2, #2
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fa45 	bl	8002bce <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa38 	bl	8002bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 fa47 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b08      	cmp	r3, #8
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	2b08      	cmp	r3, #8
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0208 	mvn.w	r2, #8
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 fa1b 	bl	8002bce <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fa0e 	bl	8002bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 fa1d 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	2b10      	cmp	r3, #16
 80027b8:	d122      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b10      	cmp	r3, #16
 80027c6:	d11b      	bne.n	8002800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0210 	mvn.w	r2, #16
 80027d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2208      	movs	r2, #8
 80027d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f9f1 	bl	8002bce <HAL_TIM_IC_CaptureCallback>
 80027ec:	e005      	b.n	80027fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f9e4 	bl	8002bbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f000 f9f3 	bl	8002be0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b01      	cmp	r3, #1
 800280c:	d10e      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f06f 0201 	mvn.w	r2, #1
 8002824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f7fe fbf4 	bl	8001014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002836:	2b80      	cmp	r3, #128	; 0x80
 8002838:	d10e      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002844:	2b80      	cmp	r3, #128	; 0x80
 8002846:	d107      	bne.n	8002858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 fce1 	bl	800321a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002862:	2b40      	cmp	r3, #64	; 0x40
 8002864:	d10e      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d107      	bne.n	8002884 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800287c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f9b7 	bl	8002bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	f003 0320 	and.w	r3, r3, #32
 800288e:	2b20      	cmp	r3, #32
 8002890:	d10e      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b20      	cmp	r3, #32
 800289e:	d107      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f06f 0220 	mvn.w	r2, #32
 80028a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fcac 	bl	8003208 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e0ac      	b.n	8002a2c <HAL_TIM_PWM_ConfigChannel+0x174>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0c      	cmp	r3, #12
 80028de:	f200 809f 	bhi.w	8002a20 <HAL_TIM_PWM_ConfigChannel+0x168>
 80028e2:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80028e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e8:	0800291d 	.word	0x0800291d
 80028ec:	08002a21 	.word	0x08002a21
 80028f0:	08002a21 	.word	0x08002a21
 80028f4:	08002a21 	.word	0x08002a21
 80028f8:	0800295d 	.word	0x0800295d
 80028fc:	08002a21 	.word	0x08002a21
 8002900:	08002a21 	.word	0x08002a21
 8002904:	08002a21 	.word	0x08002a21
 8002908:	0800299f 	.word	0x0800299f
 800290c:	08002a21 	.word	0x08002a21
 8002910:	08002a21 	.word	0x08002a21
 8002914:	08002a21 	.word	0x08002a21
 8002918:	080029df 	.word	0x080029df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	4618      	mov	r0, r3
 8002924:	f000 f9d0 	bl	8002cc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0208 	orr.w	r2, r2, #8
 8002936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699a      	ldr	r2, [r3, #24]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 0204 	bic.w	r2, r2, #4
 8002946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6999      	ldr	r1, [r3, #24]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	619a      	str	r2, [r3, #24]
      break;
 800295a:	e062      	b.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	4618      	mov	r0, r3
 8002964:	f000 fa16 	bl	8002d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699a      	ldr	r2, [r3, #24]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	6999      	ldr	r1, [r3, #24]
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	021a      	lsls	r2, r3, #8
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	619a      	str	r2, [r3, #24]
      break;
 800299c:	e041      	b.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68b9      	ldr	r1, [r7, #8]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fa5f 	bl	8002e68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	69da      	ldr	r2, [r3, #28]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f042 0208 	orr.w	r2, r2, #8
 80029b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0204 	bic.w	r2, r2, #4
 80029c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	691a      	ldr	r2, [r3, #16]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	430a      	orrs	r2, r1
 80029da:	61da      	str	r2, [r3, #28]
      break;
 80029dc:	e021      	b.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68b9      	ldr	r1, [r7, #8]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 faa9 	bl	8002f3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	69da      	ldr	r2, [r3, #28]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	69d9      	ldr	r1, [r3, #28]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	691b      	ldr	r3, [r3, #16]
 8002a14:	021a      	lsls	r2, r3, #8
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	61da      	str	r2, [r3, #28]
      break;
 8002a1e:	e000      	b.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3710      	adds	r7, #16
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_TIM_ConfigClockSource+0x18>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0b3      	b.n	8002bb4 <HAL_TIM_ConfigClockSource+0x180>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2202      	movs	r2, #2
 8002a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a84:	d03e      	beq.n	8002b04 <HAL_TIM_ConfigClockSource+0xd0>
 8002a86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a8a:	f200 8087 	bhi.w	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002a8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a92:	f000 8085 	beq.w	8002ba0 <HAL_TIM_ConfigClockSource+0x16c>
 8002a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9a:	d87f      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002a9c:	2b70      	cmp	r3, #112	; 0x70
 8002a9e:	d01a      	beq.n	8002ad6 <HAL_TIM_ConfigClockSource+0xa2>
 8002aa0:	2b70      	cmp	r3, #112	; 0x70
 8002aa2:	d87b      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002aa4:	2b60      	cmp	r3, #96	; 0x60
 8002aa6:	d050      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0x116>
 8002aa8:	2b60      	cmp	r3, #96	; 0x60
 8002aaa:	d877      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002aac:	2b50      	cmp	r3, #80	; 0x50
 8002aae:	d03c      	beq.n	8002b2a <HAL_TIM_ConfigClockSource+0xf6>
 8002ab0:	2b50      	cmp	r3, #80	; 0x50
 8002ab2:	d873      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002ab4:	2b40      	cmp	r3, #64	; 0x40
 8002ab6:	d058      	beq.n	8002b6a <HAL_TIM_ConfigClockSource+0x136>
 8002ab8:	2b40      	cmp	r3, #64	; 0x40
 8002aba:	d86f      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002abc:	2b30      	cmp	r3, #48	; 0x30
 8002abe:	d064      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x156>
 8002ac0:	2b30      	cmp	r3, #48	; 0x30
 8002ac2:	d86b      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d060      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x156>
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d867      	bhi.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d05c      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x156>
 8002ad0:	2b10      	cmp	r3, #16
 8002ad2:	d05a      	beq.n	8002b8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002ad4:	e062      	b.n	8002b9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6818      	ldr	r0, [r3, #0]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	6899      	ldr	r1, [r3, #8]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f000 faee 	bl	80030c6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	689b      	ldr	r3, [r3, #8]
 8002af0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002af8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	609a      	str	r2, [r3, #8]
      break;
 8002b02:	e04e      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6818      	ldr	r0, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6899      	ldr	r1, [r3, #8]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f000 fad7 	bl	80030c6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b26:	609a      	str	r2, [r3, #8]
      break;
 8002b28:	e03b      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6818      	ldr	r0, [r3, #0]
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6859      	ldr	r1, [r3, #4]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	461a      	mov	r2, r3
 8002b38:	f000 fa4e 	bl	8002fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2150      	movs	r1, #80	; 0x50
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 faa5 	bl	8003092 <TIM_ITRx_SetConfig>
      break;
 8002b48:	e02b      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f000 fa6c 	bl	8003034 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2160      	movs	r1, #96	; 0x60
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fa95 	bl	8003092 <TIM_ITRx_SetConfig>
      break;
 8002b68:	e01b      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	6859      	ldr	r1, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	461a      	mov	r2, r3
 8002b78:	f000 fa2e 	bl	8002fd8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	2140      	movs	r1, #64	; 0x40
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 fa85 	bl	8003092 <TIM_ITRx_SetConfig>
      break;
 8002b88:	e00b      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4619      	mov	r1, r3
 8002b94:	4610      	mov	r0, r2
 8002b96:	f000 fa7c 	bl	8003092 <TIM_ITRx_SetConfig>
        break;
 8002b9a:	e002      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b9c:	bf00      	nop
 8002b9e:	e000      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ba0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr

08002bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bc80      	pop	{r7}
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bc80      	pop	{r7}
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	b083      	sub	sp, #12
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bfa:	bf00      	nop
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bc80      	pop	{r7}
 8002c02:	4770      	bx	lr

08002c04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b085      	sub	sp, #20
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a29      	ldr	r2, [pc, #164]	; (8002cbc <TIM_Base_SetConfig+0xb8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00b      	beq.n	8002c34 <TIM_Base_SetConfig+0x30>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c22:	d007      	beq.n	8002c34 <TIM_Base_SetConfig+0x30>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a26      	ldr	r2, [pc, #152]	; (8002cc0 <TIM_Base_SetConfig+0xbc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0x30>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a25      	ldr	r2, [pc, #148]	; (8002cc4 <TIM_Base_SetConfig+0xc0>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d108      	bne.n	8002c46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1c      	ldr	r2, [pc, #112]	; (8002cbc <TIM_Base_SetConfig+0xb8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00b      	beq.n	8002c66 <TIM_Base_SetConfig+0x62>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d007      	beq.n	8002c66 <TIM_Base_SetConfig+0x62>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a19      	ldr	r2, [pc, #100]	; (8002cc0 <TIM_Base_SetConfig+0xbc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d003      	beq.n	8002c66 <TIM_Base_SetConfig+0x62>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a18      	ldr	r2, [pc, #96]	; (8002cc4 <TIM_Base_SetConfig+0xc0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d108      	bne.n	8002c78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68db      	ldr	r3, [r3, #12]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	68fa      	ldr	r2, [r7, #12]
 8002c8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a07      	ldr	r2, [pc, #28]	; (8002cbc <TIM_Base_SetConfig+0xb8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d103      	bne.n	8002cac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	615a      	str	r2, [r3, #20]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bc80      	pop	{r7}
 8002cba:	4770      	bx	lr
 8002cbc:	40012c00 	.word	0x40012c00
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40000800 	.word	0x40000800

08002cc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	f023 0201 	bic.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0303 	bic.w	r3, r3, #3
 8002cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f023 0302 	bic.w	r3, r3, #2
 8002d10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <TIM_OC1_SetConfig+0xc8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d10c      	bne.n	8002d3e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0308 	bic.w	r3, r3, #8
 8002d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f023 0304 	bic.w	r3, r3, #4
 8002d3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <TIM_OC1_SetConfig+0xc8>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d111      	bne.n	8002d6a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40012c00 	.word	0x40012c00

08002d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	f023 0210 	bic.w	r2, r3, #16
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0320 	bic.w	r3, r3, #32
 8002dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	011b      	lsls	r3, r3, #4
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a1d      	ldr	r2, [pc, #116]	; (8002e64 <TIM_OC2_SetConfig+0xd0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d10d      	bne.n	8002e10 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a14      	ldr	r2, [pc, #80]	; (8002e64 <TIM_OC2_SetConfig+0xd0>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d113      	bne.n	8002e40 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	693a      	ldr	r2, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	697a      	ldr	r2, [r7, #20]
 8002e58:	621a      	str	r2, [r3, #32]
}
 8002e5a:	bf00      	nop
 8002e5c:	371c      	adds	r7, #28
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bc80      	pop	{r7}
 8002e62:	4770      	bx	lr
 8002e64:	40012c00 	.word	0x40012c00

08002e68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0303 	bic.w	r3, r3, #3
 8002e9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002eb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	021b      	lsls	r3, r3, #8
 8002eb8:	697a      	ldr	r2, [r7, #20]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <TIM_OC3_SetConfig+0xd0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d10d      	bne.n	8002ee2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ecc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	021b      	lsls	r3, r3, #8
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <TIM_OC3_SetConfig+0xd0>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d113      	bne.n	8002f12 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ef0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ef8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	621a      	str	r2, [r3, #32]
}
 8002f2c:	bf00      	nop
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40012c00 	.word	0x40012c00

08002f3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	031b      	lsls	r3, r3, #12
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <TIM_OC4_SetConfig+0x98>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d109      	bne.n	8002fb0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	019b      	lsls	r3, r3, #6
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	621a      	str	r2, [r3, #32]
}
 8002fca:	bf00      	nop
 8002fcc:	371c      	adds	r7, #28
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr
 8002fd4:	40012c00 	.word	0x40012c00

08002fd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b087      	sub	sp, #28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	60b9      	str	r1, [r7, #8]
 8002fe2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a1b      	ldr	r3, [r3, #32]
 8002fe8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0201 	bic.w	r2, r3, #1
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003002:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f023 030a 	bic.w	r3, r3, #10
 8003014:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
 800301c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	621a      	str	r2, [r3, #32]
}
 800302a:	bf00      	nop
 800302c:	371c      	adds	r7, #28
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003034:	b480      	push	{r7}
 8003036:	b087      	sub	sp, #28
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	f023 0210 	bic.w	r2, r3, #16
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800305e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	031b      	lsls	r3, r3, #12
 8003064:	697a      	ldr	r2, [r7, #20]
 8003066:	4313      	orrs	r3, r2
 8003068:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003070:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	011b      	lsls	r3, r3, #4
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	4313      	orrs	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	621a      	str	r2, [r3, #32]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
 800309a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	f043 0307 	orr.w	r3, r3, #7
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	609a      	str	r2, [r3, #8]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b087      	sub	sp, #28
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	607a      	str	r2, [r7, #4]
 80030d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030e0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	021a      	lsls	r2, r3, #8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	431a      	orrs	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	697a      	ldr	r2, [r7, #20]
 80030f8:	609a      	str	r2, [r3, #8]
}
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bc80      	pop	{r7}
 8003102:	4770      	bx	lr

08003104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003104:	b480      	push	{r7}
 8003106:	b087      	sub	sp, #28
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 031f 	and.w	r3, r3, #31
 8003116:	2201      	movs	r2, #1
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	43db      	mvns	r3, r3
 8003126:	401a      	ands	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a1a      	ldr	r2, [r3, #32]
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	fa01 f303 	lsl.w	r3, r1, r3
 800313c:	431a      	orrs	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	621a      	str	r2, [r3, #32]
}
 8003142:	bf00      	nop
 8003144:	371c      	adds	r7, #28
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800315c:	2b01      	cmp	r3, #1
 800315e:	d101      	bne.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003160:	2302      	movs	r3, #2
 8003162:	e046      	b.n	80031f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a16      	ldr	r2, [pc, #88]	; (80031fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d00e      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031b0:	d009      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d004      	beq.n	80031c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a10      	ldr	r2, [pc, #64]	; (8003204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d10c      	bne.n	80031e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	68ba      	ldr	r2, [r7, #8]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3714      	adds	r7, #20
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	40012c00 	.word	0x40012c00
 8003200:	40000400 	.word	0x40000400
 8003204:	40000800 	.word	0x40000800

08003208 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003222:	bf00      	nop
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	bc80      	pop	{r7}
 800322a:	4770      	bx	lr

0800322c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e03f      	b.n	80032be <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fd ffa4 	bl	80011a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68da      	ldr	r2, [r3, #12]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800326e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fc85 	bl	8003b80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003284:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003294:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2220      	movs	r2, #32
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b08a      	sub	sp, #40	; 0x28
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	603b      	str	r3, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b20      	cmp	r3, #32
 80032e4:	d17c      	bne.n	80033e0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_UART_Transmit+0x2c>
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e075      	b.n	80033e2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d101      	bne.n	8003304 <HAL_UART_Transmit+0x3e>
 8003300:	2302      	movs	r3, #2
 8003302:	e06e      	b.n	80033e2 <HAL_UART_Transmit+0x11c>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2221      	movs	r2, #33	; 0x21
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800331a:	f7fe f89b 	bl	8001454 <HAL_GetTick>
 800331e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	88fa      	ldrh	r2, [r7, #6]
 8003324:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	88fa      	ldrh	r2, [r7, #6]
 800332a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003334:	d108      	bne.n	8003348 <HAL_UART_Transmit+0x82>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d104      	bne.n	8003348 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e003      	b.n	8003350 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800334c:	2300      	movs	r3, #0
 800334e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003358:	e02a      	b.n	80033b0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	2180      	movs	r1, #128	; 0x80
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa38 	bl	80037da <UART_WaitOnFlagUntilTimeout>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003370:	2303      	movs	r3, #3
 8003372:	e036      	b.n	80033e2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10b      	bne.n	8003392 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	461a      	mov	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003388:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	3302      	adds	r3, #2
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	e007      	b.n	80033a2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	3301      	adds	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1cf      	bne.n	800335a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2200      	movs	r2, #0
 80033c2:	2140      	movs	r1, #64	; 0x40
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa08 	bl	80037da <UART_WaitOnFlagUntilTimeout>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e006      	b.n	80033e2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	e000      	b.n	80033e2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80033e0:	2302      	movs	r3, #2
  }
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3720      	adds	r7, #32
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	4613      	mov	r3, r2
 80033f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b20      	cmp	r3, #32
 8003402:	d11d      	bne.n	8003440 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_UART_Receive_IT+0x26>
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e016      	b.n	8003442 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800341a:	2b01      	cmp	r3, #1
 800341c:	d101      	bne.n	8003422 <HAL_UART_Receive_IT+0x38>
 800341e:	2302      	movs	r3, #2
 8003420:	e00f      	b.n	8003442 <HAL_UART_Receive_IT+0x58>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003430:	88fb      	ldrh	r3, [r7, #6]
 8003432:	461a      	mov	r2, r3
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 fa19 	bl	800386e <UART_Start_Receive_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	e000      	b.n	8003442 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003440:	2302      	movs	r3, #2
  }
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
	...

0800344c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800346c:	2300      	movs	r3, #0
 800346e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d10d      	bne.n	800349e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d008      	beq.n	800349e <HAL_UART_IRQHandler+0x52>
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	f003 0320 	and.w	r3, r3, #32
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fac9 	bl	8003a2e <UART_Receive_IT>
      return;
 800349c:	e17b      	b.n	8003796 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80b1 	beq.w	8003608 <HAL_UART_IRQHandler+0x1bc>
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d105      	bne.n	80034bc <HAL_UART_IRQHandler+0x70>
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 80a6 	beq.w	8003608 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00a      	beq.n	80034dc <HAL_UART_IRQHandler+0x90>
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_UART_IRQHandler+0xb0>
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f043 0202 	orr.w	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_UART_IRQHandler+0xd0>
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0301 	and.w	r3, r3, #1
 800350c:	2b00      	cmp	r3, #0
 800350e:	d005      	beq.n	800351c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	f043 0204 	orr.w	r2, r3, #4
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00f      	beq.n	8003546 <HAL_UART_IRQHandler+0xfa>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	f003 0320 	and.w	r3, r3, #32
 800352c:	2b00      	cmp	r3, #0
 800352e:	d104      	bne.n	800353a <HAL_UART_IRQHandler+0xee>
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0208 	orr.w	r2, r3, #8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 811e 	beq.w	800378c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	f003 0320 	and.w	r3, r3, #32
 8003556:	2b00      	cmp	r3, #0
 8003558:	d007      	beq.n	800356a <HAL_UART_IRQHandler+0x11e>
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	f003 0320 	and.w	r3, r3, #32
 8003560:	2b00      	cmp	r3, #0
 8003562:	d002      	beq.n	800356a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f000 fa62 	bl	8003a2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d102      	bne.n	8003592 <HAL_UART_IRQHandler+0x146>
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d031      	beq.n	80035f6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f9a4 	bl	80038e0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d023      	beq.n	80035ee <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d013      	beq.n	80035e6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c2:	4a76      	ldr	r2, [pc, #472]	; (800379c <HAL_UART_IRQHandler+0x350>)
 80035c4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	4618      	mov	r0, r3
 80035cc:	f7fe f894 	bl	80016f8 <HAL_DMA_Abort_IT>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d016      	beq.n	8003604 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035e0:	4610      	mov	r0, r2
 80035e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e4:	e00e      	b.n	8003604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f8e3 	bl	80037b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ec:	e00a      	b.n	8003604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f8df 	bl	80037b2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f4:	e006      	b.n	8003604 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8db 	bl	80037b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003602:	e0c3      	b.n	800378c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	bf00      	nop
    return;
 8003606:	e0c1      	b.n	800378c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360c:	2b01      	cmp	r3, #1
 800360e:	f040 80a1 	bne.w	8003754 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 809b 	beq.w	8003754 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 8095 	beq.w	8003754 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04e      	beq.n	80036ec <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003658:	8a3b      	ldrh	r3, [r7, #16]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8098 	beq.w	8003790 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003664:	8a3a      	ldrh	r2, [r7, #16]
 8003666:	429a      	cmp	r2, r3
 8003668:	f080 8092 	bcs.w	8003790 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8a3a      	ldrh	r2, [r7, #16]
 8003670:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	2b20      	cmp	r3, #32
 800367a:	d02b      	beq.n	80036d4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800368a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	695a      	ldr	r2, [r3, #20]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036aa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 0210 	bic.w	r2, r2, #16
 80036c8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fd ffd7 	bl	8001682 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036dc:	b29b      	uxth	r3, r3
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f86d 	bl	80037c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80036ea:	e051      	b.n	8003790 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	d047      	beq.n	8003794 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003704:	8a7b      	ldrh	r3, [r7, #18]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d044      	beq.n	8003794 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003718:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68da      	ldr	r2, [r3, #12]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f022 0210 	bic.w	r2, r2, #16
 8003746:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003748:	8a7b      	ldrh	r3, [r7, #18]
 800374a:	4619      	mov	r1, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 f839 	bl	80037c4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003752:	e01f      	b.n	8003794 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375a:	2b00      	cmp	r3, #0
 800375c:	d008      	beq.n	8003770 <HAL_UART_IRQHandler+0x324>
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 f8f9 	bl	8003960 <UART_Transmit_IT>
    return;
 800376e:	e012      	b.n	8003796 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00d      	beq.n	8003796 <HAL_UART_IRQHandler+0x34a>
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f93a 	bl	80039fe <UART_EndTransmit_IT>
    return;
 800378a:	e004      	b.n	8003796 <HAL_UART_IRQHandler+0x34a>
    return;
 800378c:	bf00      	nop
 800378e:	e002      	b.n	8003796 <HAL_UART_IRQHandler+0x34a>
      return;
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <HAL_UART_IRQHandler+0x34a>
      return;
 8003794:	bf00      	nop
  }
}
 8003796:	3728      	adds	r7, #40	; 0x28
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	08003939 	.word	0x08003939

080037a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80037a8:	bf00      	nop
 80037aa:	370c      	adds	r7, #12
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bc80      	pop	{r7}
 80037b0:	4770      	bx	lr

080037b2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bc80      	pop	{r7}
 80037d8:	4770      	bx	lr

080037da <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b084      	sub	sp, #16
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	603b      	str	r3, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037ea:	e02c      	b.n	8003846 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d028      	beq.n	8003846 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d007      	beq.n	800380a <UART_WaitOnFlagUntilTimeout+0x30>
 80037fa:	f7fd fe2b 	bl	8001454 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	429a      	cmp	r2, r3
 8003808:	d21d      	bcs.n	8003846 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003818:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	695a      	ldr	r2, [r3, #20]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e00f      	b.n	8003866 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	4013      	ands	r3, r2
 8003850:	68ba      	ldr	r2, [r7, #8]
 8003852:	429a      	cmp	r2, r3
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	461a      	mov	r2, r3
 800385e:	79fb      	ldrb	r3, [r7, #7]
 8003860:	429a      	cmp	r2, r3
 8003862:	d0c3      	beq.n	80037ec <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800386e:	b480      	push	{r7}
 8003870:	b085      	sub	sp, #20
 8003872:	af00      	add	r7, sp, #0
 8003874:	60f8      	str	r0, [r7, #12]
 8003876:	60b9      	str	r1, [r7, #8]
 8003878:	4613      	mov	r3, r2
 800387a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2222      	movs	r2, #34	; 0x22
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68da      	ldr	r2, [r3, #12]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b2:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695a      	ldr	r2, [r3, #20]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68da      	ldr	r2, [r3, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0220 	orr.w	r2, r2, #32
 80038d2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	bc80      	pop	{r7}
 80038de:	4770      	bx	lr

080038e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038f6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f022 0201 	bic.w	r2, r2, #1
 8003906:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	2b01      	cmp	r3, #1
 800390e:	d107      	bne.n	8003920 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0210 	bic.w	r2, r2, #16
 800391e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800392e:	bf00      	nop
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff ff2d 	bl	80037b2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b21      	cmp	r3, #33	; 0x21
 8003972:	d13e      	bne.n	80039f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397c:	d114      	bne.n	80039a8 <UART_Transmit_IT+0x48>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d110      	bne.n	80039a8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a1b      	ldr	r3, [r3, #32]
 800398a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	461a      	mov	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800399a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	1c9a      	adds	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	621a      	str	r2, [r3, #32]
 80039a6:	e008      	b.n	80039ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a1b      	ldr	r3, [r3, #32]
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6211      	str	r1, [r2, #32]
 80039b2:	781a      	ldrb	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039be:	b29b      	uxth	r3, r3
 80039c0:	3b01      	subs	r3, #1
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	4619      	mov	r1, r3
 80039c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10f      	bne.n	80039ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68da      	ldr	r2, [r3, #12]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff febe 	bl	80037a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b22      	cmp	r3, #34	; 0x22
 8003a40:	f040 8099 	bne.w	8003b76 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4c:	d117      	bne.n	8003a7e <UART_Receive_IT+0x50>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d113      	bne.n	8003a7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a7c:	e026      	b.n	8003acc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a90:	d007      	beq.n	8003aa2 <UART_Receive_IT+0x74>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10a      	bne.n	8003ab0 <UART_Receive_IT+0x82>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d106      	bne.n	8003ab0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	b2da      	uxtb	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	e008      	b.n	8003ac2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003abc:	b2da      	uxtb	r2, r3
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac6:	1c5a      	adds	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4619      	mov	r1, r3
 8003ada:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d148      	bne.n	8003b72 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0220 	bic.w	r2, r2, #32
 8003aee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68da      	ldr	r2, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003afe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	695a      	ldr	r2, [r3, #20]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0201 	bic.w	r2, r2, #1
 8003b0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d123      	bne.n	8003b68 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68da      	ldr	r2, [r3, #12]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0210 	bic.w	r2, r2, #16
 8003b34:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0310 	and.w	r3, r3, #16
 8003b40:	2b10      	cmp	r3, #16
 8003b42:	d10a      	bne.n	8003b5a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b44:	2300      	movs	r3, #0
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003b5e:	4619      	mov	r1, r3
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fe2f 	bl	80037c4 <HAL_UARTEx_RxEventCallback>
 8003b66:	e002      	b.n	8003b6e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fd f871 	bl	8000c50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e002      	b.n	8003b78 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003bba:	f023 030c 	bic.w	r3, r3, #12
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2c      	ldr	r2, [pc, #176]	; (8003c94 <UART_SetConfig+0x114>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d103      	bne.n	8003bf0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003be8:	f7fe fb98 	bl	800231c <HAL_RCC_GetPCLK2Freq>
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	e002      	b.n	8003bf6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003bf0:	f7fe fb80 	bl	80022f4 <HAL_RCC_GetPCLK1Freq>
 8003bf4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009a      	lsls	r2, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	4a22      	ldr	r2, [pc, #136]	; (8003c98 <UART_SetConfig+0x118>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	0119      	lsls	r1, r3, #4
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	009a      	lsls	r2, r3, #2
 8003c20:	441a      	add	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c2c:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <UART_SetConfig+0x118>)
 8003c2e:	fba3 0302 	umull	r0, r3, r3, r2
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2064      	movs	r0, #100	; 0x64
 8003c36:	fb00 f303 	mul.w	r3, r0, r3
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	3332      	adds	r3, #50	; 0x32
 8003c40:	4a15      	ldr	r2, [pc, #84]	; (8003c98 <UART_SetConfig+0x118>)
 8003c42:	fba2 2303 	umull	r2, r3, r2, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c4c:	4419      	add	r1, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009a      	lsls	r2, r3, #2
 8003c58:	441a      	add	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <UART_SetConfig+0x118>)
 8003c66:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2064      	movs	r0, #100	; 0x64
 8003c6e:	fb00 f303 	mul.w	r3, r0, r3
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	011b      	lsls	r3, r3, #4
 8003c76:	3332      	adds	r3, #50	; 0x32
 8003c78:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <UART_SetConfig+0x118>)
 8003c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7e:	095b      	lsrs	r3, r3, #5
 8003c80:	f003 020f 	and.w	r2, r3, #15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	440a      	add	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c8c:	bf00      	nop
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40013800 	.word	0x40013800
 8003c98:	51eb851f 	.word	0x51eb851f

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	4d0c      	ldr	r5, [pc, #48]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca2:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	f000 f822 	bl	8003cf4 <_init>
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	4d0a      	ldr	r5, [pc, #40]	; (8003cdc <__libc_init_array+0x40>)
 8003cb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08003d40 	.word	0x08003d40
 8003cd8:	08003d40 	.word	0x08003d40
 8003cdc:	08003d40 	.word	0x08003d40
 8003ce0:	08003d44 	.word	0x08003d44

08003ce4 <memset>:
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4402      	add	r2, r0
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d100      	bne.n	8003cee <memset+0xa>
 8003cec:	4770      	bx	lr
 8003cee:	f803 1b01 	strb.w	r1, [r3], #1
 8003cf2:	e7f9      	b.n	8003ce8 <memset+0x4>

08003cf4 <_init>:
 8003cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf6:	bf00      	nop
 8003cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cfa:	bc08      	pop	{r3}
 8003cfc:	469e      	mov	lr, r3
 8003cfe:	4770      	bx	lr

08003d00 <_fini>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr
