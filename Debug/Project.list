
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000335c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800349c  0800349c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800349c  0800349c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800349c  0800349c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800349c  0800349c  0001349c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080034a0  080034a0  000134a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080034a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000068  0800350c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  0800350c  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b22f  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002004  00000000  00000000  0002b2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bf8  00000000  00000000  0002dfa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182a9  00000000  00000000  0002eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e43c  00000000  00000000  00046e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a890  00000000  00000000  00055285  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dfb15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003460  00000000  00000000  000dfb68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003450 	.word	0x08003450

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003450 	.word	0x08003450

0800014c <buttonReading>:
int flagButtonPressed[NUMS_OF_BUTTON];
int flagButtonHold[NUMS_OF_BUTTON];

int counterButtonHold[NUMS_OF_BUTTON] = {0, 0, 0, 0};

void buttonReading(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for(int i = 0; i < NUMS_OF_BUTTON; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e08e      	b.n	8000276 <buttonReading+0x12a>
		ButtonBuffer2[i] = ButtonBuffer1[i];
 8000158:	4a4b      	ldr	r2, [pc, #300]	; (8000288 <buttonReading+0x13c>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	4413      	add	r3, r2
 800015e:	7819      	ldrb	r1, [r3, #0]
 8000160:	4a4a      	ldr	r2, [pc, #296]	; (800028c <buttonReading+0x140>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	460a      	mov	r2, r1
 8000168:	701a      	strb	r2, [r3, #0]
		ButtonBuffer1[i] = ButtonBuffer0[i];
 800016a:	4a49      	ldr	r2, [pc, #292]	; (8000290 <buttonReading+0x144>)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	4413      	add	r3, r2
 8000170:	7819      	ldrb	r1, [r3, #0]
 8000172:	4a45      	ldr	r2, [pc, #276]	; (8000288 <buttonReading+0x13c>)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	4413      	add	r3, r2
 8000178:	460a      	mov	r2, r1
 800017a:	701a      	strb	r2, [r3, #0]
		ButtonBuffer0[i] = HAL_GPIO_ReadPin(buttonPort[i], buttonPin[i]);
 800017c:	4a45      	ldr	r2, [pc, #276]	; (8000294 <buttonReading+0x148>)
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000184:	4944      	ldr	r1, [pc, #272]	; (8000298 <buttonReading+0x14c>)
 8000186:	687b      	ldr	r3, [r7, #4]
 8000188:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800018c:	4619      	mov	r1, r3
 800018e:	4610      	mov	r0, r2
 8000190:	f001 fbb6 	bl	8001900 <HAL_GPIO_ReadPin>
 8000194:	4603      	mov	r3, r0
 8000196:	4619      	mov	r1, r3
 8000198:	4a3d      	ldr	r2, [pc, #244]	; (8000290 <buttonReading+0x144>)
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	4413      	add	r3, r2
 800019e:	460a      	mov	r2, r1
 80001a0:	701a      	strb	r2, [r3, #0]
		if((ButtonBuffer2[i] == ButtonBuffer1[i]) && (ButtonBuffer1[i] == ButtonBuffer0[i])) {
 80001a2:	4a3a      	ldr	r2, [pc, #232]	; (800028c <buttonReading+0x140>)
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	4413      	add	r3, r2
 80001a8:	781a      	ldrb	r2, [r3, #0]
 80001aa:	4937      	ldr	r1, [pc, #220]	; (8000288 <buttonReading+0x13c>)
 80001ac:	687b      	ldr	r3, [r7, #4]
 80001ae:	440b      	add	r3, r1
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	429a      	cmp	r2, r3
 80001b4:	d15c      	bne.n	8000270 <buttonReading+0x124>
 80001b6:	4a34      	ldr	r2, [pc, #208]	; (8000288 <buttonReading+0x13c>)
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	4413      	add	r3, r2
 80001bc:	781a      	ldrb	r2, [r3, #0]
 80001be:	4934      	ldr	r1, [pc, #208]	; (8000290 <buttonReading+0x144>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	440b      	add	r3, r1
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	429a      	cmp	r2, r3
 80001c8:	d152      	bne.n	8000270 <buttonReading+0x124>
			if(buttonBuffer[i] != ButtonBuffer0[i]) {
 80001ca:	4a34      	ldr	r2, [pc, #208]	; (800029c <buttonReading+0x150>)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4413      	add	r3, r2
 80001d0:	781a      	ldrb	r2, [r3, #0]
 80001d2:	492f      	ldr	r1, [pc, #188]	; (8000290 <buttonReading+0x144>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	440b      	add	r3, r1
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	429a      	cmp	r2, r3
 80001dc:	d02e      	beq.n	800023c <buttonReading+0xf0>
				buttonBuffer[i] = ButtonBuffer0[i];
 80001de:	4a2c      	ldr	r2, [pc, #176]	; (8000290 <buttonReading+0x144>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4413      	add	r3, r2
 80001e4:	7819      	ldrb	r1, [r3, #0]
 80001e6:	4a2d      	ldr	r2, [pc, #180]	; (800029c <buttonReading+0x150>)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	4413      	add	r3, r2
 80001ec:	460a      	mov	r2, r1
 80001ee:	701a      	strb	r2, [r3, #0]
				if(buttonBuffer[i] == PRESSED) {
 80001f0:	4a2a      	ldr	r2, [pc, #168]	; (800029c <buttonReading+0x150>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	4413      	add	r3, r2
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d119      	bne.n	8000230 <buttonReading+0xe4>
					counterButtonHold[i] = BUTTON_HOLD;
 80001fc:	4a28      	ldr	r2, [pc, #160]	; (80002a0 <buttonReading+0x154>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8000204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					if(CYCLE > 0) counterButtonHold[i] /= CYCLE;
 8000208:	4a25      	ldr	r2, [pc, #148]	; (80002a0 <buttonReading+0x154>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000210:	4a24      	ldr	r2, [pc, #144]	; (80002a4 <buttonReading+0x158>)
 8000212:	fb82 1203 	smull	r1, r2, r2, r3
 8000216:	1092      	asrs	r2, r2, #2
 8000218:	17db      	asrs	r3, r3, #31
 800021a:	1ad2      	subs	r2, r2, r3
 800021c:	4920      	ldr	r1, [pc, #128]	; (80002a0 <buttonReading+0x154>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					flagButtonPressed[i] = 1;
 8000224:	4a20      	ldr	r2, [pc, #128]	; (80002a8 <buttonReading+0x15c>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	2101      	movs	r1, #1
 800022a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800022e:	e01f      	b.n	8000270 <buttonReading+0x124>
				}
				else flagButtonHold[i] = 0;
 8000230:	4a1e      	ldr	r2, [pc, #120]	; (80002ac <buttonReading+0x160>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	2100      	movs	r1, #0
 8000236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800023a:	e019      	b.n	8000270 <buttonReading+0x124>
			}
			else {
				if(buttonBuffer[i] == PRESSED) {
 800023c:	4a17      	ldr	r2, [pc, #92]	; (800029c <buttonReading+0x150>)
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4413      	add	r3, r2
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d113      	bne.n	8000270 <buttonReading+0x124>
					counterButtonHold[i]--;
 8000248:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <buttonReading+0x154>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000250:	1e5a      	subs	r2, r3, #1
 8000252:	4913      	ldr	r1, [pc, #76]	; (80002a0 <buttonReading+0x154>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					if(counterButtonHold[i] == 0) flagButtonHold[i] = 1;
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <buttonReading+0x154>)
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d104      	bne.n	8000270 <buttonReading+0x124>
 8000266:	4a11      	ldr	r2, [pc, #68]	; (80002ac <buttonReading+0x160>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2101      	movs	r1, #1
 800026c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < NUMS_OF_BUTTON; i++) {
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	3301      	adds	r3, #1
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	2b03      	cmp	r3, #3
 800027a:	f77f af6d 	ble.w	8000158 <buttonReading+0xc>
				}
			}
		}
	}
}
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000020 	.word	0x20000020
 800028c:	20000024 	.word	0x20000024
 8000290:	2000001c 	.word	0x2000001c
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000018 	.word	0x20000018
 80002a0:	200000a4 	.word	0x200000a4
 80002a4:	66666667 	.word	0x66666667
 80002a8:	20000084 	.word	0x20000084
 80002ac:	20000094 	.word	0x20000094

080002b0 <isButtonPressed>:

int isButtonPressed(int index) {
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NUMS_OF_BUTTON) return 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	db02      	blt.n	80002c4 <isButtonPressed+0x14>
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2b04      	cmp	r3, #4
 80002c2:	dd01      	ble.n	80002c8 <isButtonPressed+0x18>
 80002c4:	2300      	movs	r3, #0
 80002c6:	e00d      	b.n	80002e4 <isButtonPressed+0x34>
	if(flagButtonPressed[index] == 1) {
 80002c8:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <isButtonPressed+0x40>)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d0:	2b01      	cmp	r3, #1
 80002d2:	d106      	bne.n	80002e2 <isButtonPressed+0x32>
		flagButtonPressed[index] = 0;
 80002d4:	4a06      	ldr	r2, [pc, #24]	; (80002f0 <isButtonPressed+0x40>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	2100      	movs	r1, #0
 80002da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 80002de:	2301      	movs	r3, #1
 80002e0:	e000      	b.n	80002e4 <isButtonPressed+0x34>
	}
	return 0;
 80002e2:	2300      	movs	r3, #0
}
 80002e4:	4618      	mov	r0, r3
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bc80      	pop	{r7}
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	20000084 	.word	0x20000084

080002f4 <isButtonHold>:

int isButtonHold(int index) {
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	if(index < 0 || index > NUMS_OF_BUTTON) return 0;
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	db02      	blt.n	8000308 <isButtonHold+0x14>
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2b04      	cmp	r3, #4
 8000306:	dd01      	ble.n	800030c <isButtonHold+0x18>
 8000308:	2300      	movs	r3, #0
 800030a:	e008      	b.n	800031e <isButtonHold+0x2a>
	if(flagButtonHold[index] == 1) {
 800030c:	4a06      	ldr	r2, [pc, #24]	; (8000328 <isButtonHold+0x34>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d101      	bne.n	800031c <isButtonHold+0x28>
		return 1;
 8000318:	2301      	movs	r3, #1
 800031a:	e000      	b.n	800031e <isButtonHold+0x2a>
	}
	return 0;
 800031c:	2300      	movs	r3, #0
}
 800031e:	4618      	mov	r0, r3
 8000320:	370c      	adds	r7, #12
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	20000094 	.word	0x20000094

0800032c <incTime>:
int trafficTime[3] = {9,3,6};
int trafficRealTime[3];
int indexOfLight = REDVERFLAG;
int flag = 0;

void incTime(int index){
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
	switch(index){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2b02      	cmp	r3, #2
 8000338:	d015      	beq.n	8000366 <incTime+0x3a>
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2b02      	cmp	r3, #2
 800033e:	dc18      	bgt.n	8000372 <incTime+0x46>
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d003      	beq.n	800034e <incTime+0x22>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d006      	beq.n	800035a <incTime+0x2e>
 800034c:	e011      	b.n	8000372 <incTime+0x46>
		case RED_CHANGE: trafficTime[GREEN_CHANGE]++; break;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <incTime+0x64>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	3301      	adds	r3, #1
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <incTime+0x64>)
 8000356:	6093      	str	r3, [r2, #8]
 8000358:	e00b      	b.n	8000372 <incTime+0x46>
		case YELLOW_CHANGE: trafficTime[RED_CHANGE]++; break;
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <incTime+0x64>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	3301      	adds	r3, #1
 8000360:	4a0b      	ldr	r2, [pc, #44]	; (8000390 <incTime+0x64>)
 8000362:	6013      	str	r3, [r2, #0]
 8000364:	e005      	b.n	8000372 <incTime+0x46>
		case GREEN_CHANGE: trafficTime[RED_CHANGE]++; break;
 8000366:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <incTime+0x64>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	3301      	adds	r3, #1
 800036c:	4a08      	ldr	r2, [pc, #32]	; (8000390 <incTime+0x64>)
 800036e:	6013      	str	r3, [r2, #0]
 8000370:	bf00      	nop
	}
	trafficTime[index]++;
 8000372:	4a07      	ldr	r2, [pc, #28]	; (8000390 <incTime+0x64>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800037a:	1c5a      	adds	r2, r3, #1
 800037c:	4904      	ldr	r1, [pc, #16]	; (8000390 <incTime+0x64>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	2000002c 	.word	0x2000002c

08000394 <decTime>:
void decTime(int index){
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	switch(index){
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	d015      	beq.n	80003ce <decTime+0x3a>
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	dc18      	bgt.n	80003da <decTime+0x46>
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d003      	beq.n	80003b6 <decTime+0x22>
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d006      	beq.n	80003c2 <decTime+0x2e>
 80003b4:	e011      	b.n	80003da <decTime+0x46>
		case RED_CHANGE: trafficTime[GREEN_CHANGE]--; break;
 80003b6:	4b10      	ldr	r3, [pc, #64]	; (80003f8 <decTime+0x64>)
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <decTime+0x64>)
 80003be:	6093      	str	r3, [r2, #8]
 80003c0:	e00b      	b.n	80003da <decTime+0x46>
		case YELLOW_CHANGE: trafficTime[RED_CHANGE]--; break;
 80003c2:	4b0d      	ldr	r3, [pc, #52]	; (80003f8 <decTime+0x64>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a0b      	ldr	r2, [pc, #44]	; (80003f8 <decTime+0x64>)
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	e005      	b.n	80003da <decTime+0x46>
		case GREEN_CHANGE: trafficTime[RED_CHANGE]--; break;
 80003ce:	4b0a      	ldr	r3, [pc, #40]	; (80003f8 <decTime+0x64>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	3b01      	subs	r3, #1
 80003d4:	4a08      	ldr	r2, [pc, #32]	; (80003f8 <decTime+0x64>)
 80003d6:	6013      	str	r3, [r2, #0]
 80003d8:	bf00      	nop
	}
	trafficTime[index]--;
 80003da:	4a07      	ldr	r2, [pc, #28]	; (80003f8 <decTime+0x64>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e2:	1e5a      	subs	r2, r3, #1
 80003e4:	4904      	ldr	r1, [pc, #16]	; (80003f8 <decTime+0x64>)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	2000002c 	.word	0x2000002c

080003fc <translate>:

void translate(void){
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
	for(int i = 0; i < 3; i++){
 8000402:	2300      	movs	r3, #0
 8000404:	607b      	str	r3, [r7, #4]
 8000406:	e00e      	b.n	8000426 <translate+0x2a>
		trafficRealTime[i] = trafficTime[i] * 1000;
 8000408:	4a0b      	ldr	r2, [pc, #44]	; (8000438 <translate+0x3c>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000410:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000414:	fb03 f202 	mul.w	r2, r3, r2
 8000418:	4908      	ldr	r1, [pc, #32]	; (800043c <translate+0x40>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < 3; i++){
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	3301      	adds	r3, #1
 8000424:	607b      	str	r3, [r7, #4]
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	2b02      	cmp	r3, #2
 800042a:	dded      	ble.n	8000408 <translate+0xc>
	}
}
 800042c:	bf00      	nop
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	2000002c 	.word	0x2000002c
 800043c:	200000bc 	.word	0x200000bc

08000440 <fsm_button_displayTraffic>:

void fsm_button_displayTraffic(void){
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	switch(statusBTN){
 8000444:	4ba7      	ldr	r3, [pc, #668]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b06      	cmp	r3, #6
 800044a:	f200 8149 	bhi.w	80006e0 <fsm_button_displayTraffic+0x2a0>
 800044e:	a201      	add	r2, pc, #4	; (adr r2, 8000454 <fsm_button_displayTraffic+0x14>)
 8000450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000454:	08000471 	.word	0x08000471
 8000458:	08000485 	.word	0x08000485
 800045c:	080004c9 	.word	0x080004c9
 8000460:	080005d7 	.word	0x080005d7
 8000464:	080005e9 	.word	0x080005e9
 8000468:	080005fb 	.word	0x080005fb
 800046c:	080006a7 	.word	0x080006a7
	case INITBTN:
		currentStateVER = INIT;
 8000470:	4b9d      	ldr	r3, [pc, #628]	; (80006e8 <fsm_button_displayTraffic+0x2a8>)
 8000472:	2200      	movs	r2, #0
 8000474:	701a      	strb	r2, [r3, #0]
		currentStateHOR = INIT;
 8000476:	4b9d      	ldr	r3, [pc, #628]	; (80006ec <fsm_button_displayTraffic+0x2ac>)
 8000478:	2200      	movs	r2, #0
 800047a:	701a      	strb	r2, [r3, #0]
		statusBTN = NORMAL;
 800047c:	4b99      	ldr	r3, [pc, #612]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
		break;
 8000482:	e12d      	b.n	80006e0 <fsm_button_displayTraffic+0x2a0>
	case NORMAL:
		translate();
 8000484:	f7ff ffba 	bl	80003fc <translate>
		displayTraffic(trafficRealTime);
 8000488:	4899      	ldr	r0, [pc, #612]	; (80006f0 <fsm_button_displayTraffic+0x2b0>)
 800048a:	f000 fb81 	bl	8000b90 <displayTraffic>

		if(isButtonPressed(MODE_BTN)){
 800048e:	2000      	movs	r0, #0
 8000490:	f7ff ff0e 	bl	80002b0 <isButtonPressed>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d002      	beq.n	80004a0 <fsm_button_displayTraffic+0x60>
			statusBTN = MODE;
 800049a:	4b92      	ldr	r3, [pc, #584]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 800049c:	2202      	movs	r2, #2
 800049e:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonHold(MODE_BTN)){
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff ff27 	bl	80002f4 <isButtonHold>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <fsm_button_displayTraffic+0x72>
			statusBTN = HOLD_MODE;
 80004ac:	4b8d      	ldr	r3, [pc, #564]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80004ae:	2205      	movs	r2, #5
 80004b0:	701a      	strb	r2, [r3, #0]
		}
		if(isButtonPressed(PEDES_BTN)){
 80004b2:	2003      	movs	r0, #3
 80004b4:	f7ff fefc 	bl	80002b0 <isButtonPressed>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f000 8109 	beq.w	80006d2 <fsm_button_displayTraffic+0x292>
			statusBTN = PEDES;
 80004c0:	4b88      	ldr	r3, [pc, #544]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80004c2:	2206      	movs	r2, #6
 80004c4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80004c6:	e104      	b.n	80006d2 <fsm_button_displayTraffic+0x292>
	case MODE:
		setTimer(BLINK,10);
 80004c8:	210a      	movs	r1, #10
 80004ca:	2006      	movs	r0, #6
 80004cc:	f000 fe06 	bl	80010dc <setTimer>

		if(changeTimeState == CONFIRM){
 80004d0:	4b88      	ldr	r3, [pc, #544]	; (80006f4 <fsm_button_displayTraffic+0x2b4>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d131      	bne.n	800053c <fsm_button_displayTraffic+0xfc>
			if(timer_flag[BLINK]){
 80004d8:	4b87      	ldr	r3, [pc, #540]	; (80006f8 <fsm_button_displayTraffic+0x2b8>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d01f      	beq.n	8000520 <fsm_button_displayTraffic+0xe0>
				if(flag == 0){
 80004e0:	4b86      	ldr	r3, [pc, #536]	; (80006fc <fsm_button_displayTraffic+0x2bc>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d106      	bne.n	80004f6 <fsm_button_displayTraffic+0xb6>
					blinkyLight(RED);
 80004e8:	2001      	movs	r0, #1
 80004ea:	f000 fa55 	bl	8000998 <blinkyLight>
					flag = 1;
 80004ee:	4b83      	ldr	r3, [pc, #524]	; (80006fc <fsm_button_displayTraffic+0x2bc>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	e010      	b.n	8000518 <fsm_button_displayTraffic+0xd8>
				}else if(flag == 1){
 80004f6:	4b81      	ldr	r3, [pc, #516]	; (80006fc <fsm_button_displayTraffic+0x2bc>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d106      	bne.n	800050c <fsm_button_displayTraffic+0xcc>
					blinkyLight(YELLOW);
 80004fe:	2002      	movs	r0, #2
 8000500:	f000 fa4a 	bl	8000998 <blinkyLight>
					flag = 2;
 8000504:	4b7d      	ldr	r3, [pc, #500]	; (80006fc <fsm_button_displayTraffic+0x2bc>)
 8000506:	2202      	movs	r2, #2
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	e005      	b.n	8000518 <fsm_button_displayTraffic+0xd8>
				}else {
					blinkyLight(GREEN);
 800050c:	2003      	movs	r0, #3
 800050e:	f000 fa43 	bl	8000998 <blinkyLight>
					flag = 0;
 8000512:	4b7a      	ldr	r3, [pc, #488]	; (80006fc <fsm_button_displayTraffic+0x2bc>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
				}
				setTimer(BLINK,30);
 8000518:	211e      	movs	r1, #30
 800051a:	2006      	movs	r0, #6
 800051c:	f000 fdde 	bl	80010dc <setTimer>
			}

			if(isButtonPressed(MODE_BTN)){
 8000520:	2000      	movs	r0, #0
 8000522:	f7ff fec5 	bl	80002b0 <isButtonPressed>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	f000 80d4 	beq.w	80006d6 <fsm_button_displayTraffic+0x296>
				changeTimeState = RED_CHANGE;
 800052e:	4b71      	ldr	r3, [pc, #452]	; (80006f4 <fsm_button_displayTraffic+0x2b4>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
				statusBTN = INITBTN;
 8000534:	4b6b      	ldr	r3, [pc, #428]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
			}
			if(isButtonPressed(INC_BTN)) statusBTN = INC;
			if(isButtonPressed(DEC_BTN)) statusBTN = DEC;
		}

		break;
 800053a:	e0cc      	b.n	80006d6 <fsm_button_displayTraffic+0x296>
		blinkyLight(State);
 800053c:	4b70      	ldr	r3, [pc, #448]	; (8000700 <fsm_button_displayTraffic+0x2c0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f000 fa29 	bl	8000998 <blinkyLight>
			if(isButtonPressed(MODE_BTN)){
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff feb2 	bl	80002b0 <isButtonPressed>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d02c      	beq.n	80005ac <fsm_button_displayTraffic+0x16c>
				switch(changeTimeState){
 8000552:	4b68      	ldr	r3, [pc, #416]	; (80006f4 <fsm_button_displayTraffic+0x2b4>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b03      	cmp	r3, #3
 8000558:	d829      	bhi.n	80005ae <fsm_button_displayTraffic+0x16e>
 800055a:	a201      	add	r2, pc, #4	; (adr r2, 8000560 <fsm_button_displayTraffic+0x120>)
 800055c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000560:	08000571 	.word	0x08000571
 8000564:	08000585 	.word	0x08000585
 8000568:	08000599 	.word	0x08000599
 800056c:	080005af 	.word	0x080005af
						State = YELLOW;
 8000570:	4b63      	ldr	r3, [pc, #396]	; (8000700 <fsm_button_displayTraffic+0x2c0>)
 8000572:	2202      	movs	r2, #2
 8000574:	701a      	strb	r2, [r3, #0]
						indexOfLight = YELLOWVERFLAG;
 8000576:	4b63      	ldr	r3, [pc, #396]	; (8000704 <fsm_button_displayTraffic+0x2c4>)
 8000578:	2201      	movs	r2, #1
 800057a:	601a      	str	r2, [r3, #0]
						changeTimeState = YELLOW_CHANGE;
 800057c:	4b5d      	ldr	r3, [pc, #372]	; (80006f4 <fsm_button_displayTraffic+0x2b4>)
 800057e:	2201      	movs	r2, #1
 8000580:	701a      	strb	r2, [r3, #0]
						break;
 8000582:	e014      	b.n	80005ae <fsm_button_displayTraffic+0x16e>
						State = GREEN;
 8000584:	4b5e      	ldr	r3, [pc, #376]	; (8000700 <fsm_button_displayTraffic+0x2c0>)
 8000586:	2203      	movs	r2, #3
 8000588:	701a      	strb	r2, [r3, #0]
						indexOfLight = GREENVERFLAG;
 800058a:	4b5e      	ldr	r3, [pc, #376]	; (8000704 <fsm_button_displayTraffic+0x2c4>)
 800058c:	2202      	movs	r2, #2
 800058e:	601a      	str	r2, [r3, #0]
						changeTimeState = GREEN_CHANGE;
 8000590:	4b58      	ldr	r3, [pc, #352]	; (80006f4 <fsm_button_displayTraffic+0x2b4>)
 8000592:	2202      	movs	r2, #2
 8000594:	701a      	strb	r2, [r3, #0]
						break;
 8000596:	e00a      	b.n	80005ae <fsm_button_displayTraffic+0x16e>
						State = RED;
 8000598:	4b59      	ldr	r3, [pc, #356]	; (8000700 <fsm_button_displayTraffic+0x2c0>)
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
						indexOfLight = REDVERFLAG;
 800059e:	4b59      	ldr	r3, [pc, #356]	; (8000704 <fsm_button_displayTraffic+0x2c4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
						changeTimeState = CONFIRM;
 80005a4:	4b53      	ldr	r3, [pc, #332]	; (80006f4 <fsm_button_displayTraffic+0x2b4>)
 80005a6:	2203      	movs	r2, #3
 80005a8:	701a      	strb	r2, [r3, #0]
						break;
 80005aa:	e000      	b.n	80005ae <fsm_button_displayTraffic+0x16e>
			}
 80005ac:	bf00      	nop
			if(isButtonPressed(INC_BTN)) statusBTN = INC;
 80005ae:	2001      	movs	r0, #1
 80005b0:	f7ff fe7e 	bl	80002b0 <isButtonPressed>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d002      	beq.n	80005c0 <fsm_button_displayTraffic+0x180>
 80005ba:	4b4a      	ldr	r3, [pc, #296]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80005bc:	2203      	movs	r2, #3
 80005be:	701a      	strb	r2, [r3, #0]
			if(isButtonPressed(DEC_BTN)) statusBTN = DEC;
 80005c0:	2002      	movs	r0, #2
 80005c2:	f7ff fe75 	bl	80002b0 <isButtonPressed>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	f000 8084 	beq.w	80006d6 <fsm_button_displayTraffic+0x296>
 80005ce:	4b45      	ldr	r3, [pc, #276]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	701a      	strb	r2, [r3, #0]
		break;
 80005d4:	e07f      	b.n	80006d6 <fsm_button_displayTraffic+0x296>
	case INC:
		incTime(indexOfLight);
 80005d6:	4b4b      	ldr	r3, [pc, #300]	; (8000704 <fsm_button_displayTraffic+0x2c4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f7ff fea6 	bl	800032c <incTime>
		statusBTN = MODE;
 80005e0:	4b40      	ldr	r3, [pc, #256]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80005e2:	2202      	movs	r2, #2
 80005e4:	701a      	strb	r2, [r3, #0]
		break;
 80005e6:	e07b      	b.n	80006e0 <fsm_button_displayTraffic+0x2a0>
	case DEC:
		decTime(indexOfLight);
 80005e8:	4b46      	ldr	r3, [pc, #280]	; (8000704 <fsm_button_displayTraffic+0x2c4>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f7ff fed1 	bl	8000394 <decTime>
		statusBTN = MODE;
 80005f2:	4b3c      	ldr	r3, [pc, #240]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	701a      	strb	r2, [r3, #0]
		break;
 80005f8:	e072      	b.n	80006e0 <fsm_button_displayTraffic+0x2a0>
	case HOLD_MODE:

		switch(manualDisplay){
 80005fa:	4b43      	ldr	r3, [pc, #268]	; (8000708 <fsm_button_displayTraffic+0x2c8>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b03      	cmp	r3, #3
 8000600:	d825      	bhi.n	800064e <fsm_button_displayTraffic+0x20e>
 8000602:	a201      	add	r2, pc, #4	; (adr r2, 8000608 <fsm_button_displayTraffic+0x1c8>)
 8000604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000608:	08000619 	.word	0x08000619
 800060c:	0800062b 	.word	0x0800062b
 8000610:	0800063d 	.word	0x0800063d
 8000614:	0800064f 	.word	0x0800064f
		case RED_CHANGE:
			turnOnLight(RED,VER);
 8000618:	2101      	movs	r1, #1
 800061a:	2001      	movs	r0, #1
 800061c:	f000 f904 	bl	8000828 <turnOnLight>
			turnOnLight(RED,HOR);
 8000620:	2100      	movs	r1, #0
 8000622:	2001      	movs	r0, #1
 8000624:	f000 f900 	bl	8000828 <turnOnLight>
			break;
 8000628:	e011      	b.n	800064e <fsm_button_displayTraffic+0x20e>
		case YELLOW_CHANGE:
			turnOnLight(YELLOW,VER);
 800062a:	2101      	movs	r1, #1
 800062c:	2002      	movs	r0, #2
 800062e:	f000 f8fb 	bl	8000828 <turnOnLight>
			turnOnLight(YELLOW,HOR);
 8000632:	2100      	movs	r1, #0
 8000634:	2002      	movs	r0, #2
 8000636:	f000 f8f7 	bl	8000828 <turnOnLight>
			break;
 800063a:	e008      	b.n	800064e <fsm_button_displayTraffic+0x20e>
		case GREEN_CHANGE:
			turnOnLight(GREEN,VER);
 800063c:	2101      	movs	r1, #1
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f8f2 	bl	8000828 <turnOnLight>
			turnOnLight(GREEN,HOR);
 8000644:	2100      	movs	r1, #0
 8000646:	2003      	movs	r0, #3
 8000648:	f000 f8ee 	bl	8000828 <turnOnLight>
			break;
 800064c:	bf00      	nop
		case CONFIRM: break;
		}

		if(isButtonPressed(MODE_BTN)){
 800064e:	2000      	movs	r0, #0
 8000650:	f7ff fe2e 	bl	80002b0 <isButtonPressed>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d01a      	beq.n	8000690 <fsm_button_displayTraffic+0x250>
			switch(manualDisplay){
 800065a:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <fsm_button_displayTraffic+0x2c8>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2b03      	cmp	r3, #3
 8000660:	d817      	bhi.n	8000692 <fsm_button_displayTraffic+0x252>
 8000662:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <fsm_button_displayTraffic+0x228>)
 8000664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000668:	08000679 	.word	0x08000679
 800066c:	08000681 	.word	0x08000681
 8000670:	08000689 	.word	0x08000689
 8000674:	08000693 	.word	0x08000693
				case RED_CHANGE: manualDisplay = YELLOW_CHANGE; break;
 8000678:	4b23      	ldr	r3, [pc, #140]	; (8000708 <fsm_button_displayTraffic+0x2c8>)
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
 800067e:	e008      	b.n	8000692 <fsm_button_displayTraffic+0x252>
				case YELLOW_CHANGE: manualDisplay = GREEN_CHANGE; break;
 8000680:	4b21      	ldr	r3, [pc, #132]	; (8000708 <fsm_button_displayTraffic+0x2c8>)
 8000682:	2202      	movs	r2, #2
 8000684:	701a      	strb	r2, [r3, #0]
 8000686:	e004      	b.n	8000692 <fsm_button_displayTraffic+0x252>
				case GREEN_CHANGE: manualDisplay = RED_CHANGE; break;
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <fsm_button_displayTraffic+0x2c8>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]
 800068e:	e000      	b.n	8000692 <fsm_button_displayTraffic+0x252>
				case CONFIRM: break;
			}
		}
 8000690:	bf00      	nop

		if(isButtonHold(MODE_BTN)){
 8000692:	2000      	movs	r0, #0
 8000694:	f7ff fe2e 	bl	80002f4 <isButtonHold>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d01d      	beq.n	80006da <fsm_button_displayTraffic+0x29a>
			statusBTN = INITBTN;
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006a4:	e019      	b.n	80006da <fsm_button_displayTraffic+0x29a>
	case PEDES:
		turnOnPedes();
 80006a6:	f000 f89f 	bl	80007e8 <turnOnPedes>
		turnOnLight(GREEN,VER);
 80006aa:	2101      	movs	r1, #1
 80006ac:	2003      	movs	r0, #3
 80006ae:	f000 f8bb 	bl	8000828 <turnOnLight>
		turnOnLight(GREEN,HOR);
 80006b2:	2100      	movs	r1, #0
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f8b7 	bl	8000828 <turnOnLight>
		if (isButtonPressed(PEDES_BTN)){
 80006ba:	2003      	movs	r0, #3
 80006bc:	f7ff fdf8 	bl	80002b0 <isButtonPressed>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d00b      	beq.n	80006de <fsm_button_displayTraffic+0x29e>
			clearPedes();
 80006c6:	f000 f86f 	bl	80007a8 <clearPedes>
			statusBTN= INITBTN;
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <fsm_button_displayTraffic+0x2a4>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	701a      	strb	r2, [r3, #0]
		}
		break;
 80006d0:	e005      	b.n	80006de <fsm_button_displayTraffic+0x29e>
		break;
 80006d2:	bf00      	nop
 80006d4:	e004      	b.n	80006e0 <fsm_button_displayTraffic+0x2a0>
		break;
 80006d6:	bf00      	nop
 80006d8:	e002      	b.n	80006e0 <fsm_button_displayTraffic+0x2a0>
		break;
 80006da:	bf00      	nop
 80006dc:	e000      	b.n	80006e0 <fsm_button_displayTraffic+0x2a0>
		break;
 80006de:	bf00      	nop
	}
}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000b7 	.word	0x200000b7
 80006e8:	200000b5 	.word	0x200000b5
 80006ec:	200000b6 	.word	0x200000b6
 80006f0:	200000bc 	.word	0x200000bc
 80006f4:	200000b8 	.word	0x200000b8
 80006f8:	20000180 	.word	0x20000180
 80006fc:	200000cc 	.word	0x200000cc
 8000700:	20000028 	.word	0x20000028
 8000704:	200000c8 	.word	0x200000c8
 8000708:	200000b9 	.word	0x200000b9

0800070c <clearLight>:
		D7_Pin
};

unsigned char blink = 0;

void clearLight(enum flow direction){
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d002      	beq.n	8000722 <clearLight+0x16>
 800071c:	2b01      	cmp	r3, #1
 800071e:	d016      	beq.n	800074e <clearLight+0x42>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
			HAL_GPIO_WritePin(LedPortVER[i],LedPinVER[i],0);
		}
		break;
	}
}
 8000720:	e02b      	b.n	800077a <clearLight+0x6e>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 8000722:	2300      	movs	r3, #0
 8000724:	60fb      	str	r3, [r7, #12]
 8000726:	e00e      	b.n	8000746 <clearLight+0x3a>
			HAL_GPIO_WritePin(LedPortHOR[i],LedPinHOR[i],0);
 8000728:	4a16      	ldr	r2, [pc, #88]	; (8000784 <clearLight+0x78>)
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000730:	4a15      	ldr	r2, [pc, #84]	; (8000788 <clearLight+0x7c>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	f001 f8f7 	bl	800192e <HAL_GPIO_WritePin>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	3301      	adds	r3, #1
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]
 8000748:	2b01      	cmp	r3, #1
 800074a:	dded      	ble.n	8000728 <clearLight+0x1c>
		break;
 800074c:	e015      	b.n	800077a <clearLight+0x6e>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 800074e:	2300      	movs	r3, #0
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	e00e      	b.n	8000772 <clearLight+0x66>
			HAL_GPIO_WritePin(LedPortVER[i],LedPinVER[i],0);
 8000754:	4a0d      	ldr	r2, [pc, #52]	; (800078c <clearLight+0x80>)
 8000756:	68bb      	ldr	r3, [r7, #8]
 8000758:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <clearLight+0x84>)
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000764:	2200      	movs	r2, #0
 8000766:	4619      	mov	r1, r3
 8000768:	f001 f8e1 	bl	800192e <HAL_GPIO_WritePin>
		for(int i = 0 ; i < NUMS_PORT / 2; i++){
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b01      	cmp	r3, #1
 8000776:	dded      	ble.n	8000754 <clearLight+0x48>
		break;
 8000778:	bf00      	nop
}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000040 	.word	0x20000040
 8000788:	2000004c 	.word	0x2000004c
 800078c:	20000038 	.word	0x20000038
 8000790:	20000048 	.word	0x20000048

08000794 <clearTrafficLight>:

void clearTrafficLight(void){
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	clearLight(HOR);
 8000798:	2000      	movs	r0, #0
 800079a:	f7ff ffb7 	bl	800070c <clearLight>
	clearLight(VER);
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff ffb4 	bl	800070c <clearLight>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <clearPedes>:

void clearPedes(void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LedPortPedes[0],LedPinPedes[0],0);
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <clearPedes+0x34>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a0b      	ldr	r2, [pc, #44]	; (80007e0 <clearPedes+0x38>)
 80007b2:	8811      	ldrh	r1, [r2, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 f8b9 	bl	800192e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedPortPedes[1],LedPinPedes[1],0);
 80007bc:	4b07      	ldr	r3, [pc, #28]	; (80007dc <clearPedes+0x34>)
 80007be:	685b      	ldr	r3, [r3, #4]
 80007c0:	4a07      	ldr	r2, [pc, #28]	; (80007e0 <clearPedes+0x38>)
 80007c2:	8851      	ldrh	r1, [r2, #2]
 80007c4:	2200      	movs	r2, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f001 f8b1 	bl	800192e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SoundPort,SoundPin,0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2140      	movs	r1, #64	; 0x40
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <clearPedes+0x3c>)
 80007d2:	f001 f8ac 	bl	800192e <HAL_GPIO_WritePin>
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000050 	.word	0x20000050
 80007e0:	20000058 	.word	0x20000058
 80007e4:	40010800 	.word	0x40010800

080007e8 <turnOnPedes>:

void turnOnPedes(void){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LedPortPedes[0],LedPinPedes[0],0);
 80007ec:	4b0b      	ldr	r3, [pc, #44]	; (800081c <turnOnPedes+0x34>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0b      	ldr	r2, [pc, #44]	; (8000820 <turnOnPedes+0x38>)
 80007f2:	8811      	ldrh	r1, [r2, #0]
 80007f4:	2200      	movs	r2, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f001 f899 	bl	800192e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LedPortPedes[1],LedPinPedes[1],1);
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <turnOnPedes+0x34>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	4a07      	ldr	r2, [pc, #28]	; (8000820 <turnOnPedes+0x38>)
 8000802:	8851      	ldrh	r1, [r2, #2]
 8000804:	2201      	movs	r2, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f001 f891 	bl	800192e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SoundPort,SoundPin,1);
 800080c:	2201      	movs	r2, #1
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	4804      	ldr	r0, [pc, #16]	; (8000824 <turnOnPedes+0x3c>)
 8000812:	f001 f88c 	bl	800192e <HAL_GPIO_WritePin>
}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000050 	.word	0x20000050
 8000820:	20000058 	.word	0x20000058
 8000824:	40010800 	.word	0x40010800

08000828 <turnOnLight>:

void turnOnLight(enum StateLight currentState, enum flow direction){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	460a      	mov	r2, r1
 8000832:	71fb      	strb	r3, [r7, #7]
 8000834:	4613      	mov	r3, r2
 8000836:	71bb      	strb	r3, [r7, #6]
	switch(direction){
 8000838:	79bb      	ldrb	r3, [r7, #6]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <turnOnLight+0x1c>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d04e      	beq.n	80008e0 <turnOnLight+0xb8>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],1);
			break;
		}
		break;
	}
}
 8000842:	e09c      	b.n	800097e <turnOnLight+0x156>
		switch(currentState){
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	2b03      	cmp	r3, #3
 8000848:	f200 8096 	bhi.w	8000978 <turnOnLight+0x150>
 800084c:	a201      	add	r2, pc, #4	; (adr r2, 8000854 <turnOnLight+0x2c>)
 800084e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000852:	bf00      	nop
 8000854:	080008dd 	.word	0x080008dd
 8000858:	08000865 	.word	0x08000865
 800085c:	0800088d 	.word	0x0800088d
 8000860:	080008b5 	.word	0x080008b5
			clearLight(HOR);
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff ff51 	bl	800070c <clearLight>
			HAL_GPIO_WritePin(LedPortHOR[0],LedPinHOR[0],1);
 800086a:	4b47      	ldr	r3, [pc, #284]	; (8000988 <turnOnLight+0x160>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a47      	ldr	r2, [pc, #284]	; (800098c <turnOnLight+0x164>)
 8000870:	8811      	ldrh	r1, [r2, #0]
 8000872:	2201      	movs	r2, #1
 8000874:	4618      	mov	r0, r3
 8000876:	f001 f85a 	bl	800192e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortHOR[1],LedPinHOR[1],0);
 800087a:	4b43      	ldr	r3, [pc, #268]	; (8000988 <turnOnLight+0x160>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	4a43      	ldr	r2, [pc, #268]	; (800098c <turnOnLight+0x164>)
 8000880:	8851      	ldrh	r1, [r2, #2]
 8000882:	2200      	movs	r2, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f001 f852 	bl	800192e <HAL_GPIO_WritePin>
			break;
 800088a:	e028      	b.n	80008de <turnOnLight+0xb6>
			clearLight(HOR);
 800088c:	2000      	movs	r0, #0
 800088e:	f7ff ff3d 	bl	800070c <clearLight>
			HAL_GPIO_WritePin(LedPortHOR[0],LedPinHOR[0],1);
 8000892:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <turnOnLight+0x160>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a3d      	ldr	r2, [pc, #244]	; (800098c <turnOnLight+0x164>)
 8000898:	8811      	ldrh	r1, [r2, #0]
 800089a:	2201      	movs	r2, #1
 800089c:	4618      	mov	r0, r3
 800089e:	f001 f846 	bl	800192e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortHOR[1],LedPinHOR[1],1);
 80008a2:	4b39      	ldr	r3, [pc, #228]	; (8000988 <turnOnLight+0x160>)
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	4a39      	ldr	r2, [pc, #228]	; (800098c <turnOnLight+0x164>)
 80008a8:	8851      	ldrh	r1, [r2, #2]
 80008aa:	2201      	movs	r2, #1
 80008ac:	4618      	mov	r0, r3
 80008ae:	f001 f83e 	bl	800192e <HAL_GPIO_WritePin>
			break;
 80008b2:	e014      	b.n	80008de <turnOnLight+0xb6>
			clearLight(HOR);
 80008b4:	2000      	movs	r0, #0
 80008b6:	f7ff ff29 	bl	800070c <clearLight>
			HAL_GPIO_WritePin(LedPortHOR[0],LedPinHOR[0],0);
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <turnOnLight+0x160>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a33      	ldr	r2, [pc, #204]	; (800098c <turnOnLight+0x164>)
 80008c0:	8811      	ldrh	r1, [r2, #0]
 80008c2:	2200      	movs	r2, #0
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 f832 	bl	800192e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortHOR[1],LedPinHOR[1],1);
 80008ca:	4b2f      	ldr	r3, [pc, #188]	; (8000988 <turnOnLight+0x160>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	4a2f      	ldr	r2, [pc, #188]	; (800098c <turnOnLight+0x164>)
 80008d0:	8851      	ldrh	r1, [r2, #2]
 80008d2:	2201      	movs	r2, #1
 80008d4:	4618      	mov	r0, r3
 80008d6:	f001 f82a 	bl	800192e <HAL_GPIO_WritePin>
			break;
 80008da:	e000      	b.n	80008de <turnOnLight+0xb6>
		case INIT: break;
 80008dc:	bf00      	nop
		break;
 80008de:	e04b      	b.n	8000978 <turnOnLight+0x150>
		switch(currentState){
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	2b03      	cmp	r3, #3
 80008e4:	d84a      	bhi.n	800097c <turnOnLight+0x154>
 80008e6:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <turnOnLight+0xc4>)
 80008e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ec:	08000975 	.word	0x08000975
 80008f0:	080008fd 	.word	0x080008fd
 80008f4:	08000925 	.word	0x08000925
 80008f8:	0800094d 	.word	0x0800094d
			clearLight(VER);
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff ff05 	bl	800070c <clearLight>
			HAL_GPIO_WritePin(LedPortVER[0],LedPinVER[0],1);
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <turnOnLight+0x168>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a23      	ldr	r2, [pc, #140]	; (8000994 <turnOnLight+0x16c>)
 8000908:	8811      	ldrh	r1, [r2, #0]
 800090a:	2201      	movs	r2, #1
 800090c:	4618      	mov	r0, r3
 800090e:	f001 f80e 	bl	800192e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],0);
 8000912:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <turnOnLight+0x168>)
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <turnOnLight+0x16c>)
 8000918:	8851      	ldrh	r1, [r2, #2]
 800091a:	2200      	movs	r2, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f806 	bl	800192e <HAL_GPIO_WritePin>
			break;
 8000922:	e028      	b.n	8000976 <turnOnLight+0x14e>
			clearLight(VER);
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff fef1 	bl	800070c <clearLight>
			HAL_GPIO_WritePin(LedPortVER[0],LedPinVER[0],1);
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <turnOnLight+0x168>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a19      	ldr	r2, [pc, #100]	; (8000994 <turnOnLight+0x16c>)
 8000930:	8811      	ldrh	r1, [r2, #0]
 8000932:	2201      	movs	r2, #1
 8000934:	4618      	mov	r0, r3
 8000936:	f000 fffa 	bl	800192e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],1);
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <turnOnLight+0x168>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a15      	ldr	r2, [pc, #84]	; (8000994 <turnOnLight+0x16c>)
 8000940:	8851      	ldrh	r1, [r2, #2]
 8000942:	2201      	movs	r2, #1
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fff2 	bl	800192e <HAL_GPIO_WritePin>
			break;
 800094a:	e014      	b.n	8000976 <turnOnLight+0x14e>
			clearLight(VER);
 800094c:	2001      	movs	r0, #1
 800094e:	f7ff fedd 	bl	800070c <clearLight>
			HAL_GPIO_WritePin(LedPortVER[0],LedPinVER[0],0);
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <turnOnLight+0x168>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0f      	ldr	r2, [pc, #60]	; (8000994 <turnOnLight+0x16c>)
 8000958:	8811      	ldrh	r1, [r2, #0]
 800095a:	2200      	movs	r2, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f000 ffe6 	bl	800192e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LedPortVER[1],LedPinVER[1],1);
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <turnOnLight+0x168>)
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <turnOnLight+0x16c>)
 8000968:	8851      	ldrh	r1, [r2, #2]
 800096a:	2201      	movs	r2, #1
 800096c:	4618      	mov	r0, r3
 800096e:	f000 ffde 	bl	800192e <HAL_GPIO_WritePin>
			break;
 8000972:	e000      	b.n	8000976 <turnOnLight+0x14e>
		case INIT: break;
 8000974:	bf00      	nop
		break;
 8000976:	e001      	b.n	800097c <turnOnLight+0x154>
		break;
 8000978:	bf00      	nop
 800097a:	e000      	b.n	800097e <turnOnLight+0x156>
		break;
 800097c:	bf00      	nop
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	20000040 	.word	0x20000040
 800098c:	2000004c 	.word	0x2000004c
 8000990:	20000038 	.word	0x20000038
 8000994:	20000048 	.word	0x20000048

08000998 <blinkyLight>:

void blinkyLight(enum StateLight currentState){
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	if(timer_flag[BLINK]){
 80009a2:	4b12      	ldr	r3, [pc, #72]	; (80009ec <blinkyLight+0x54>)
 80009a4:	699b      	ldr	r3, [r3, #24]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d01b      	beq.n	80009e2 <blinkyLight+0x4a>
		if(blink){
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <blinkyLight+0x58>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d005      	beq.n	80009be <blinkyLight+0x26>
			clearTrafficLight();
 80009b2:	f7ff feef 	bl	8000794 <clearTrafficLight>
			blink = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <blinkyLight+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]
 80009bc:	e00c      	b.n	80009d8 <blinkyLight+0x40>
		}
		else{
			turnOnLight(currentState,VER);
 80009be:	79fb      	ldrb	r3, [r7, #7]
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff ff30 	bl	8000828 <turnOnLight>
			turnOnLight(currentState,HOR);
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	2100      	movs	r1, #0
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff2b 	bl	8000828 <turnOnLight>
			blink = 1;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <blinkyLight+0x58>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	701a      	strb	r2, [r3, #0]
		}
		setTimer(BLINK,500);
 80009d8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80009dc:	2006      	movs	r0, #6
 80009de:	f000 fb7d 	bl	80010dc <setTimer>
	}
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000180 	.word	0x20000180
 80009f0:	200000d0 	.word	0x200000d0

080009f4 <displayTrafficLight>:

void displayTrafficLight(enum flow direction, int * trafficTime){
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
	switch(direction){
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <displayTrafficLight+0x18>
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d05a      	beq.n	8000ac0 <displayTrafficLight+0xcc>
			}
			break;
		}
		break;
	}
}
 8000a0a:	e0b7      	b.n	8000b7c <displayTrafficLight+0x188>
		switch(currentStateHOR){
 8000a0c:	4b5d      	ldr	r3, [pc, #372]	; (8000b84 <displayTrafficLight+0x190>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	f200 80b0 	bhi.w	8000b76 <displayTrafficLight+0x182>
 8000a16:	a201      	add	r2, pc, #4	; (adr r2, 8000a1c <displayTrafficLight+0x28>)
 8000a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a1c:	08000a2d 	.word	0x08000a2d
 8000a20:	08000a45 	.word	0x08000a45
 8000a24:	08000a6b 	.word	0x08000a6b
 8000a28:	08000a8f 	.word	0x08000a8f
			clearTrafficLight();
 8000a2c:	f7ff feb2 	bl	8000794 <clearTrafficLight>
			setTimer(HOR,trafficTime[REDHORFLAG - 3]);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	2000      	movs	r0, #0
 8000a38:	f000 fb50 	bl	80010dc <setTimer>
			currentStateHOR = RED;
 8000a3c:	4b51      	ldr	r3, [pc, #324]	; (8000b84 <displayTrafficLight+0x190>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
			break;
 8000a42:	e03c      	b.n	8000abe <displayTrafficLight+0xca>
			turnOnLight(RED,HOR);
 8000a44:	2100      	movs	r1, #0
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff feee 	bl	8000828 <turnOnLight>
			if(timer_flag[HOR]){
 8000a4c:	4b4e      	ldr	r3, [pc, #312]	; (8000b88 <displayTrafficLight+0x194>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d02f      	beq.n	8000ab4 <displayTrafficLight+0xc0>
				currentStateHOR = GREEN;
 8000a54:	4b4b      	ldr	r3, [pc, #300]	; (8000b84 <displayTrafficLight+0x190>)
 8000a56:	2203      	movs	r2, #3
 8000a58:	701a      	strb	r2, [r3, #0]
				setTimer(HOR,trafficTime[GREENHORFLAG - 3]);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	3308      	adds	r3, #8
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4619      	mov	r1, r3
 8000a62:	2000      	movs	r0, #0
 8000a64:	f000 fb3a 	bl	80010dc <setTimer>
			break;
 8000a68:	e024      	b.n	8000ab4 <displayTrafficLight+0xc0>
			turnOnLight(YELLOW,HOR);
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	2002      	movs	r0, #2
 8000a6e:	f7ff fedb 	bl	8000828 <turnOnLight>
			if(timer_flag[HOR]){
 8000a72:	4b45      	ldr	r3, [pc, #276]	; (8000b88 <displayTrafficLight+0x194>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d01e      	beq.n	8000ab8 <displayTrafficLight+0xc4>
				currentStateHOR = RED;
 8000a7a:	4b42      	ldr	r3, [pc, #264]	; (8000b84 <displayTrafficLight+0x190>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
				setTimer(HOR,trafficTime[REDHORFLAG - 3]);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4619      	mov	r1, r3
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 fb28 	bl	80010dc <setTimer>
			break;
 8000a8c:	e014      	b.n	8000ab8 <displayTrafficLight+0xc4>
			turnOnLight(GREEN,HOR);
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2003      	movs	r0, #3
 8000a92:	f7ff fec9 	bl	8000828 <turnOnLight>
			if(timer_flag[HOR]){
 8000a96:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <displayTrafficLight+0x194>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d00e      	beq.n	8000abc <displayTrafficLight+0xc8>
				currentStateHOR = YELLOW;
 8000a9e:	4b39      	ldr	r3, [pc, #228]	; (8000b84 <displayTrafficLight+0x190>)
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	701a      	strb	r2, [r3, #0]
				setTimer(HOR, trafficTime[YELLOWHORFLAG - 3]);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	3304      	adds	r3, #4
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4619      	mov	r1, r3
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fb15 	bl	80010dc <setTimer>
			break;
 8000ab2:	e003      	b.n	8000abc <displayTrafficLight+0xc8>
			break;
 8000ab4:	bf00      	nop
 8000ab6:	e05e      	b.n	8000b76 <displayTrafficLight+0x182>
			break;
 8000ab8:	bf00      	nop
 8000aba:	e05c      	b.n	8000b76 <displayTrafficLight+0x182>
			break;
 8000abc:	bf00      	nop
		break;
 8000abe:	e05a      	b.n	8000b76 <displayTrafficLight+0x182>
		switch(currentStateVER){
 8000ac0:	4b32      	ldr	r3, [pc, #200]	; (8000b8c <displayTrafficLight+0x198>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	2b03      	cmp	r3, #3
 8000ac6:	d858      	bhi.n	8000b7a <displayTrafficLight+0x186>
 8000ac8:	a201      	add	r2, pc, #4	; (adr r2, 8000ad0 <displayTrafficLight+0xdc>)
 8000aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ace:	bf00      	nop
 8000ad0:	08000ae1 	.word	0x08000ae1
 8000ad4:	08000afb 	.word	0x08000afb
 8000ad8:	08000b21 	.word	0x08000b21
 8000adc:	08000b45 	.word	0x08000b45
			clearTrafficLight();
 8000ae0:	f7ff fe58 	bl	8000794 <clearTrafficLight>
			setTimer(VER,trafficTime[GREENVERFLAG]);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	3308      	adds	r3, #8
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	2001      	movs	r0, #1
 8000aee:	f000 faf5 	bl	80010dc <setTimer>
			currentStateVER = GREEN;
 8000af2:	4b26      	ldr	r3, [pc, #152]	; (8000b8c <displayTrafficLight+0x198>)
 8000af4:	2203      	movs	r2, #3
 8000af6:	701a      	strb	r2, [r3, #0]
			break;
 8000af8:	e03c      	b.n	8000b74 <displayTrafficLight+0x180>
			turnOnLight(RED,VER);
 8000afa:	2101      	movs	r1, #1
 8000afc:	2001      	movs	r0, #1
 8000afe:	f7ff fe93 	bl	8000828 <turnOnLight>
			if(timer_flag[VER]){
 8000b02:	4b21      	ldr	r3, [pc, #132]	; (8000b88 <displayTrafficLight+0x194>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d02f      	beq.n	8000b6a <displayTrafficLight+0x176>
				currentStateVER = GREEN;
 8000b0a:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <displayTrafficLight+0x198>)
 8000b0c:	2203      	movs	r2, #3
 8000b0e:	701a      	strb	r2, [r3, #0]
				setTimer(VER,trafficTime[GREENVERFLAG]);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	3308      	adds	r3, #8
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	2001      	movs	r0, #1
 8000b1a:	f000 fadf 	bl	80010dc <setTimer>
			break;
 8000b1e:	e024      	b.n	8000b6a <displayTrafficLight+0x176>
			turnOnLight(YELLOW,VER);
 8000b20:	2101      	movs	r1, #1
 8000b22:	2002      	movs	r0, #2
 8000b24:	f7ff fe80 	bl	8000828 <turnOnLight>
			if(timer_flag[VER]){
 8000b28:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <displayTrafficLight+0x194>)
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d01e      	beq.n	8000b6e <displayTrafficLight+0x17a>
				currentStateVER = RED;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <displayTrafficLight+0x198>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	701a      	strb	r2, [r3, #0]
				setTimer(VER,trafficTime[REDVERFLAG]);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f000 facd 	bl	80010dc <setTimer>
			break;
 8000b42:	e014      	b.n	8000b6e <displayTrafficLight+0x17a>
			turnOnLight(GREEN,VER);
 8000b44:	2101      	movs	r1, #1
 8000b46:	2003      	movs	r0, #3
 8000b48:	f7ff fe6e 	bl	8000828 <turnOnLight>
			if(timer_flag[VER]){
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	; (8000b88 <displayTrafficLight+0x194>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d00e      	beq.n	8000b72 <displayTrafficLight+0x17e>
				setTimer(VER,trafficTime[YELLOWVERFLAG]);
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	3304      	adds	r3, #4
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f000 fabd 	bl	80010dc <setTimer>
				currentStateVER = YELLOW;
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <displayTrafficLight+0x198>)
 8000b64:	2202      	movs	r2, #2
 8000b66:	701a      	strb	r2, [r3, #0]
			break;
 8000b68:	e003      	b.n	8000b72 <displayTrafficLight+0x17e>
			break;
 8000b6a:	bf00      	nop
 8000b6c:	e005      	b.n	8000b7a <displayTrafficLight+0x186>
			break;
 8000b6e:	bf00      	nop
 8000b70:	e003      	b.n	8000b7a <displayTrafficLight+0x186>
			break;
 8000b72:	bf00      	nop
		break;
 8000b74:	e001      	b.n	8000b7a <displayTrafficLight+0x186>
		break;
 8000b76:	bf00      	nop
 8000b78:	e000      	b.n	8000b7c <displayTrafficLight+0x188>
		break;
 8000b7a:	bf00      	nop
}
 8000b7c:	bf00      	nop
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200000b6 	.word	0x200000b6
 8000b88:	20000180 	.word	0x20000180
 8000b8c:	200000b5 	.word	0x200000b5

08000b90 <displayTraffic>:

void displayTraffic(int * timeTraffic){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	displayTrafficLight(VER, timeTraffic);
 8000b98:	6879      	ldr	r1, [r7, #4]
 8000b9a:	2001      	movs	r0, #1
 8000b9c:	f7ff ff2a 	bl	80009f4 <displayTrafficLight>
	displayTrafficLight(HOR, timeTraffic);
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff ff26 	bl	80009f4 <displayTrafficLight>
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <HAL_UART_RxCpltCallback+0x5c>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d11f      	bne.n	8000c02 <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Transmit(&huart2, &temp, 1, 50);
 8000bc2:	2332      	movs	r3, #50	; 0x32
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	4912      	ldr	r1, [pc, #72]	; (8000c10 <HAL_UART_RxCpltCallback+0x60>)
 8000bc8:	4812      	ldr	r0, [pc, #72]	; (8000c14 <HAL_UART_RxCpltCallback+0x64>)
 8000bca:	f001 ff2a 	bl	8002a22 <HAL_UART_Transmit>
		buffer[index_buffer++] = temp;
 8000bce:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	b2d1      	uxtb	r1, r2
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000bd8:	7011      	strb	r1, [r2, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	; (8000c10 <HAL_UART_RxCpltCallback+0x60>)
 8000bde:	7819      	ldrb	r1, [r3, #0]
 8000be0:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <HAL_UART_RxCpltCallback+0x6c>)
 8000be2:	5499      	strb	r1, [r3, r2]
		if (index_buffer == 30)
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b1e      	cmp	r3, #30
 8000bea:	d102      	bne.n	8000bf2 <HAL_UART_RxCpltCallback+0x42>
			index_buffer = 0;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_UART_RxCpltCallback+0x68>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	; (8000c20 <HAL_UART_RxCpltCallback+0x70>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	4905      	ldr	r1, [pc, #20]	; (8000c10 <HAL_UART_RxCpltCallback+0x60>)
 8000bfc:	4805      	ldr	r0, [pc, #20]	; (8000c14 <HAL_UART_RxCpltCallback+0x64>)
 8000bfe:	f001 ffa2 	bl	8002b46 <HAL_UART_Receive_IT>
	}
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	200000b4 	.word	0x200000b4
 8000c14:	2000011c 	.word	0x2000011c
 8000c18:	2000017e 	.word	0x2000017e
 8000c1c:	20000160 	.word	0x20000160
 8000c20:	2000017f 	.word	0x2000017f

08000c24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2a:	f000 fac5 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c2e:	f000 f81f 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c32:	f000 f8cf 	bl	8000dd4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c36:	f000 f857 	bl	8000ce8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000c3a:	f000 f8a1 	bl	8000d80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c3e:	4808      	ldr	r0, [pc, #32]	; (8000c60 <main+0x3c>)
 8000c40:	f001 faf8 	bl	8002234 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	4907      	ldr	r1, [pc, #28]	; (8000c64 <main+0x40>)
 8000c48:	4807      	ldr	r0, [pc, #28]	; (8000c68 <main+0x44>)
 8000c4a:	f001 ff7c 	bl	8002b46 <HAL_UART_Receive_IT>
  int time[3] = {5000,2000,3000};
 8000c4e:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <main+0x48>)
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    /* USER CODE END WHILE */
//	  traffic
//	  displayTraffic(time);
//	  traffic
//	  button + traffic
	  fsm_button_displayTraffic();
 8000c58:	f7ff fbf2 	bl	8000440 <fsm_button_displayTraffic>
 8000c5c:	e7fc      	b.n	8000c58 <main+0x34>
 8000c5e:	bf00      	nop
 8000c60:	200000d4 	.word	0x200000d4
 8000c64:	200000b4 	.word	0x200000b4
 8000c68:	2000011c 	.word	0x2000011c
 8000c6c:	08003468 	.word	0x08003468

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b090      	sub	sp, #64	; 0x40
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	2228      	movs	r2, #40	; 0x28
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fbde 	bl	8003440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c96:	2301      	movs	r3, #1
 8000c98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 fe5a 	bl	8001960 <HAL_RCC_OscConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cb2:	f000 f924 	bl	8000efe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb6:	230f      	movs	r3, #15
 8000cb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cca:	1d3b      	adds	r3, r7, #4
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 f8c8 	bl	8001e64 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cda:	f000 f910 	bl	8000efe <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3740      	adds	r7, #64	; 0x40
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
	...

08000ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d06:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d0a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d0e:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000d12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d14:	4b19      	ldr	r3, [pc, #100]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d1c:	2209      	movs	r2, #9
 8000d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d2e:	f001 fa31 	bl	8002194 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d38:	f000 f8e1 	bl	8000efe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0308 	add.w	r3, r7, #8
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d4a:	f001 fbcd 	bl	80024e8 <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d54:	f000 f8d3 	bl	8000efe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM2_Init+0x94>)
 8000d66:	f001 fd9f 	bl	80028a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d70:	f000 f8c5 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3718      	adds	r7, #24
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	200000d4 	.word	0x200000d4

08000d80 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	; (8000dd0 <MX_USART2_UART_Init+0x50>)
 8000d88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000d90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d9e:	4b0b      	ldr	r3, [pc, #44]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000da6:	220c      	movs	r2, #12
 8000da8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000db6:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_USART2_UART_Init+0x4c>)
 8000db8:	f001 fde6 	bl	8002988 <HAL_UART_Init>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dc2:	f000 f89c 	bl	8000efe <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000011c 	.word	0x2000011c
 8000dd0:	40004400 	.word	0x40004400

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dda:	f107 0308 	add.w	r3, r7, #8
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de8:	4b34      	ldr	r3, [pc, #208]	; (8000ebc <MX_GPIO_Init+0xe8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <MX_GPIO_Init+0xe8>)
 8000dee:	f043 0304 	orr.w	r3, r3, #4
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b31      	ldr	r3, [pc, #196]	; (8000ebc <MX_GPIO_Init+0xe8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0304 	and.w	r3, r3, #4
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e00:	4b2e      	ldr	r3, [pc, #184]	; (8000ebc <MX_GPIO_Init+0xe8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	4a2d      	ldr	r2, [pc, #180]	; (8000ebc <MX_GPIO_Init+0xe8>)
 8000e06:	f043 0308 	orr.w	r3, r3, #8
 8000e0a:	6193      	str	r3, [r2, #24]
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_GPIO_Init+0xe8>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	f003 0308 	and.w	r3, r3, #8
 8000e14:	603b      	str	r3, [r7, #0]
 8000e16:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D3_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000e1e:	4828      	ldr	r0, [pc, #160]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e20:	f000 fd85 	bl	800192e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D2_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000e2a:	4826      	ldr	r0, [pc, #152]	; (8000ec4 <MX_GPIO_Init+0xf0>)
 8000e2c:	f000 fd7f 	bl	800192e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PedesButton_Pin button_mode_Pin button_inc_Pin */
  GPIO_InitStruct.Pin = PedesButton_Pin|button_mode_Pin|button_inc_Pin;
 8000e30:	2313      	movs	r3, #19
 8000e32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3c:	f107 0308 	add.w	r3, r7, #8
 8000e40:	4619      	mov	r1, r3
 8000e42:	4820      	ldr	r0, [pc, #128]	; (8000ec4 <MX_GPIO_Init+0xf0>)
 8000e44:	f000 fbd8 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D12_Pin */
  GPIO_InitStruct.Pin = D12_Pin;
 8000e48:	2340      	movs	r3, #64	; 0x40
 8000e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(D12_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 0308 	add.w	r3, r7, #8
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481a      	ldr	r0, [pc, #104]	; (8000ec4 <MX_GPIO_Init+0xf0>)
 8000e5c:	f000 fbcc 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button_dec_Pin */
  GPIO_InitStruct.Pin = button_dec_Pin;
 8000e60:	2301      	movs	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button_dec_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	4619      	mov	r1, r3
 8000e72:	4813      	ldr	r0, [pc, #76]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e74:	f000 fbc0 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D3_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D3_Pin|D5_Pin|D4_Pin;
 8000e78:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000e7c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2302      	movs	r3, #2
 8000e88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480b      	ldr	r0, [pc, #44]	; (8000ec0 <MX_GPIO_Init+0xec>)
 8000e92:	f000 fbb1 	bl	80015f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D2_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D2_Pin;
 8000e96:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4619      	mov	r1, r3
 8000eae:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <MX_GPIO_Init+0xf0>)
 8000eb0:	f000 fba2 	bl	80015f8 <HAL_GPIO_Init>

}
 8000eb4:	bf00      	nop
 8000eb6:	3718      	adds	r7, #24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	40010c00 	.word	0x40010c00
 8000ec4:	40010800 	.word	0x40010800

08000ec8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
int counter = 500;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed8:	d10d      	bne.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0x2e>
	{
		for(int i = 0 ; i < NUMS_OF_TIMER; i++){
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	e005      	b.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x24>
			timerRun(i);
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 f91b 	bl	800111c <timerRun>
		for(int i = 0 ; i < NUMS_OF_TIMER; i++){
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	2b05      	cmp	r3, #5
 8000ef0:	ddf6      	ble.n	8000ee0 <HAL_TIM_PeriodElapsedCallback+0x18>
		}
		buttonReading();
 8000ef2:	f7ff f92b 	bl	800014c <buttonReading>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f02:	b672      	cpsid	i
}
 8000f04:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <Error_Handler+0x8>

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a14      	ldr	r2, [pc, #80]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_MspInit+0x5c>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_MspInit+0x60>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4a04      	ldr	r2, [pc, #16]	; (8000f68 <HAL_MspInit+0x60>)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	3714      	adds	r7, #20
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr
 8000f64:	40021000 	.word	0x40021000
 8000f68:	40010000 	.word	0x40010000

08000f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d113      	bne.n	8000fa6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f7e:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <HAL_TIM_Base_MspInit+0x44>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_TIM_Base_MspInit+0x44>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	61d3      	str	r3, [r2, #28]
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_TIM_Base_MspInit+0x44>)
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	201c      	movs	r0, #28
 8000f9c:	f000 fa45 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fa0:	201c      	movs	r0, #28
 8000fa2:	f000 fa5e 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000

08000fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a1f      	ldr	r2, [pc, #124]	; (800104c <HAL_UART_MspInit+0x98>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d137      	bne.n	8001044 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fd6:	69db      	ldr	r3, [r3, #28]
 8000fd8:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fde:	61d3      	str	r3, [r2, #28]
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	6193      	str	r3, [r2, #24]
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_UART_MspInit+0x9c>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	f003 0304 	and.w	r3, r3, #4
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001004:	2304      	movs	r3, #4
 8001006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800100c:	2303      	movs	r3, #3
 800100e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f107 0310 	add.w	r3, r7, #16
 8001014:	4619      	mov	r1, r3
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8001018:	f000 faee 	bl	80015f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800101c:	2308      	movs	r3, #8
 800101e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4619      	mov	r1, r3
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <HAL_UART_MspInit+0xa0>)
 8001030:	f000 fae2 	bl	80015f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001034:	2200      	movs	r2, #0
 8001036:	2100      	movs	r1, #0
 8001038:	2026      	movs	r0, #38	; 0x26
 800103a:	f000 f9f6 	bl	800142a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103e:	2026      	movs	r0, #38	; 0x26
 8001040:	f000 fa0f 	bl	8001462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001044:	bf00      	nop
 8001046:	3720      	adds	r7, #32
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40004400 	.word	0x40004400
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800

08001058 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800105c:	e7fe      	b.n	800105c <NMI_Handler+0x4>

0800105e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001062:	e7fe      	b.n	8001062 <HardFault_Handler+0x4>

08001064 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001068:	e7fe      	b.n	8001068 <MemManage_Handler+0x4>

0800106a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800106e:	e7fe      	b.n	800106e <BusFault_Handler+0x4>

08001070 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001074:	e7fe      	b.n	8001074 <UsageFault_Handler+0x4>

08001076 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	bc80      	pop	{r7}
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr

0800108e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr

0800109a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109e:	f000 f8d1 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <TIM2_IRQHandler+0x10>)
 80010ae:	f001 f913 	bl	80022d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200000d4 	.word	0x200000d4

080010bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <USART2_IRQHandler+0x10>)
 80010c2:	f001 fd71 	bl	8002ba8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000011c 	.word	0x2000011c

080010d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <setTimer>:
#include "timer.h"

int timer_flag[NUMS_OF_TIMER];
int timer_counter[NUMS_OF_TIMER];

void setTimer(int index, int duration){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]
	timer_counter[index] = duration / CYCLE;
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	4a09      	ldr	r2, [pc, #36]	; (8001110 <setTimer+0x34>)
 80010ea:	fb82 1203 	smull	r1, r2, r2, r3
 80010ee:	1092      	asrs	r2, r2, #2
 80010f0:	17db      	asrs	r3, r3, #31
 80010f2:	1ad2      	subs	r2, r2, r3
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <setTimer+0x38>)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[index] = 0;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <setTimer+0x3c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2100      	movs	r1, #0
 8001102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	66666667 	.word	0x66666667
 8001114:	20000198 	.word	0x20000198
 8001118:	20000180 	.word	0x20000180

0800111c <timerRun>:

void timerRun(int index){
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	if(timer_counter[index] >= 0) {
 8001124:	4a0f      	ldr	r2, [pc, #60]	; (8001164 <timerRun+0x48>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db13      	blt.n	8001158 <timerRun+0x3c>
		timer_counter[index]--;
 8001130:	4a0c      	ldr	r2, [pc, #48]	; (8001164 <timerRun+0x48>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	1e5a      	subs	r2, r3, #1
 800113a:	490a      	ldr	r1, [pc, #40]	; (8001164 <timerRun+0x48>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[index] <= 0) timer_flag[index] = 1;
 8001142:	4a08      	ldr	r2, [pc, #32]	; (8001164 <timerRun+0x48>)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	2b00      	cmp	r3, #0
 800114c:	dc04      	bgt.n	8001158 <timerRun+0x3c>
 800114e:	4a06      	ldr	r2, [pc, #24]	; (8001168 <timerRun+0x4c>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2101      	movs	r1, #1
 8001154:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}
}
 8001158:	bf00      	nop
 800115a:	370c      	adds	r7, #12
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000198 	.word	0x20000198
 8001168:	20000180 	.word	0x20000180

0800116c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001192:	f7ff ff9d 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001196:	f002 f92f 	bl	80033f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800119a:	f7ff fd43 	bl	8000c24 <main>
  bx lr
 800119e:	4770      	bx	lr
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80011a8:	080034a4 	.word	0x080034a4
  ldr r2, =_sbss
 80011ac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80011b0:	200001b4 	.word	0x200001b4

080011b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_2_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <HAL_Init+0x28>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a07      	ldr	r2, [pc, #28]	; (80011e0 <HAL_Init+0x28>)
 80011c2:	f043 0310 	orr.w	r3, r3, #16
 80011c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f000 f923 	bl	8001414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ce:	200f      	movs	r0, #15
 80011d0:	f000 f808 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d4:	f7ff fe98 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40022000 	.word	0x40022000

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f93b 	bl	800147e <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f903 	bl	800142a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000005c 	.word	0x2000005c
 800123c:	20000064 	.word	0x20000064
 8001240:	20000060 	.word	0x20000060

08001244 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <HAL_IncTick+0x1c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x20>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x20>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000064 	.word	0x20000064
 8001264:	200001b0 	.word	0x200001b0

08001268 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b02      	ldr	r3, [pc, #8]	; (8001278 <HAL_GetTick+0x10>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr
 8001278:	200001b0 	.word	0x200001b0

0800127c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800127c:	b480      	push	{r7}
 800127e:	b085      	sub	sp, #20
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800128c:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001298:	4013      	ands	r3, r2
 800129a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ae:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <__NVIC_SetPriorityGrouping+0x44>)
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	60d3      	str	r3, [r2, #12]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <__NVIC_GetPriorityGrouping+0x18>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	f003 0307 	and.w	r3, r3, #7
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	e000ed00 	.word	0xe000ed00

080012e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	db0b      	blt.n	800130a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	f003 021f 	and.w	r2, r3, #31
 80012f8:	4906      	ldr	r1, [pc, #24]	; (8001314 <__NVIC_EnableIRQ+0x34>)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	095b      	lsrs	r3, r3, #5
 8001300:	2001      	movs	r0, #1
 8001302:	fa00 f202 	lsl.w	r2, r0, r2
 8001306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr
 8001314:	e000e100 	.word	0xe000e100

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	; (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	; (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	; 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013e0:	d301      	bcc.n	80013e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e2:	2301      	movs	r3, #1
 80013e4:	e00f      	b.n	8001406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013e6:	4a0a      	ldr	r2, [pc, #40]	; (8001410 <SysTick_Config+0x40>)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ee:	210f      	movs	r1, #15
 80013f0:	f04f 30ff 	mov.w	r0, #4294967295
 80013f4:	f7ff ff90 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <SysTick_Config+0x40>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013fe:	4b04      	ldr	r3, [pc, #16]	; (8001410 <SysTick_Config+0x40>)
 8001400:	2207      	movs	r2, #7
 8001402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	e000e010 	.word	0xe000e010

08001414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff2d 	bl	800127c <__NVIC_SetPriorityGrouping>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142a:	b580      	push	{r7, lr}
 800142c:	b086      	sub	sp, #24
 800142e:	af00      	add	r7, sp, #0
 8001430:	4603      	mov	r3, r0
 8001432:	60b9      	str	r1, [r7, #8]
 8001434:	607a      	str	r2, [r7, #4]
 8001436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800143c:	f7ff ff42 	bl	80012c4 <__NVIC_GetPriorityGrouping>
 8001440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	6978      	ldr	r0, [r7, #20]
 8001448:	f7ff ff90 	bl	800136c <NVIC_EncodePriority>
 800144c:	4602      	mov	r2, r0
 800144e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001452:	4611      	mov	r1, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff5f 	bl	8001318 <__NVIC_SetPriority>
}
 800145a:	bf00      	nop
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	4603      	mov	r3, r0
 800146a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff35 	bl	80012e0 <__NVIC_EnableIRQ>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffa2 	bl	80013d0 <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001496:	b480      	push	{r7}
 8001498:	b085      	sub	sp, #20
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d008      	beq.n	80014be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2204      	movs	r2, #4
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e020      	b.n	8001500 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 020e 	bic.w	r2, r2, #14
 80014cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	2101      	movs	r1, #1
 80014e8:	fa01 f202 	lsl.w	r2, r1, r2
 80014ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80014fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	bc80      	pop	{r7}
 8001508:	4770      	bx	lr
	...

0800150c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800151e:	2b02      	cmp	r3, #2
 8001520:	d005      	beq.n	800152e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2204      	movs	r2, #4
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]
 800152c:	e051      	b.n	80015d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 020e 	bic.w	r2, r2, #14
 800153c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a22      	ldr	r2, [pc, #136]	; (80015dc <HAL_DMA_Abort_IT+0xd0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d029      	beq.n	80015ac <HAL_DMA_Abort_IT+0xa0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a20      	ldr	r2, [pc, #128]	; (80015e0 <HAL_DMA_Abort_IT+0xd4>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d022      	beq.n	80015a8 <HAL_DMA_Abort_IT+0x9c>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_DMA_Abort_IT+0xd8>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d01a      	beq.n	80015a2 <HAL_DMA_Abort_IT+0x96>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a1d      	ldr	r2, [pc, #116]	; (80015e8 <HAL_DMA_Abort_IT+0xdc>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d012      	beq.n	800159c <HAL_DMA_Abort_IT+0x90>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1c      	ldr	r2, [pc, #112]	; (80015ec <HAL_DMA_Abort_IT+0xe0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d00a      	beq.n	8001596 <HAL_DMA_Abort_IT+0x8a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_DMA_Abort_IT+0xe4>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d102      	bne.n	8001590 <HAL_DMA_Abort_IT+0x84>
 800158a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800158e:	e00e      	b.n	80015ae <HAL_DMA_Abort_IT+0xa2>
 8001590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001594:	e00b      	b.n	80015ae <HAL_DMA_Abort_IT+0xa2>
 8001596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159a:	e008      	b.n	80015ae <HAL_DMA_Abort_IT+0xa2>
 800159c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a0:	e005      	b.n	80015ae <HAL_DMA_Abort_IT+0xa2>
 80015a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a6:	e002      	b.n	80015ae <HAL_DMA_Abort_IT+0xa2>
 80015a8:	2310      	movs	r3, #16
 80015aa:	e000      	b.n	80015ae <HAL_DMA_Abort_IT+0xa2>
 80015ac:	2301      	movs	r3, #1
 80015ae:	4a11      	ldr	r2, [pc, #68]	; (80015f4 <HAL_DMA_Abort_IT+0xe8>)
 80015b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d003      	beq.n	80015d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	4798      	blx	r3
    } 
  }
  return status;
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40020008 	.word	0x40020008
 80015e0:	4002001c 	.word	0x4002001c
 80015e4:	40020030 	.word	0x40020030
 80015e8:	40020044 	.word	0x40020044
 80015ec:	40020058 	.word	0x40020058
 80015f0:	4002006c 	.word	0x4002006c
 80015f4:	40020000 	.word	0x40020000

080015f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b08b      	sub	sp, #44	; 0x2c
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001602:	2300      	movs	r3, #0
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800160a:	e169      	b.n	80018e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800160c:	2201      	movs	r2, #1
 800160e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8158 	bne.w	80018da <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a9a      	ldr	r2, [pc, #616]	; (8001898 <HAL_GPIO_Init+0x2a0>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d05e      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001634:	4a98      	ldr	r2, [pc, #608]	; (8001898 <HAL_GPIO_Init+0x2a0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d875      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800163a:	4a98      	ldr	r2, [pc, #608]	; (800189c <HAL_GPIO_Init+0x2a4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d058      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001640:	4a96      	ldr	r2, [pc, #600]	; (800189c <HAL_GPIO_Init+0x2a4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d86f      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001646:	4a96      	ldr	r2, [pc, #600]	; (80018a0 <HAL_GPIO_Init+0x2a8>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d052      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 800164c:	4a94      	ldr	r2, [pc, #592]	; (80018a0 <HAL_GPIO_Init+0x2a8>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d869      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001652:	4a94      	ldr	r2, [pc, #592]	; (80018a4 <HAL_GPIO_Init+0x2ac>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d04c      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001658:	4a92      	ldr	r2, [pc, #584]	; (80018a4 <HAL_GPIO_Init+0x2ac>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d863      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800165e:	4a92      	ldr	r2, [pc, #584]	; (80018a8 <HAL_GPIO_Init+0x2b0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d046      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
 8001664:	4a90      	ldr	r2, [pc, #576]	; (80018a8 <HAL_GPIO_Init+0x2b0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d85d      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 800166a:	2b12      	cmp	r3, #18
 800166c:	d82a      	bhi.n	80016c4 <HAL_GPIO_Init+0xcc>
 800166e:	2b12      	cmp	r3, #18
 8001670:	d859      	bhi.n	8001726 <HAL_GPIO_Init+0x12e>
 8001672:	a201      	add	r2, pc, #4	; (adr r2, 8001678 <HAL_GPIO_Init+0x80>)
 8001674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001678:	080016f3 	.word	0x080016f3
 800167c:	080016cd 	.word	0x080016cd
 8001680:	080016df 	.word	0x080016df
 8001684:	08001721 	.word	0x08001721
 8001688:	08001727 	.word	0x08001727
 800168c:	08001727 	.word	0x08001727
 8001690:	08001727 	.word	0x08001727
 8001694:	08001727 	.word	0x08001727
 8001698:	08001727 	.word	0x08001727
 800169c:	08001727 	.word	0x08001727
 80016a0:	08001727 	.word	0x08001727
 80016a4:	08001727 	.word	0x08001727
 80016a8:	08001727 	.word	0x08001727
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001727 	.word	0x08001727
 80016b4:	08001727 	.word	0x08001727
 80016b8:	08001727 	.word	0x08001727
 80016bc:	080016d5 	.word	0x080016d5
 80016c0:	080016e9 	.word	0x080016e9
 80016c4:	4a79      	ldr	r2, [pc, #484]	; (80018ac <HAL_GPIO_Init+0x2b4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016ca:	e02c      	b.n	8001726 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	623b      	str	r3, [r7, #32]
          break;
 80016d2:	e029      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	3304      	adds	r3, #4
 80016da:	623b      	str	r3, [r7, #32]
          break;
 80016dc:	e024      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	3308      	adds	r3, #8
 80016e4:	623b      	str	r3, [r7, #32]
          break;
 80016e6:	e01f      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	330c      	adds	r3, #12
 80016ee:	623b      	str	r3, [r7, #32]
          break;
 80016f0:	e01a      	b.n	8001728 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d102      	bne.n	8001700 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016fa:	2304      	movs	r3, #4
 80016fc:	623b      	str	r3, [r7, #32]
          break;
 80016fe:	e013      	b.n	8001728 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d105      	bne.n	8001714 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001708:	2308      	movs	r3, #8
 800170a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	611a      	str	r2, [r3, #16]
          break;
 8001712:	e009      	b.n	8001728 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001714:	2308      	movs	r3, #8
 8001716:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69fa      	ldr	r2, [r7, #28]
 800171c:	615a      	str	r2, [r3, #20]
          break;
 800171e:	e003      	b.n	8001728 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001720:	2300      	movs	r3, #0
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e000      	b.n	8001728 <HAL_GPIO_Init+0x130>
          break;
 8001726:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	2bff      	cmp	r3, #255	; 0xff
 800172c:	d801      	bhi.n	8001732 <HAL_GPIO_Init+0x13a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	e001      	b.n	8001736 <HAL_GPIO_Init+0x13e>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	2bff      	cmp	r3, #255	; 0xff
 800173c:	d802      	bhi.n	8001744 <HAL_GPIO_Init+0x14c>
 800173e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	e002      	b.n	800174a <HAL_GPIO_Init+0x152>
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	3b08      	subs	r3, #8
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	210f      	movs	r1, #15
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	401a      	ands	r2, r3
 800175c:	6a39      	ldr	r1, [r7, #32]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	fa01 f303 	lsl.w	r3, r1, r3
 8001764:	431a      	orrs	r2, r3
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 80b1 	beq.w	80018da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001778:	4b4d      	ldr	r3, [pc, #308]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	4a4c      	ldr	r2, [pc, #304]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	6193      	str	r3, [r2, #24]
 8001784:	4b4a      	ldr	r3, [pc, #296]	; (80018b0 <HAL_GPIO_Init+0x2b8>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001790:	4a48      	ldr	r2, [pc, #288]	; (80018b4 <HAL_GPIO_Init+0x2bc>)
 8001792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	220f      	movs	r2, #15
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a40      	ldr	r2, [pc, #256]	; (80018b8 <HAL_GPIO_Init+0x2c0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d013      	beq.n	80017e4 <HAL_GPIO_Init+0x1ec>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4a3f      	ldr	r2, [pc, #252]	; (80018bc <HAL_GPIO_Init+0x2c4>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d00d      	beq.n	80017e0 <HAL_GPIO_Init+0x1e8>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4a3e      	ldr	r2, [pc, #248]	; (80018c0 <HAL_GPIO_Init+0x2c8>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d007      	beq.n	80017dc <HAL_GPIO_Init+0x1e4>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a3d      	ldr	r2, [pc, #244]	; (80018c4 <HAL_GPIO_Init+0x2cc>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d101      	bne.n	80017d8 <HAL_GPIO_Init+0x1e0>
 80017d4:	2303      	movs	r3, #3
 80017d6:	e006      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017d8:	2304      	movs	r3, #4
 80017da:	e004      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017dc:	2302      	movs	r3, #2
 80017de:	e002      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_GPIO_Init+0x1ee>
 80017e4:	2300      	movs	r3, #0
 80017e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017e8:	f002 0203 	and.w	r2, r2, #3
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	4093      	lsls	r3, r2
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017f6:	492f      	ldr	r1, [pc, #188]	; (80018b4 <HAL_GPIO_Init+0x2bc>)
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d006      	beq.n	800181e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	492c      	ldr	r1, [pc, #176]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	600b      	str	r3, [r1, #0]
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800181e:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	43db      	mvns	r3, r3
 8001826:	4928      	ldr	r1, [pc, #160]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001828:	4013      	ands	r3, r2
 800182a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	4922      	ldr	r1, [pc, #136]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	604b      	str	r3, [r1, #4]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	491e      	ldr	r1, [pc, #120]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001850:	4013      	ands	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	4918      	ldr	r1, [pc, #96]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800186e:	4b16      	ldr	r3, [pc, #88]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	4914      	ldr	r1, [pc, #80]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 8001878:	4013      	ands	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d021      	beq.n	80018cc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 800188a:	68da      	ldr	r2, [r3, #12]
 800188c:	490e      	ldr	r1, [pc, #56]	; (80018c8 <HAL_GPIO_Init+0x2d0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	60cb      	str	r3, [r1, #12]
 8001894:	e021      	b.n	80018da <HAL_GPIO_Init+0x2e2>
 8001896:	bf00      	nop
 8001898:	10320000 	.word	0x10320000
 800189c:	10310000 	.word	0x10310000
 80018a0:	10220000 	.word	0x10220000
 80018a4:	10210000 	.word	0x10210000
 80018a8:	10120000 	.word	0x10120000
 80018ac:	10110000 	.word	0x10110000
 80018b0:	40021000 	.word	0x40021000
 80018b4:	40010000 	.word	0x40010000
 80018b8:	40010800 	.word	0x40010800
 80018bc:	40010c00 	.word	0x40010c00
 80018c0:	40011000 	.word	0x40011000
 80018c4:	40011400 	.word	0x40011400
 80018c8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018cc:	4b0b      	ldr	r3, [pc, #44]	; (80018fc <HAL_GPIO_Init+0x304>)
 80018ce:	68da      	ldr	r2, [r3, #12]
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	4909      	ldr	r1, [pc, #36]	; (80018fc <HAL_GPIO_Init+0x304>)
 80018d6:	4013      	ands	r3, r2
 80018d8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	3301      	adds	r3, #1
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	fa22 f303 	lsr.w	r3, r2, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f47f ae8e 	bne.w	800160c <HAL_GPIO_Init+0x14>
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	372c      	adds	r7, #44	; 0x2c
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	40010400 	.word	0x40010400

08001900 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	887b      	ldrh	r3, [r7, #2]
 8001912:	4013      	ands	r3, r2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d002      	beq.n	800191e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001918:	2301      	movs	r3, #1
 800191a:	73fb      	strb	r3, [r7, #15]
 800191c:	e001      	b.n	8001922 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3714      	adds	r7, #20
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800192e:	b480      	push	{r7}
 8001930:	b083      	sub	sp, #12
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	807b      	strh	r3, [r7, #2]
 800193a:	4613      	mov	r3, r2
 800193c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800193e:	787b      	ldrb	r3, [r7, #1]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d003      	beq.n	800194c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001944:	887a      	ldrh	r2, [r7, #2]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800194a:	e003      	b.n	8001954 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	041a      	lsls	r2, r3, #16
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	611a      	str	r2, [r3, #16]
}
 8001954:	bf00      	nop
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
	...

08001960 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e272      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8087 	beq.w	8001a8e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001980:	4b92      	ldr	r3, [pc, #584]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 030c 	and.w	r3, r3, #12
 8001988:	2b04      	cmp	r3, #4
 800198a:	d00c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800198c:	4b8f      	ldr	r3, [pc, #572]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 030c 	and.w	r3, r3, #12
 8001994:	2b08      	cmp	r3, #8
 8001996:	d112      	bne.n	80019be <HAL_RCC_OscConfig+0x5e>
 8001998:	4b8c      	ldr	r3, [pc, #560]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019a4:	d10b      	bne.n	80019be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a6:	4b89      	ldr	r3, [pc, #548]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d06c      	beq.n	8001a8c <HAL_RCC_OscConfig+0x12c>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d168      	bne.n	8001a8c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e24c      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c6:	d106      	bne.n	80019d6 <HAL_RCC_OscConfig+0x76>
 80019c8:	4b80      	ldr	r3, [pc, #512]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a7f      	ldr	r2, [pc, #508]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	e02e      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b7b      	ldr	r3, [pc, #492]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a7a      	ldr	r2, [pc, #488]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b78      	ldr	r3, [pc, #480]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a77      	ldr	r2, [pc, #476]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 80019f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e01d      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a00:	d10c      	bne.n	8001a1c <HAL_RCC_OscConfig+0xbc>
 8001a02:	4b72      	ldr	r3, [pc, #456]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a71      	ldr	r2, [pc, #452]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	4b6f      	ldr	r3, [pc, #444]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a18:	6013      	str	r3, [r2, #0]
 8001a1a:	e00b      	b.n	8001a34 <HAL_RCC_OscConfig+0xd4>
 8001a1c:	4b6b      	ldr	r3, [pc, #428]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a6a      	ldr	r2, [pc, #424]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a67      	ldr	r2, [pc, #412]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a32:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d013      	beq.n	8001a64 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff fc14 	bl	8001268 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a44:	f7ff fc10 	bl	8001268 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b64      	cmp	r3, #100	; 0x64
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e200      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a56:	4b5d      	ldr	r3, [pc, #372]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0f0      	beq.n	8001a44 <HAL_RCC_OscConfig+0xe4>
 8001a62:	e014      	b.n	8001a8e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff fc00 	bl	8001268 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff fbfc 	bl	8001268 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e1ec      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7e:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x10c>
 8001a8a:	e000      	b.n	8001a8e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d063      	beq.n	8001b62 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 030c 	and.w	r3, r3, #12
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00b      	beq.n	8001abe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aa6:	4b49      	ldr	r3, [pc, #292]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 030c 	and.w	r3, r3, #12
 8001aae:	2b08      	cmp	r3, #8
 8001ab0:	d11c      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d116      	bne.n	8001aec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001abe:	4b43      	ldr	r3, [pc, #268]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x176>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691b      	ldr	r3, [r3, #16]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d001      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e1c0      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4939      	ldr	r1, [pc, #228]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aea:	e03a      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d020      	beq.n	8001b36 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <HAL_RCC_OscConfig+0x270>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fbb5 	bl	8001268 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff fbb1 	bl	8001268 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1a1      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b20:	4b2a      	ldr	r3, [pc, #168]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	00db      	lsls	r3, r3, #3
 8001b2e:	4927      	ldr	r1, [pc, #156]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
 8001b34:	e015      	b.n	8001b62 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <HAL_RCC_OscConfig+0x270>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fb94 	bl	8001268 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff fb90 	bl	8001268 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e180      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b56:	4b1d      	ldr	r3, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d03a      	beq.n	8001be4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d019      	beq.n	8001baa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b76:	4b17      	ldr	r3, [pc, #92]	; (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7c:	f7ff fb74 	bl	8001268 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff fb70 	bl	8001268 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e160      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_RCC_OscConfig+0x26c>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f000 fad8 	bl	8002158 <RCC_Delay>
 8001ba8:	e01c      	b.n	8001be4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001baa:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <HAL_RCC_OscConfig+0x274>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff fb5a 	bl	8001268 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb6:	e00f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fb56 	bl	8001268 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d908      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e146      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	42420000 	.word	0x42420000
 8001bd4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bdc:	f003 0302 	and.w	r3, r3, #2
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e9      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0304 	and.w	r3, r3, #4
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80a6 	beq.w	8001d3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bf6:	4b8b      	ldr	r3, [pc, #556]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d10d      	bne.n	8001c1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	4a87      	ldr	r2, [pc, #540]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	61d3      	str	r3, [r2, #28]
 8001c0e:	4b85      	ldr	r3, [pc, #532]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1e:	4b82      	ldr	r3, [pc, #520]	; (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d118      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c2a:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a7e      	ldr	r2, [pc, #504]	; (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c36:	f7ff fb17 	bl	8001268 <HAL_GetTick>
 8001c3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3c:	e008      	b.n	8001c50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff fb13 	bl	8001268 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b64      	cmp	r3, #100	; 0x64
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e103      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c50:	4b75      	ldr	r3, [pc, #468]	; (8001e28 <HAL_RCC_OscConfig+0x4c8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d106      	bne.n	8001c72 <HAL_RCC_OscConfig+0x312>
 8001c64:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	6213      	str	r3, [r2, #32]
 8001c70:	e02d      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x334>
 8001c7a:	4b6a      	ldr	r3, [pc, #424]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6213      	str	r3, [r2, #32]
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a66      	ldr	r2, [pc, #408]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	f023 0304 	bic.w	r3, r3, #4
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	e01c      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x356>
 8001c9c:	4b61      	ldr	r3, [pc, #388]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	4a60      	ldr	r2, [pc, #384]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001ca2:	f043 0304 	orr.w	r3, r3, #4
 8001ca6:	6213      	str	r3, [r2, #32]
 8001ca8:	4b5e      	ldr	r3, [pc, #376]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a5d      	ldr	r2, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e00b      	b.n	8001cce <HAL_RCC_OscConfig+0x36e>
 8001cb6:	4b5b      	ldr	r3, [pc, #364]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	4a5a      	ldr	r2, [pc, #360]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6213      	str	r3, [r2, #32]
 8001cc2:	4b58      	ldr	r3, [pc, #352]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	4a57      	ldr	r2, [pc, #348]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cc8:	f023 0304 	bic.w	r3, r3, #4
 8001ccc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d015      	beq.n	8001d02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd6:	f7ff fac7 	bl	8001268 <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	e00a      	b.n	8001cf4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff fac3 	bl	8001268 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e0b1      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0ee      	beq.n	8001cde <HAL_RCC_OscConfig+0x37e>
 8001d00:	e014      	b.n	8001d2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d02:	f7ff fab1 	bl	8001268 <HAL_GetTick>
 8001d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	e00a      	b.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0a:	f7ff faad 	bl	8001268 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e09b      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	4b40      	ldr	r3, [pc, #256]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d105      	bne.n	8001d3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d32:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69db      	ldr	r3, [r3, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8087 	beq.w	8001e56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 030c 	and.w	r3, r3, #12
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d061      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d146      	bne.n	8001dea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5c:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d62:	f7ff fa81 	bl	8001268 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d68:	e008      	b.n	8001d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6a:	f7ff fa7d 	bl	8001268 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d901      	bls.n	8001d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	e06d      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f0      	bne.n	8001d6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d108      	bne.n	8001da4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d92:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	4921      	ldr	r1, [pc, #132]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a19      	ldr	r1, [r3, #32]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db4:	430b      	orrs	r3, r1
 8001db6:	491b      	ldr	r1, [pc, #108]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fa51 	bl	8001268 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff fa4d 	bl	8001268 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e03d      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x46a>
 8001de8:	e035      	b.n	8001e56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <HAL_RCC_OscConfig+0x4cc>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff fa3a 	bl	8001268 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7ff fa36 	bl	8001268 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e026      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_OscConfig+0x4c4>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x498>
 8001e16:	e01e      	b.n	8001e56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e019      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_RCC_OscConfig+0x500>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d106      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d001      	beq.n	8001e56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	40021000 	.word	0x40021000

08001e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0d0      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e78:	4b6a      	ldr	r3, [pc, #424]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d910      	bls.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f023 0207 	bic.w	r2, r3, #7
 8001e8e:	4965      	ldr	r1, [pc, #404]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e96:	4b63      	ldr	r3, [pc, #396]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d001      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e0b8      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d005      	beq.n	8001ecc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ec0:	4b59      	ldr	r3, [pc, #356]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	4a58      	ldr	r2, [pc, #352]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0308 	and.w	r3, r3, #8
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ed8:	4b53      	ldr	r3, [pc, #332]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ee2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	494d      	ldr	r1, [pc, #308]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0301 	and.w	r3, r3, #1
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d040      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d107      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f0a:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d115      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e07f      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d107      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f22:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d109      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e073      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e06b      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f023 0203 	bic.w	r2, r3, #3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4936      	ldr	r1, [pc, #216]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f54:	f7ff f988 	bl	8001268 <HAL_GetTick>
 8001f58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5c:	f7ff f984 	bl	8001268 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e053      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 020c 	and.w	r2, r3, #12
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d1eb      	bne.n	8001f5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f84:	4b27      	ldr	r3, [pc, #156]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d210      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f023 0207 	bic.w	r2, r3, #7
 8001f9a:	4922      	ldr	r1, [pc, #136]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b20      	ldr	r3, [pc, #128]	; (8002024 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e032      	b.n	800201a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	4916      	ldr	r1, [pc, #88]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	490e      	ldr	r1, [pc, #56]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ff2:	f000 f821 	bl	8002038 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	490a      	ldr	r1, [pc, #40]	; (800202c <HAL_RCC_ClockConfig+0x1c8>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	fa22 f303 	lsr.w	r3, r2, r3
 800200a:	4a09      	ldr	r2, [pc, #36]	; (8002030 <HAL_RCC_ClockConfig+0x1cc>)
 800200c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_RCC_ClockConfig+0x1d0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f8e6 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40022000 	.word	0x40022000
 8002028:	40021000 	.word	0x40021000
 800202c:	08003484 	.word	0x08003484
 8002030:	2000005c 	.word	0x2000005c
 8002034:	20000060 	.word	0x20000060

08002038 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002038:	b490      	push	{r4, r7}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800203e:	4b29      	ldr	r3, [pc, #164]	; (80020e4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002040:	1d3c      	adds	r4, r7, #4
 8002042:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002044:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002048:	f240 2301 	movw	r3, #513	; 0x201
 800204c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x40>
 8002072:	2b08      	cmp	r3, #8
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x46>
 8002076:	e02b      	b.n	80020d0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	e02b      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	0c9b      	lsrs	r3, r3, #18
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	3328      	adds	r3, #40	; 0x28
 8002088:	443b      	add	r3, r7
 800208a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800208e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d012      	beq.n	80020c0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800209a:	4b13      	ldr	r3, [pc, #76]	; (80020e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	0c5b      	lsrs	r3, r3, #17
 80020a0:	f003 0301 	and.w	r3, r3, #1
 80020a4:	3328      	adds	r3, #40	; 0x28
 80020a6:	443b      	add	r3, r7
 80020a8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020ac:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80020b2:	fb03 f202 	mul.w	r2, r3, r2
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	e004      	b.n	80020ca <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020c4:	fb02 f303 	mul.w	r3, r2, r3
 80020c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	623b      	str	r3, [r7, #32]
      break;
 80020ce:	e002      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d2:	623b      	str	r3, [r7, #32]
      break;
 80020d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020d6:	6a3b      	ldr	r3, [r7, #32]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3728      	adds	r7, #40	; 0x28
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc90      	pop	{r4, r7}
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	08003474 	.word	0x08003474
 80020e8:	40021000 	.word	0x40021000
 80020ec:	007a1200 	.word	0x007a1200
 80020f0:	003d0900 	.word	0x003d0900

080020f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020f8:	4b02      	ldr	r3, [pc, #8]	; (8002104 <HAL_RCC_GetHCLKFreq+0x10>)
 80020fa:	681b      	ldr	r3, [r3, #0]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	2000005c 	.word	0x2000005c

08002108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800210c:	f7ff fff2 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b05      	ldr	r3, [pc, #20]	; (8002128 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	0a1b      	lsrs	r3, r3, #8
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4903      	ldr	r1, [pc, #12]	; (800212c <HAL_RCC_GetPCLK1Freq+0x24>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002124:	4618      	mov	r0, r3
 8002126:	bd80      	pop	{r7, pc}
 8002128:	40021000 	.word	0x40021000
 800212c:	08003494 	.word	0x08003494

08002130 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002134:	f7ff ffde 	bl	80020f4 <HAL_RCC_GetHCLKFreq>
 8002138:	4602      	mov	r2, r0
 800213a:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetPCLK2Freq+0x20>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	0adb      	lsrs	r3, r3, #11
 8002140:	f003 0307 	and.w	r3, r3, #7
 8002144:	4903      	ldr	r1, [pc, #12]	; (8002154 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002146:	5ccb      	ldrb	r3, [r1, r3]
 8002148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800214c:	4618      	mov	r0, r3
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	08003494 	.word	0x08003494

08002158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002160:	4b0a      	ldr	r3, [pc, #40]	; (800218c <RCC_Delay+0x34>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <RCC_Delay+0x38>)
 8002166:	fba2 2303 	umull	r2, r3, r2, r3
 800216a:	0a5b      	lsrs	r3, r3, #9
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002174:	bf00      	nop
  }
  while (Delay --);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	60fa      	str	r2, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f9      	bne.n	8002174 <RCC_Delay+0x1c>
}
 8002180:	bf00      	nop
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	2000005c 	.word	0x2000005c
 8002190:	10624dd3 	.word	0x10624dd3

08002194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e041      	b.n	800222a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d106      	bne.n	80021c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7fe fed6 	bl	8000f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3304      	adds	r3, #4
 80021d0:	4619      	mov	r1, r3
 80021d2:	4610      	mov	r0, r2
 80021d4:	f000 fa70 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2201      	movs	r2, #1
 80021ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b01      	cmp	r3, #1
 8002246:	d001      	beq.n	800224c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e03a      	b.n	80022c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2202      	movs	r2, #2
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0201 	orr.w	r2, r2, #1
 8002262:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a18      	ldr	r2, [pc, #96]	; (80022cc <HAL_TIM_Base_Start_IT+0x98>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00e      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x58>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002276:	d009      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x58>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d004      	beq.n	800228c <HAL_TIM_Base_Start_IT+0x58>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a13      	ldr	r2, [pc, #76]	; (80022d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d111      	bne.n	80022b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2b06      	cmp	r3, #6
 800229c:	d010      	beq.n	80022c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f042 0201 	orr.w	r2, r2, #1
 80022ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022ae:	e007      	b.n	80022c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	40012c00 	.word	0x40012c00
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800

080022d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0202 	mvn.w	r2, #2
 8002304:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 f9b1 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f9a4 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 f9b3 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	2b04      	cmp	r3, #4
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0204 	mvn.w	r2, #4
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 f987 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f97a 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f989 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b08      	cmp	r3, #8
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0308 	and.w	r3, r3, #8
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0208 	mvn.w	r2, #8
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2204      	movs	r2, #4
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f95d 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 f950 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f95f 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b10      	cmp	r3, #16
 80023e8:	d122      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d11b      	bne.n	8002430 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0210 	mvn.w	r2, #16
 8002400:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2208      	movs	r2, #8
 8002406:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002412:	2b00      	cmp	r3, #0
 8002414:	d003      	beq.n	800241e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 f933 	bl	8002682 <HAL_TIM_IC_CaptureCallback>
 800241c:	e005      	b.n	800242a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f000 f926 	bl	8002670 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f935 	bl	8002694 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b01      	cmp	r3, #1
 800243c:	d10e      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b01      	cmp	r3, #1
 800244a:	d107      	bne.n	800245c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0201 	mvn.w	r2, #1
 8002454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f7fe fd36 	bl	8000ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002466:	2b80      	cmp	r3, #128	; 0x80
 8002468:	d10e      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b80      	cmp	r3, #128	; 0x80
 8002476:	d107      	bne.n	8002488 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 fa77 	bl	8002976 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002492:	2b40      	cmp	r3, #64	; 0x40
 8002494:	d10e      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d107      	bne.n	80024b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f8f9 	bl	80026a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	f003 0320 	and.w	r3, r3, #32
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d10e      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b20      	cmp	r3, #32
 80024ce:	d107      	bne.n	80024e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0220 	mvn.w	r2, #32
 80024d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 fa42 	bl	8002964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	3708      	adds	r7, #8
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d101      	bne.n	8002500 <HAL_TIM_ConfigClockSource+0x18>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e0b3      	b.n	8002668 <HAL_TIM_ConfigClockSource+0x180>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800251e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002526:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002538:	d03e      	beq.n	80025b8 <HAL_TIM_ConfigClockSource+0xd0>
 800253a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800253e:	f200 8087 	bhi.w	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002546:	f000 8085 	beq.w	8002654 <HAL_TIM_ConfigClockSource+0x16c>
 800254a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800254e:	d87f      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002550:	2b70      	cmp	r3, #112	; 0x70
 8002552:	d01a      	beq.n	800258a <HAL_TIM_ConfigClockSource+0xa2>
 8002554:	2b70      	cmp	r3, #112	; 0x70
 8002556:	d87b      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002558:	2b60      	cmp	r3, #96	; 0x60
 800255a:	d050      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x116>
 800255c:	2b60      	cmp	r3, #96	; 0x60
 800255e:	d877      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002560:	2b50      	cmp	r3, #80	; 0x50
 8002562:	d03c      	beq.n	80025de <HAL_TIM_ConfigClockSource+0xf6>
 8002564:	2b50      	cmp	r3, #80	; 0x50
 8002566:	d873      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d058      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x136>
 800256c:	2b40      	cmp	r3, #64	; 0x40
 800256e:	d86f      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002570:	2b30      	cmp	r3, #48	; 0x30
 8002572:	d064      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x156>
 8002574:	2b30      	cmp	r3, #48	; 0x30
 8002576:	d86b      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002578:	2b20      	cmp	r3, #32
 800257a:	d060      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x156>
 800257c:	2b20      	cmp	r3, #32
 800257e:	d867      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
 8002580:	2b00      	cmp	r3, #0
 8002582:	d05c      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x156>
 8002584:	2b10      	cmp	r3, #16
 8002586:	d05a      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002588:	e062      	b.n	8002650 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f000 f966 	bl	800286a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025ac:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	609a      	str	r2, [r3, #8]
      break;
 80025b6:	e04e      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6899      	ldr	r1, [r3, #8]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f000 f94f 	bl	800286a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689a      	ldr	r2, [r3, #8]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025da:	609a      	str	r2, [r3, #8]
      break;
 80025dc:	e03b      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f000 f8c6 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2150      	movs	r1, #80	; 0x50
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f91d 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 80025fc:	e02b      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	461a      	mov	r2, r3
 800260c:	f000 f8e4 	bl	80027d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2160      	movs	r1, #96	; 0x60
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f90d 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 800261c:	e01b      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6818      	ldr	r0, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	461a      	mov	r2, r3
 800262c:	f000 f8a6 	bl	800277c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2140      	movs	r1, #64	; 0x40
 8002636:	4618      	mov	r0, r3
 8002638:	f000 f8fd 	bl	8002836 <TIM_ITRx_SetConfig>
      break;
 800263c:	e00b      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4619      	mov	r1, r3
 8002648:	4610      	mov	r0, r2
 800264a:	f000 f8f4 	bl	8002836 <TIM_ITRx_SetConfig>
        break;
 800264e:	e002      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002650:	bf00      	nop
 8002652:	e000      	b.n	8002656 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002654:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002682:	b480      	push	{r7}
 8002684:	b083      	sub	sp, #12
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800269c:	bf00      	nop
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bc80      	pop	{r7}
 80026a4:	4770      	bx	lr

080026a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a29      	ldr	r2, [pc, #164]	; (8002770 <TIM_Base_SetConfig+0xb8>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d00b      	beq.n	80026e8 <TIM_Base_SetConfig+0x30>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d007      	beq.n	80026e8 <TIM_Base_SetConfig+0x30>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a26      	ldr	r2, [pc, #152]	; (8002774 <TIM_Base_SetConfig+0xbc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0x30>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a25      	ldr	r2, [pc, #148]	; (8002778 <TIM_Base_SetConfig+0xc0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d108      	bne.n	80026fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1c      	ldr	r2, [pc, #112]	; (8002770 <TIM_Base_SetConfig+0xb8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0x62>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0x62>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a19      	ldr	r2, [pc, #100]	; (8002774 <TIM_Base_SetConfig+0xbc>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0x62>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a18      	ldr	r2, [pc, #96]	; (8002778 <TIM_Base_SetConfig+0xc0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a07      	ldr	r2, [pc, #28]	; (8002770 <TIM_Base_SetConfig+0xb8>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d103      	bne.n	8002760 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr
 8002770:	40012c00 	.word	0x40012c00
 8002774:	40000400 	.word	0x40000400
 8002778:	40000800 	.word	0x40000800

0800277c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f023 0201 	bic.w	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f023 030a 	bic.w	r3, r3, #10
 80027b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4313      	orrs	r3, r2
 80027c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	621a      	str	r2, [r3, #32]
}
 80027ce:	bf00      	nop
 80027d0:	371c      	adds	r7, #28
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6a1b      	ldr	r3, [r3, #32]
 80027e8:	f023 0210 	bic.w	r2, r3, #16
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002802:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	031b      	lsls	r3, r3, #12
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	4313      	orrs	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	4313      	orrs	r3, r2
 800281e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	693a      	ldr	r2, [r7, #16]
 800282a:	621a      	str	r2, [r3, #32]
}
 800282c:	bf00      	nop
 800282e:	371c      	adds	r7, #28
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002836:	b480      	push	{r7}
 8002838:	b085      	sub	sp, #20
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
 800283e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800284c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	f043 0307 	orr.w	r3, r3, #7
 8002858:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b087      	sub	sp, #28
 800286e:	af00      	add	r7, sp, #0
 8002870:	60f8      	str	r0, [r7, #12]
 8002872:	60b9      	str	r1, [r7, #8]
 8002874:	607a      	str	r2, [r7, #4]
 8002876:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002884:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	021a      	lsls	r2, r3, #8
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	431a      	orrs	r2, r3
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	4313      	orrs	r3, r2
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	609a      	str	r2, [r3, #8]
}
 800289e:	bf00      	nop
 80028a0:	371c      	adds	r7, #28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028bc:	2302      	movs	r3, #2
 80028be:	e046      	b.n	800294e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d00e      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290c:	d009      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d004      	beq.n	8002922 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d10c      	bne.n	800293c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4313      	orrs	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00
 800295c:	40000400 	.word	0x40000400
 8002960:	40000800 	.word	0x40000800

08002964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e03f      	b.n	8002a1a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d106      	bne.n	80029b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe fb00 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2224      	movs	r2, #36	; 0x24
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68da      	ldr	r2, [r3, #12]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fc85 	bl	80032dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695a      	ldr	r2, [r3, #20]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b08a      	sub	sp, #40	; 0x28
 8002a26:	af02      	add	r7, sp, #8
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	603b      	str	r3, [r7, #0]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b20      	cmp	r3, #32
 8002a40:	d17c      	bne.n	8002b3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d002      	beq.n	8002a4e <HAL_UART_Transmit+0x2c>
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d101      	bne.n	8002a52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e075      	b.n	8002b3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <HAL_UART_Transmit+0x3e>
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	e06e      	b.n	8002b3e <HAL_UART_Transmit+0x11c>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2221      	movs	r2, #33	; 0x21
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fbf7 	bl	8001268 <HAL_GetTick>
 8002a7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	88fa      	ldrh	r2, [r7, #6]
 8002a80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	88fa      	ldrh	r2, [r7, #6]
 8002a86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a90:	d108      	bne.n	8002aa4 <HAL_UART_Transmit+0x82>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d104      	bne.n	8002aa4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	e003      	b.n	8002aac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ab4:	e02a      	b.n	8002b0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	2200      	movs	r2, #0
 8002abe:	2180      	movs	r1, #128	; 0x80
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 fa38 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e036      	b.n	8002b3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	461a      	mov	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ae4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	3302      	adds	r3, #2
 8002aea:	61bb      	str	r3, [r7, #24]
 8002aec:	e007      	b.n	8002afe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	781a      	ldrb	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	3301      	adds	r3, #1
 8002afc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	3b01      	subs	r3, #1
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1cf      	bne.n	8002ab6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2140      	movs	r1, #64	; 0x40
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fa08 	bl	8002f36 <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e006      	b.n	8002b3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	60f8      	str	r0, [r7, #12]
 8002b4e:	60b9      	str	r1, [r7, #8]
 8002b50:	4613      	mov	r3, r2
 8002b52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b20      	cmp	r3, #32
 8002b5e:	d11d      	bne.n	8002b9c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d002      	beq.n	8002b6c <HAL_UART_Receive_IT+0x26>
 8002b66:	88fb      	ldrh	r3, [r7, #6]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e016      	b.n	8002b9e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	d101      	bne.n	8002b7e <HAL_UART_Receive_IT+0x38>
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	e00f      	b.n	8002b9e <HAL_UART_Receive_IT+0x58>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2201      	movs	r2, #1
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68b9      	ldr	r1, [r7, #8]
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 fa19 	bl	8002fca <UART_Start_Receive_IT>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	e000      	b.n	8002b9e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002b9c:	2302      	movs	r3, #2
  }
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d10d      	bne.n	8002bfa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d008      	beq.n	8002bfa <HAL_UART_IRQHandler+0x52>
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 fac9 	bl	800318a <UART_Receive_IT>
      return;
 8002bf8:	e17b      	b.n	8002ef2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 80b1 	beq.w	8002d64 <HAL_UART_IRQHandler+0x1bc>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <HAL_UART_IRQHandler+0x70>
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 80a6 	beq.w	8002d64 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <HAL_UART_IRQHandler+0x90>
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	f043 0201 	orr.w	r2, r3, #1
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	f003 0304 	and.w	r3, r3, #4
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_UART_IRQHandler+0xb0>
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	f043 0202 	orr.w	r2, r3, #2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_UART_IRQHandler+0xd0>
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	f003 0301 	and.w	r3, r3, #1
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c70:	f043 0204 	orr.w	r2, r3, #4
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00f      	beq.n	8002ca2 <HAL_UART_IRQHandler+0xfa>
 8002c82:	6a3b      	ldr	r3, [r7, #32]
 8002c84:	f003 0320 	and.w	r3, r3, #32
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <HAL_UART_IRQHandler+0xee>
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	f043 0208 	orr.w	r2, r3, #8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 811e 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x11e>
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d002      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 fa62 	bl	800318a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	695b      	ldr	r3, [r3, #20]
 8002ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f003 0308 	and.w	r3, r3, #8
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d102      	bne.n	8002cee <HAL_UART_IRQHandler+0x146>
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d031      	beq.n	8002d52 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 f9a4 	bl	800303c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d023      	beq.n	8002d4a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d013      	beq.n	8002d42 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	4a76      	ldr	r2, [pc, #472]	; (8002ef8 <HAL_UART_IRQHandler+0x350>)
 8002d20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7fe fbf0 	bl	800150c <HAL_DMA_Abort_IT>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e00e      	b.n	8002d60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f8e3 	bl	8002f0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d48:	e00a      	b.n	8002d60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8df 	bl	8002f0e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	e006      	b.n	8002d60 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8db 	bl	8002f0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002d5e:	e0c3      	b.n	8002ee8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d60:	bf00      	nop
    return;
 8002d62:	e0c1      	b.n	8002ee8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	f040 80a1 	bne.w	8002eb0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 809b 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002d7a:	6a3b      	ldr	r3, [r7, #32]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8095 	beq.w	8002eb0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d86:	2300      	movs	r3, #0
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d04e      	beq.n	8002e48 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002db4:	8a3b      	ldrh	r3, [r7, #16]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8098 	beq.w	8002eec <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002dc0:	8a3a      	ldrh	r2, [r7, #16]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	f080 8092 	bcs.w	8002eec <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8a3a      	ldrh	r2, [r7, #16]
 8002dcc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d02b      	beq.n	8002e30 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002de6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695a      	ldr	r2, [r3, #20]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695a      	ldr	r2, [r3, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e06:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0210 	bic.w	r2, r2, #16
 8002e24:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fe fb33 	bl	8001496 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f86d 	bl	8002f20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002e46:	e051      	b.n	8002eec <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d047      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002e60:	8a7b      	ldrh	r3, [r7, #18]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d044      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e74:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	695a      	ldr	r2, [r3, #20]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f022 0201 	bic.w	r2, r2, #1
 8002e84:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0210 	bic.w	r2, r2, #16
 8002ea2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ea4:	8a7b      	ldrh	r3, [r7, #18]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 f839 	bl	8002f20 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002eae:	e01f      	b.n	8002ef0 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_UART_IRQHandler+0x324>
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f8f9 	bl	80030bc <UART_Transmit_IT>
    return;
 8002eca:	e012      	b.n	8002ef2 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x34a>
 8002ed6:	6a3b      	ldr	r3, [r7, #32]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f93a 	bl	800315a <UART_EndTransmit_IT>
    return;
 8002ee6:	e004      	b.n	8002ef2 <HAL_UART_IRQHandler+0x34a>
    return;
 8002ee8:	bf00      	nop
 8002eea:	e002      	b.n	8002ef2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002eec:	bf00      	nop
 8002eee:	e000      	b.n	8002ef2 <HAL_UART_IRQHandler+0x34a>
      return;
 8002ef0:	bf00      	nop
  }
}
 8002ef2:	3728      	adds	r7, #40	; 0x28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	08003095 	.word	0x08003095

08002efc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f2c:	bf00      	nop
 8002f2e:	370c      	adds	r7, #12
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bc80      	pop	{r7}
 8002f34:	4770      	bx	lr

08002f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	60f8      	str	r0, [r7, #12]
 8002f3e:	60b9      	str	r1, [r7, #8]
 8002f40:	603b      	str	r3, [r7, #0]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f46:	e02c      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d028      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f56:	f7fe f987 	bl	8001268 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d21d      	bcs.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f74:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	695a      	ldr	r2, [r3, #20]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0201 	bic.w	r2, r2, #1
 8002f84:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00f      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	bf0c      	ite	eq
 8002fb2:	2301      	moveq	r3, #1
 8002fb4:	2300      	movne	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	461a      	mov	r2, r3
 8002fba:	79fb      	ldrb	r3, [r7, #7]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d0c3      	beq.n	8002f48 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	88fa      	ldrh	r2, [r7, #6]
 8002fe2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2222      	movs	r2, #34	; 0x22
 8002ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800300e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0201 	orr.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0220 	orr.w	r2, r2, #32
 800302e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003052:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695a      	ldr	r2, [r3, #20]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003068:	2b01      	cmp	r3, #1
 800306a:	d107      	bne.n	800307c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f7ff ff2d 	bl	8002f0e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b21      	cmp	r3, #33	; 0x21
 80030ce:	d13e      	bne.n	800314e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d8:	d114      	bne.n	8003104 <UART_Transmit_IT+0x48>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d110      	bne.n	8003104 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	461a      	mov	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030f6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	621a      	str	r2, [r3, #32]
 8003102:	e008      	b.n	8003116 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	1c59      	adds	r1, r3, #1
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6211      	str	r1, [r2, #32]
 800310e:	781a      	ldrb	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29b      	uxth	r3, r3
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	4619      	mov	r1, r3
 8003124:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10f      	bne.n	800314a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003138:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003148:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	e000      	b.n	8003150 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800314e:	2302      	movs	r3, #2
  }
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	bc80      	pop	{r7}
 8003158:	4770      	bx	lr

0800315a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003170:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7ff febe 	bl	8002efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b086      	sub	sp, #24
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003198:	b2db      	uxtb	r3, r3
 800319a:	2b22      	cmp	r3, #34	; 0x22
 800319c:	f040 8099 	bne.w	80032d2 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a8:	d117      	bne.n	80031da <UART_Receive_IT+0x50>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d113      	bne.n	80031da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c8:	b29a      	uxth	r2, r3
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	1c9a      	adds	r2, r3, #2
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28
 80031d8:	e026      	b.n	8003228 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031de:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ec:	d007      	beq.n	80031fe <UART_Receive_IT+0x74>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10a      	bne.n	800320c <UART_Receive_IT+0x82>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d106      	bne.n	800320c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	b2da      	uxtb	r2, r3
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	701a      	strb	r2, [r3, #0]
 800320a:	e008      	b.n	800321e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003218:	b2da      	uxtb	r2, r3
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800322c:	b29b      	uxth	r3, r3
 800322e:	3b01      	subs	r3, #1
 8003230:	b29b      	uxth	r3, r3
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4619      	mov	r1, r3
 8003236:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003238:	2b00      	cmp	r3, #0
 800323a:	d148      	bne.n	80032ce <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0220 	bic.w	r2, r2, #32
 800324a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800325a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0201 	bic.w	r2, r2, #1
 800326a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	2b01      	cmp	r3, #1
 800327a:	d123      	bne.n	80032c4 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0210 	bic.w	r2, r2, #16
 8003290:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0310 	and.w	r3, r3, #16
 800329c:	2b10      	cmp	r3, #16
 800329e:	d10a      	bne.n	80032b6 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032ba:	4619      	mov	r1, r3
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7ff fe2f 	bl	8002f20 <HAL_UARTEx_RxEventCallback>
 80032c2:	e002      	b.n	80032ca <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7fd fc73 	bl	8000bb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e002      	b.n	80032d4 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80032ce:	2300      	movs	r3, #0
 80032d0:	e000      	b.n	80032d4 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	4313      	orrs	r3, r2
 800330a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003316:	f023 030c 	bic.w	r3, r3, #12
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	6812      	ldr	r2, [r2, #0]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	430b      	orrs	r3, r1
 8003322:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a2c      	ldr	r2, [pc, #176]	; (80033f0 <UART_SetConfig+0x114>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d103      	bne.n	800334c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7fe fef4 	bl	8002130 <HAL_RCC_GetPCLK2Freq>
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	e002      	b.n	8003352 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800334c:	f7fe fedc 	bl	8002108 <HAL_RCC_GetPCLK1Freq>
 8003350:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009a      	lsls	r2, r3, #2
 800335c:	441a      	add	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	fbb2 f3f3 	udiv	r3, r2, r3
 8003368:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <UART_SetConfig+0x118>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	095b      	lsrs	r3, r3, #5
 8003370:	0119      	lsls	r1, r3, #4
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009a      	lsls	r2, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	fbb2 f2f3 	udiv	r2, r2, r3
 8003388:	4b1a      	ldr	r3, [pc, #104]	; (80033f4 <UART_SetConfig+0x118>)
 800338a:	fba3 0302 	umull	r0, r3, r3, r2
 800338e:	095b      	lsrs	r3, r3, #5
 8003390:	2064      	movs	r0, #100	; 0x64
 8003392:	fb00 f303 	mul.w	r3, r0, r3
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	3332      	adds	r3, #50	; 0x32
 800339c:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <UART_SetConfig+0x118>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	095b      	lsrs	r3, r3, #5
 80033a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a8:	4419      	add	r1, r3
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	009a      	lsls	r2, r3, #2
 80033b4:	441a      	add	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c0:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <UART_SetConfig+0x118>)
 80033c2:	fba3 0302 	umull	r0, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2064      	movs	r0, #100	; 0x64
 80033ca:	fb00 f303 	mul.w	r3, r0, r3
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	3332      	adds	r3, #50	; 0x32
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <UART_SetConfig+0x118>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	095b      	lsrs	r3, r3, #5
 80033dc:	f003 020f 	and.w	r2, r3, #15
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	440a      	add	r2, r1
 80033e6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033e8:	bf00      	nop
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40013800 	.word	0x40013800
 80033f4:	51eb851f 	.word	0x51eb851f

080033f8 <__libc_init_array>:
 80033f8:	b570      	push	{r4, r5, r6, lr}
 80033fa:	2600      	movs	r6, #0
 80033fc:	4d0c      	ldr	r5, [pc, #48]	; (8003430 <__libc_init_array+0x38>)
 80033fe:	4c0d      	ldr	r4, [pc, #52]	; (8003434 <__libc_init_array+0x3c>)
 8003400:	1b64      	subs	r4, r4, r5
 8003402:	10a4      	asrs	r4, r4, #2
 8003404:	42a6      	cmp	r6, r4
 8003406:	d109      	bne.n	800341c <__libc_init_array+0x24>
 8003408:	f000 f822 	bl	8003450 <_init>
 800340c:	2600      	movs	r6, #0
 800340e:	4d0a      	ldr	r5, [pc, #40]	; (8003438 <__libc_init_array+0x40>)
 8003410:	4c0a      	ldr	r4, [pc, #40]	; (800343c <__libc_init_array+0x44>)
 8003412:	1b64      	subs	r4, r4, r5
 8003414:	10a4      	asrs	r4, r4, #2
 8003416:	42a6      	cmp	r6, r4
 8003418:	d105      	bne.n	8003426 <__libc_init_array+0x2e>
 800341a:	bd70      	pop	{r4, r5, r6, pc}
 800341c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003420:	4798      	blx	r3
 8003422:	3601      	adds	r6, #1
 8003424:	e7ee      	b.n	8003404 <__libc_init_array+0xc>
 8003426:	f855 3b04 	ldr.w	r3, [r5], #4
 800342a:	4798      	blx	r3
 800342c:	3601      	adds	r6, #1
 800342e:	e7f2      	b.n	8003416 <__libc_init_array+0x1e>
 8003430:	0800349c 	.word	0x0800349c
 8003434:	0800349c 	.word	0x0800349c
 8003438:	0800349c 	.word	0x0800349c
 800343c:	080034a0 	.word	0x080034a0

08003440 <memset>:
 8003440:	4603      	mov	r3, r0
 8003442:	4402      	add	r2, r0
 8003444:	4293      	cmp	r3, r2
 8003446:	d100      	bne.n	800344a <memset+0xa>
 8003448:	4770      	bx	lr
 800344a:	f803 1b01 	strb.w	r1, [r3], #1
 800344e:	e7f9      	b.n	8003444 <memset+0x4>

08003450 <_init>:
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	bf00      	nop
 8003454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003456:	bc08      	pop	{r3}
 8003458:	469e      	mov	lr, r3
 800345a:	4770      	bx	lr

0800345c <_fini>:
 800345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800345e:	bf00      	nop
 8003460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003462:	bc08      	pop	{r3}
 8003464:	469e      	mov	lr, r3
 8003466:	4770      	bx	lr
